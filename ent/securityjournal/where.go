// Code generated by ent, DO NOT EDIT.

package securityjournal

import (
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SecurityAccountID applies equality check predicate on the "security_account_id" field. It's identical to SecurityAccountIDEQ.
func SecurityAccountID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityAccountID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// BizNo applies equality check predicate on the "biz_no" field. It's identical to BizNoEQ.
func BizNo(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizNo), v))
	})
}

// BizType applies equality check predicate on the "biz_type" field. It's identical to BizTypeEQ.
func BizType(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizType), v))
	})
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// TradeCode applies equality check predicate on the "trade_code" field. It's identical to TradeCodeEQ.
func TradeCode(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeCode), v))
	})
}

// ChangeType applies equality check predicate on the "change_type" field. It's identical to ChangeTypeEQ.
func ChangeType(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeType), v))
	})
}

// RecordMethodID applies equality check predicate on the "record_method_id" field. It's identical to RecordMethodIDEQ.
func RecordMethodID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordMethodID), v))
	})
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// MaterialID applies equality check predicate on the "material_id" field. It's identical to MaterialIDEQ.
func MaterialID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialID), v))
	})
}

// MaterialNo applies equality check predicate on the "material_no" field. It's identical to MaterialNoEQ.
func MaterialNo(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialNo), v))
	})
}

// MaterialName applies equality check predicate on the "material_name" field. It's identical to MaterialNameEQ.
func MaterialName(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialName), v))
	})
}

// Multiplier applies equality check predicate on the "multiplier" field. It's identical to MultiplierEQ.
func Multiplier(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiplier), v))
	})
}

// PositionType applies equality check predicate on the "position_type" field. It's identical to PositionTypeEQ.
func PositionType(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionType), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Spec applies equality check predicate on the "spec" field. It's identical to SpecEQ.
func Spec(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpec), v))
	})
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// FeeOther applies equality check predicate on the "fee_other" field. It's identical to FeeOtherEQ.
func FeeOther(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeOther), v))
	})
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// Direction applies equality check predicate on the "direction" field. It's identical to DirectionEQ.
func Direction(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirection), v))
	})
}

// Tamper applies equality check predicate on the "tamper" field. It's identical to TamperEQ.
func Tamper(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTamper), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// PairSubjectCode applies equality check predicate on the "pair_subject_code" field. It's identical to PairSubjectCodeEQ.
func PairSubjectCode(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPairSubjectCode), v))
	})
}

// PairSecurityAccountID applies equality check predicate on the "pair_security_account_id" field. It's identical to PairSecurityAccountIDEQ.
func PairSecurityAccountID(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPairSecurityAccountID), v))
	})
}

// LastBalance applies equality check predicate on the "last_balance" field. It's identical to LastBalanceEQ.
func LastBalance(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBalance), v))
	})
}

// StlTime applies equality check predicate on the "stl_time" field. It's identical to StlTimeEQ.
func StlTime(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlTime), v))
	})
}

// FxRate applies equality check predicate on the "fx_rate" field. It's identical to FxRateEQ.
func FxRate(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFxRate), v))
	})
}

// StlCurrency applies equality check predicate on the "stl_currency" field. It's identical to StlCurrencyEQ.
func StlCurrency(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCurrency), v))
	})
}

// StlAmount applies equality check predicate on the "stl_amount" field. It's identical to StlAmountEQ.
func StlAmount(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlAmount), v))
	})
}

// StlMarginLv applies equality check predicate on the "stl_margin_lv" field. It's identical to StlMarginLvEQ.
func StlMarginLv(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMarginLv), v))
	})
}

// IsSettlement applies equality check predicate on the "is_settlement" field. It's identical to IsSettlementEQ.
func IsSettlement(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSettlement), v))
	})
}

// ActualStlTime applies equality check predicate on the "actual_stl_time" field. It's identical to ActualStlTimeEQ.
func ActualStlTime(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualStlTime), v))
	})
}

// TransNo applies equality check predicate on the "trans_no" field. It's identical to TransNoEQ.
func TransNo(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransNo), v))
	})
}

// TransTime applies equality check predicate on the "trans_time" field. It's identical to TransTimeEQ.
func TransTime(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransTime), v))
	})
}

// AccountingNo applies equality check predicate on the "accounting_no" field. It's identical to AccountingNoEQ.
func AccountingNo(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingNo), v))
	})
}

// AccountingTime applies equality check predicate on the "accounting_time" field. It's identical to AccountingTimeEQ.
func AccountingTime(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingTime), v))
	})
}

// AccountedPositionQty applies equality check predicate on the "accounted_position_qty" field. It's identical to AccountedPositionQtyEQ.
func AccountedPositionQty(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountedPositionQty), v))
	})
}

// CdDirection applies equality check predicate on the "cd_direction" field. It's identical to CdDirectionEQ.
func CdDirection(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdDirection), v))
	})
}

// ApplyFields applies equality check predicate on the "apply_fields" field. It's identical to ApplyFieldsEQ.
func ApplyFields(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyFields), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// RefTransNo applies equality check predicate on the "ref_trans_no" field. It's identical to RefTransNoEQ.
func RefTransNo(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefTransNo), v))
	})
}

// IsDayBooking applies equality check predicate on the "is_day_booking" field. It's identical to IsDayBookingEQ.
func IsDayBooking(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDayBooking), v))
	})
}

// IsEffectFund applies equality check predicate on the "is_effect_fund" field. It's identical to IsEffectFundEQ.
func IsEffectFund(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEffectFund), v))
	})
}

// SecurityAccountIDEQ applies the EQ predicate on the "security_account_id" field.
func SecurityAccountIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDNEQ applies the NEQ predicate on the "security_account_id" field.
func SecurityAccountIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDIn applies the In predicate on the "security_account_id" field.
func SecurityAccountIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecurityAccountID), v...))
	})
}

// SecurityAccountIDNotIn applies the NotIn predicate on the "security_account_id" field.
func SecurityAccountIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecurityAccountID), v...))
	})
}

// SecurityAccountIDGT applies the GT predicate on the "security_account_id" field.
func SecurityAccountIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDGTE applies the GTE predicate on the "security_account_id" field.
func SecurityAccountIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDLT applies the LT predicate on the "security_account_id" field.
func SecurityAccountIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDLTE applies the LTE predicate on the "security_account_id" field.
func SecurityAccountIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecurityAccountID), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// BizNoEQ applies the EQ predicate on the "biz_no" field.
func BizNoEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizNo), v))
	})
}

// BizNoNEQ applies the NEQ predicate on the "biz_no" field.
func BizNoNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBizNo), v))
	})
}

// BizNoIn applies the In predicate on the "biz_no" field.
func BizNoIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBizNo), v...))
	})
}

// BizNoNotIn applies the NotIn predicate on the "biz_no" field.
func BizNoNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBizNo), v...))
	})
}

// BizNoGT applies the GT predicate on the "biz_no" field.
func BizNoGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBizNo), v))
	})
}

// BizNoGTE applies the GTE predicate on the "biz_no" field.
func BizNoGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBizNo), v))
	})
}

// BizNoLT applies the LT predicate on the "biz_no" field.
func BizNoLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBizNo), v))
	})
}

// BizNoLTE applies the LTE predicate on the "biz_no" field.
func BizNoLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBizNo), v))
	})
}

// BizNoContains applies the Contains predicate on the "biz_no" field.
func BizNoContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBizNo), v))
	})
}

// BizNoHasPrefix applies the HasPrefix predicate on the "biz_no" field.
func BizNoHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBizNo), v))
	})
}

// BizNoHasSuffix applies the HasSuffix predicate on the "biz_no" field.
func BizNoHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBizNo), v))
	})
}

// BizNoIsNil applies the IsNil predicate on the "biz_no" field.
func BizNoIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBizNo)))
	})
}

// BizNoNotNil applies the NotNil predicate on the "biz_no" field.
func BizNoNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBizNo)))
	})
}

// BizNoEqualFold applies the EqualFold predicate on the "biz_no" field.
func BizNoEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBizNo), v))
	})
}

// BizNoContainsFold applies the ContainsFold predicate on the "biz_no" field.
func BizNoContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBizNo), v))
	})
}

// BizTypeEQ applies the EQ predicate on the "biz_type" field.
func BizTypeEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizType), v))
	})
}

// BizTypeNEQ applies the NEQ predicate on the "biz_type" field.
func BizTypeNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBizType), v))
	})
}

// BizTypeIn applies the In predicate on the "biz_type" field.
func BizTypeIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBizType), v...))
	})
}

// BizTypeNotIn applies the NotIn predicate on the "biz_type" field.
func BizTypeNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBizType), v...))
	})
}

// BizTypeGT applies the GT predicate on the "biz_type" field.
func BizTypeGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBizType), v))
	})
}

// BizTypeGTE applies the GTE predicate on the "biz_type" field.
func BizTypeGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBizType), v))
	})
}

// BizTypeLT applies the LT predicate on the "biz_type" field.
func BizTypeLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBizType), v))
	})
}

// BizTypeLTE applies the LTE predicate on the "biz_type" field.
func BizTypeLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBizType), v))
	})
}

// BizTypeContains applies the Contains predicate on the "biz_type" field.
func BizTypeContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBizType), v))
	})
}

// BizTypeHasPrefix applies the HasPrefix predicate on the "biz_type" field.
func BizTypeHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBizType), v))
	})
}

// BizTypeHasSuffix applies the HasSuffix predicate on the "biz_type" field.
func BizTypeHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBizType), v))
	})
}

// BizTypeIsNil applies the IsNil predicate on the "biz_type" field.
func BizTypeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBizType)))
	})
}

// BizTypeNotNil applies the NotNil predicate on the "biz_type" field.
func BizTypeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBizType)))
	})
}

// BizTypeEqualFold applies the EqualFold predicate on the "biz_type" field.
func BizTypeEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBizType), v))
	})
}

// BizTypeContainsFold applies the ContainsFold predicate on the "biz_type" field.
func BizTypeContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBizType), v))
	})
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgID), v))
	})
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrgID), v...))
	})
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrgID), v...))
	})
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrgID), v))
	})
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrgID), v))
	})
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrgID), v))
	})
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrgID), v))
	})
}

// TradeCodeEQ applies the EQ predicate on the "trade_code" field.
func TradeCodeEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeCode), v))
	})
}

// TradeCodeNEQ applies the NEQ predicate on the "trade_code" field.
func TradeCodeNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTradeCode), v))
	})
}

// TradeCodeIn applies the In predicate on the "trade_code" field.
func TradeCodeIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTradeCode), v...))
	})
}

// TradeCodeNotIn applies the NotIn predicate on the "trade_code" field.
func TradeCodeNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTradeCode), v...))
	})
}

// TradeCodeGT applies the GT predicate on the "trade_code" field.
func TradeCodeGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTradeCode), v))
	})
}

// TradeCodeGTE applies the GTE predicate on the "trade_code" field.
func TradeCodeGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTradeCode), v))
	})
}

// TradeCodeLT applies the LT predicate on the "trade_code" field.
func TradeCodeLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTradeCode), v))
	})
}

// TradeCodeLTE applies the LTE predicate on the "trade_code" field.
func TradeCodeLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTradeCode), v))
	})
}

// TradeCodeContains applies the Contains predicate on the "trade_code" field.
func TradeCodeContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTradeCode), v))
	})
}

// TradeCodeHasPrefix applies the HasPrefix predicate on the "trade_code" field.
func TradeCodeHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTradeCode), v))
	})
}

// TradeCodeHasSuffix applies the HasSuffix predicate on the "trade_code" field.
func TradeCodeHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTradeCode), v))
	})
}

// TradeCodeIsNil applies the IsNil predicate on the "trade_code" field.
func TradeCodeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTradeCode)))
	})
}

// TradeCodeNotNil applies the NotNil predicate on the "trade_code" field.
func TradeCodeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTradeCode)))
	})
}

// TradeCodeEqualFold applies the EqualFold predicate on the "trade_code" field.
func TradeCodeEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTradeCode), v))
	})
}

// TradeCodeContainsFold applies the ContainsFold predicate on the "trade_code" field.
func TradeCodeContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTradeCode), v))
	})
}

// ChangeTypeEQ applies the EQ predicate on the "change_type" field.
func ChangeTypeEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeType), v))
	})
}

// ChangeTypeNEQ applies the NEQ predicate on the "change_type" field.
func ChangeTypeNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeType), v))
	})
}

// ChangeTypeIn applies the In predicate on the "change_type" field.
func ChangeTypeIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChangeType), v...))
	})
}

// ChangeTypeNotIn applies the NotIn predicate on the "change_type" field.
func ChangeTypeNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChangeType), v...))
	})
}

// ChangeTypeGT applies the GT predicate on the "change_type" field.
func ChangeTypeGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeType), v))
	})
}

// ChangeTypeGTE applies the GTE predicate on the "change_type" field.
func ChangeTypeGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeType), v))
	})
}

// ChangeTypeLT applies the LT predicate on the "change_type" field.
func ChangeTypeLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeType), v))
	})
}

// ChangeTypeLTE applies the LTE predicate on the "change_type" field.
func ChangeTypeLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeType), v))
	})
}

// ChangeTypeContains applies the Contains predicate on the "change_type" field.
func ChangeTypeContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChangeType), v))
	})
}

// ChangeTypeHasPrefix applies the HasPrefix predicate on the "change_type" field.
func ChangeTypeHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChangeType), v))
	})
}

// ChangeTypeHasSuffix applies the HasSuffix predicate on the "change_type" field.
func ChangeTypeHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChangeType), v))
	})
}

// ChangeTypeIsNil applies the IsNil predicate on the "change_type" field.
func ChangeTypeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeType)))
	})
}

// ChangeTypeNotNil applies the NotNil predicate on the "change_type" field.
func ChangeTypeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeType)))
	})
}

// ChangeTypeEqualFold applies the EqualFold predicate on the "change_type" field.
func ChangeTypeEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChangeType), v))
	})
}

// ChangeTypeContainsFold applies the ContainsFold predicate on the "change_type" field.
func ChangeTypeContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChangeType), v))
	})
}

// RecordMethodIDEQ applies the EQ predicate on the "record_method_id" field.
func RecordMethodIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDNEQ applies the NEQ predicate on the "record_method_id" field.
func RecordMethodIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDIn applies the In predicate on the "record_method_id" field.
func RecordMethodIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecordMethodID), v...))
	})
}

// RecordMethodIDNotIn applies the NotIn predicate on the "record_method_id" field.
func RecordMethodIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecordMethodID), v...))
	})
}

// RecordMethodIDGT applies the GT predicate on the "record_method_id" field.
func RecordMethodIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDGTE applies the GTE predicate on the "record_method_id" field.
func RecordMethodIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDLT applies the LT predicate on the "record_method_id" field.
func RecordMethodIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDLTE applies the LTE predicate on the "record_method_id" field.
func RecordMethodIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordMethodID), v))
	})
}

// RecordMethodIDIsNil applies the IsNil predicate on the "record_method_id" field.
func RecordMethodIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecordMethodID)))
	})
}

// RecordMethodIDNotNil applies the NotNil predicate on the "record_method_id" field.
func RecordMethodIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecordMethodID)))
	})
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectID), v...))
	})
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectID), v...))
	})
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectID), v))
	})
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectID), v))
	})
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDIsNil applies the IsNil predicate on the "project_id" field.
func ProjectIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProjectID)))
	})
}

// ProjectIDNotNil applies the NotNil predicate on the "project_id" field.
func ProjectIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProjectID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// MaterialIDEQ applies the EQ predicate on the "material_id" field.
func MaterialIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialID), v))
	})
}

// MaterialIDNEQ applies the NEQ predicate on the "material_id" field.
func MaterialIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialID), v))
	})
}

// MaterialIDIn applies the In predicate on the "material_id" field.
func MaterialIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialID), v...))
	})
}

// MaterialIDNotIn applies the NotIn predicate on the "material_id" field.
func MaterialIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialID), v...))
	})
}

// MaterialIDGT applies the GT predicate on the "material_id" field.
func MaterialIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialID), v))
	})
}

// MaterialIDGTE applies the GTE predicate on the "material_id" field.
func MaterialIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialID), v))
	})
}

// MaterialIDLT applies the LT predicate on the "material_id" field.
func MaterialIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialID), v))
	})
}

// MaterialIDLTE applies the LTE predicate on the "material_id" field.
func MaterialIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialID), v))
	})
}

// MaterialIDIsNil applies the IsNil predicate on the "material_id" field.
func MaterialIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaterialID)))
	})
}

// MaterialIDNotNil applies the NotNil predicate on the "material_id" field.
func MaterialIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaterialID)))
	})
}

// MaterialNoEQ applies the EQ predicate on the "material_no" field.
func MaterialNoEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoNEQ applies the NEQ predicate on the "material_no" field.
func MaterialNoNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoIn applies the In predicate on the "material_no" field.
func MaterialNoIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialNo), v...))
	})
}

// MaterialNoNotIn applies the NotIn predicate on the "material_no" field.
func MaterialNoNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialNo), v...))
	})
}

// MaterialNoGT applies the GT predicate on the "material_no" field.
func MaterialNoGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoGTE applies the GTE predicate on the "material_no" field.
func MaterialNoGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoLT applies the LT predicate on the "material_no" field.
func MaterialNoLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoLTE applies the LTE predicate on the "material_no" field.
func MaterialNoLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoContains applies the Contains predicate on the "material_no" field.
func MaterialNoContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoHasPrefix applies the HasPrefix predicate on the "material_no" field.
func MaterialNoHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoHasSuffix applies the HasSuffix predicate on the "material_no" field.
func MaterialNoHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoIsNil applies the IsNil predicate on the "material_no" field.
func MaterialNoIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaterialNo)))
	})
}

// MaterialNoNotNil applies the NotNil predicate on the "material_no" field.
func MaterialNoNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaterialNo)))
	})
}

// MaterialNoEqualFold applies the EqualFold predicate on the "material_no" field.
func MaterialNoEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoContainsFold applies the ContainsFold predicate on the "material_no" field.
func MaterialNoContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterialNo), v))
	})
}

// MaterialNameEQ applies the EQ predicate on the "material_name" field.
func MaterialNameEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialName), v))
	})
}

// MaterialNameNEQ applies the NEQ predicate on the "material_name" field.
func MaterialNameNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialName), v))
	})
}

// MaterialNameIn applies the In predicate on the "material_name" field.
func MaterialNameIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialName), v...))
	})
}

// MaterialNameNotIn applies the NotIn predicate on the "material_name" field.
func MaterialNameNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialName), v...))
	})
}

// MaterialNameGT applies the GT predicate on the "material_name" field.
func MaterialNameGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialName), v))
	})
}

// MaterialNameGTE applies the GTE predicate on the "material_name" field.
func MaterialNameGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialName), v))
	})
}

// MaterialNameLT applies the LT predicate on the "material_name" field.
func MaterialNameLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialName), v))
	})
}

// MaterialNameLTE applies the LTE predicate on the "material_name" field.
func MaterialNameLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialName), v))
	})
}

// MaterialNameContains applies the Contains predicate on the "material_name" field.
func MaterialNameContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterialName), v))
	})
}

// MaterialNameHasPrefix applies the HasPrefix predicate on the "material_name" field.
func MaterialNameHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterialName), v))
	})
}

// MaterialNameHasSuffix applies the HasSuffix predicate on the "material_name" field.
func MaterialNameHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterialName), v))
	})
}

// MaterialNameIsNil applies the IsNil predicate on the "material_name" field.
func MaterialNameIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaterialName)))
	})
}

// MaterialNameNotNil applies the NotNil predicate on the "material_name" field.
func MaterialNameNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaterialName)))
	})
}

// MaterialNameEqualFold applies the EqualFold predicate on the "material_name" field.
func MaterialNameEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterialName), v))
	})
}

// MaterialNameContainsFold applies the ContainsFold predicate on the "material_name" field.
func MaterialNameContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterialName), v))
	})
}

// MultiplierEQ applies the EQ predicate on the "multiplier" field.
func MultiplierEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiplier), v))
	})
}

// MultiplierNEQ applies the NEQ predicate on the "multiplier" field.
func MultiplierNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiplier), v))
	})
}

// MultiplierIn applies the In predicate on the "multiplier" field.
func MultiplierIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMultiplier), v...))
	})
}

// MultiplierNotIn applies the NotIn predicate on the "multiplier" field.
func MultiplierNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMultiplier), v...))
	})
}

// MultiplierGT applies the GT predicate on the "multiplier" field.
func MultiplierGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMultiplier), v))
	})
}

// MultiplierGTE applies the GTE predicate on the "multiplier" field.
func MultiplierGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMultiplier), v))
	})
}

// MultiplierLT applies the LT predicate on the "multiplier" field.
func MultiplierLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMultiplier), v))
	})
}

// MultiplierLTE applies the LTE predicate on the "multiplier" field.
func MultiplierLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMultiplier), v))
	})
}

// MultiplierIsNil applies the IsNil predicate on the "multiplier" field.
func MultiplierIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMultiplier)))
	})
}

// MultiplierNotNil applies the NotNil predicate on the "multiplier" field.
func MultiplierNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMultiplier)))
	})
}

// PositionTypeEQ applies the EQ predicate on the "position_type" field.
func PositionTypeEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionType), v))
	})
}

// PositionTypeNEQ applies the NEQ predicate on the "position_type" field.
func PositionTypeNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionType), v))
	})
}

// PositionTypeIn applies the In predicate on the "position_type" field.
func PositionTypeIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPositionType), v...))
	})
}

// PositionTypeNotIn applies the NotIn predicate on the "position_type" field.
func PositionTypeNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPositionType), v...))
	})
}

// PositionTypeGT applies the GT predicate on the "position_type" field.
func PositionTypeGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionType), v))
	})
}

// PositionTypeGTE applies the GTE predicate on the "position_type" field.
func PositionTypeGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionType), v))
	})
}

// PositionTypeLT applies the LT predicate on the "position_type" field.
func PositionTypeLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionType), v))
	})
}

// PositionTypeLTE applies the LTE predicate on the "position_type" field.
func PositionTypeLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionType), v))
	})
}

// PositionTypeIsNil applies the IsNil predicate on the "position_type" field.
func PositionTypeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPositionType)))
	})
}

// PositionTypeNotNil applies the NotNil predicate on the "position_type" field.
func PositionTypeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPositionType)))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrency)))
	})
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrency)))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQty), v))
	})
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQty), v...))
	})
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQty), v...))
	})
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQty), v))
	})
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQty), v))
	})
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQty), v))
	})
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQty), v))
	})
}

// QtyIsNil applies the IsNil predicate on the "qty" field.
func QtyIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQty)))
	})
}

// QtyNotNil applies the NotNil predicate on the "qty" field.
func QtyNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQty)))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// CostIsNil applies the IsNil predicate on the "cost" field.
func CostIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCost)))
	})
}

// CostNotNil applies the NotNil predicate on the "cost" field.
func CostNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCost)))
	})
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotal), v))
	})
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotal), v...))
	})
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotal), v...))
	})
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotal), v))
	})
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotal), v))
	})
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotal), v))
	})
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotal), v))
	})
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotal)))
	})
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotal)))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnit)))
	})
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnit)))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// SpecEQ applies the EQ predicate on the "spec" field.
func SpecEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpec), v))
	})
}

// SpecNEQ applies the NEQ predicate on the "spec" field.
func SpecNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpec), v))
	})
}

// SpecIn applies the In predicate on the "spec" field.
func SpecIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpec), v...))
	})
}

// SpecNotIn applies the NotIn predicate on the "spec" field.
func SpecNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpec), v...))
	})
}

// SpecGT applies the GT predicate on the "spec" field.
func SpecGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpec), v))
	})
}

// SpecGTE applies the GTE predicate on the "spec" field.
func SpecGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpec), v))
	})
}

// SpecLT applies the LT predicate on the "spec" field.
func SpecLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpec), v))
	})
}

// SpecLTE applies the LTE predicate on the "spec" field.
func SpecLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpec), v))
	})
}

// SpecContains applies the Contains predicate on the "spec" field.
func SpecContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpec), v))
	})
}

// SpecHasPrefix applies the HasPrefix predicate on the "spec" field.
func SpecHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpec), v))
	})
}

// SpecHasSuffix applies the HasSuffix predicate on the "spec" field.
func SpecHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpec), v))
	})
}

// SpecIsNil applies the IsNil predicate on the "spec" field.
func SpecIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpec)))
	})
}

// SpecNotNil applies the NotNil predicate on the "spec" field.
func SpecNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpec)))
	})
}

// SpecEqualFold applies the EqualFold predicate on the "spec" field.
func SpecEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpec), v))
	})
}

// SpecContainsFold applies the ContainsFold predicate on the "spec" field.
func SpecContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpec), v))
	})
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommission), v))
	})
}

// CommissionIn applies the In predicate on the "commission" field.
func CommissionIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommission), v...))
	})
}

// CommissionNotIn applies the NotIn predicate on the "commission" field.
func CommissionNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommission), v...))
	})
}

// CommissionGT applies the GT predicate on the "commission" field.
func CommissionGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommission), v))
	})
}

// CommissionGTE applies the GTE predicate on the "commission" field.
func CommissionGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommission), v))
	})
}

// CommissionLT applies the LT predicate on the "commission" field.
func CommissionLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommission), v))
	})
}

// CommissionLTE applies the LTE predicate on the "commission" field.
func CommissionLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommission), v))
	})
}

// CommissionIsNil applies the IsNil predicate on the "commission" field.
func CommissionIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommission)))
	})
}

// CommissionNotNil applies the NotNil predicate on the "commission" field.
func CommissionNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommission)))
	})
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFee), v))
	})
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFee), v...))
	})
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFee), v...))
	})
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFee), v))
	})
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFee), v))
	})
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFee), v))
	})
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFee), v))
	})
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFee)))
	})
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFee)))
	})
}

// FeeOtherEQ applies the EQ predicate on the "fee_other" field.
func FeeOtherEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeOther), v))
	})
}

// FeeOtherNEQ applies the NEQ predicate on the "fee_other" field.
func FeeOtherNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeOther), v))
	})
}

// FeeOtherIn applies the In predicate on the "fee_other" field.
func FeeOtherIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeOther), v...))
	})
}

// FeeOtherNotIn applies the NotIn predicate on the "fee_other" field.
func FeeOtherNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeOther), v...))
	})
}

// FeeOtherGT applies the GT predicate on the "fee_other" field.
func FeeOtherGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeOther), v))
	})
}

// FeeOtherGTE applies the GTE predicate on the "fee_other" field.
func FeeOtherGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeOther), v))
	})
}

// FeeOtherLT applies the LT predicate on the "fee_other" field.
func FeeOtherLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeOther), v))
	})
}

// FeeOtherLTE applies the LTE predicate on the "fee_other" field.
func FeeOtherLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeOther), v))
	})
}

// FeeOtherIsNil applies the IsNil predicate on the "fee_other" field.
func FeeOtherIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeeOther)))
	})
}

// FeeOtherNotNil applies the NotNil predicate on the "fee_other" field.
func FeeOtherNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeeOther)))
	})
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCount), v))
	})
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCount), v...))
	})
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCount), v...))
	})
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCount), v))
	})
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCount), v))
	})
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCount), v))
	})
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCount), v))
	})
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCount)))
	})
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCount)))
	})
}

// DirectionEQ applies the EQ predicate on the "direction" field.
func DirectionEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirection), v))
	})
}

// DirectionNEQ applies the NEQ predicate on the "direction" field.
func DirectionNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirection), v))
	})
}

// DirectionIn applies the In predicate on the "direction" field.
func DirectionIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDirection), v...))
	})
}

// DirectionNotIn applies the NotIn predicate on the "direction" field.
func DirectionNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDirection), v...))
	})
}

// DirectionGT applies the GT predicate on the "direction" field.
func DirectionGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDirection), v))
	})
}

// DirectionGTE applies the GTE predicate on the "direction" field.
func DirectionGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDirection), v))
	})
}

// DirectionLT applies the LT predicate on the "direction" field.
func DirectionLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDirection), v))
	})
}

// DirectionLTE applies the LTE predicate on the "direction" field.
func DirectionLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDirection), v))
	})
}

// DirectionIsNil applies the IsNil predicate on the "direction" field.
func DirectionIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDirection)))
	})
}

// DirectionNotNil applies the NotNil predicate on the "direction" field.
func DirectionNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDirection)))
	})
}

// TamperEQ applies the EQ predicate on the "tamper" field.
func TamperEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTamper), v))
	})
}

// TamperNEQ applies the NEQ predicate on the "tamper" field.
func TamperNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTamper), v))
	})
}

// TamperIn applies the In predicate on the "tamper" field.
func TamperIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTamper), v...))
	})
}

// TamperNotIn applies the NotIn predicate on the "tamper" field.
func TamperNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTamper), v...))
	})
}

// TamperGT applies the GT predicate on the "tamper" field.
func TamperGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTamper), v))
	})
}

// TamperGTE applies the GTE predicate on the "tamper" field.
func TamperGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTamper), v))
	})
}

// TamperLT applies the LT predicate on the "tamper" field.
func TamperLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTamper), v))
	})
}

// TamperLTE applies the LTE predicate on the "tamper" field.
func TamperLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTamper), v))
	})
}

// TamperContains applies the Contains predicate on the "tamper" field.
func TamperContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTamper), v))
	})
}

// TamperHasPrefix applies the HasPrefix predicate on the "tamper" field.
func TamperHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTamper), v))
	})
}

// TamperHasSuffix applies the HasSuffix predicate on the "tamper" field.
func TamperHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTamper), v))
	})
}

// TamperIsNil applies the IsNil predicate on the "tamper" field.
func TamperIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTamper)))
	})
}

// TamperNotNil applies the NotNil predicate on the "tamper" field.
func TamperNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTamper)))
	})
}

// TamperEqualFold applies the EqualFold predicate on the "tamper" field.
func TamperEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTamper), v))
	})
}

// TamperContainsFold applies the ContainsFold predicate on the "tamper" field.
func TamperContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTamper), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// PairSubjectCodeEQ applies the EQ predicate on the "pair_subject_code" field.
func PairSubjectCodeEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeNEQ applies the NEQ predicate on the "pair_subject_code" field.
func PairSubjectCodeNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeIn applies the In predicate on the "pair_subject_code" field.
func PairSubjectCodeIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPairSubjectCode), v...))
	})
}

// PairSubjectCodeNotIn applies the NotIn predicate on the "pair_subject_code" field.
func PairSubjectCodeNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPairSubjectCode), v...))
	})
}

// PairSubjectCodeGT applies the GT predicate on the "pair_subject_code" field.
func PairSubjectCodeGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeGTE applies the GTE predicate on the "pair_subject_code" field.
func PairSubjectCodeGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeLT applies the LT predicate on the "pair_subject_code" field.
func PairSubjectCodeLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeLTE applies the LTE predicate on the "pair_subject_code" field.
func PairSubjectCodeLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeContains applies the Contains predicate on the "pair_subject_code" field.
func PairSubjectCodeContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeHasPrefix applies the HasPrefix predicate on the "pair_subject_code" field.
func PairSubjectCodeHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeHasSuffix applies the HasSuffix predicate on the "pair_subject_code" field.
func PairSubjectCodeHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeIsNil applies the IsNil predicate on the "pair_subject_code" field.
func PairSubjectCodeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPairSubjectCode)))
	})
}

// PairSubjectCodeNotNil applies the NotNil predicate on the "pair_subject_code" field.
func PairSubjectCodeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPairSubjectCode)))
	})
}

// PairSubjectCodeEqualFold applies the EqualFold predicate on the "pair_subject_code" field.
func PairSubjectCodeEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPairSubjectCode), v))
	})
}

// PairSubjectCodeContainsFold applies the ContainsFold predicate on the "pair_subject_code" field.
func PairSubjectCodeContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPairSubjectCode), v))
	})
}

// PairSecurityAccountIDEQ applies the EQ predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDNEQ applies the NEQ predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDIn applies the In predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPairSecurityAccountID), v...))
	})
}

// PairSecurityAccountIDNotIn applies the NotIn predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPairSecurityAccountID), v...))
	})
}

// PairSecurityAccountIDGT applies the GT predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDGTE applies the GTE predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDLT applies the LT predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDLTE applies the LTE predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPairSecurityAccountID), v))
	})
}

// PairSecurityAccountIDIsNil applies the IsNil predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPairSecurityAccountID)))
	})
}

// PairSecurityAccountIDNotNil applies the NotNil predicate on the "pair_security_account_id" field.
func PairSecurityAccountIDNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPairSecurityAccountID)))
	})
}

// LastBalanceEQ applies the EQ predicate on the "last_balance" field.
func LastBalanceEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBalance), v))
	})
}

// LastBalanceNEQ applies the NEQ predicate on the "last_balance" field.
func LastBalanceNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBalance), v))
	})
}

// LastBalanceIn applies the In predicate on the "last_balance" field.
func LastBalanceIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastBalance), v...))
	})
}

// LastBalanceNotIn applies the NotIn predicate on the "last_balance" field.
func LastBalanceNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastBalance), v...))
	})
}

// LastBalanceGT applies the GT predicate on the "last_balance" field.
func LastBalanceGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBalance), v))
	})
}

// LastBalanceGTE applies the GTE predicate on the "last_balance" field.
func LastBalanceGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBalance), v))
	})
}

// LastBalanceLT applies the LT predicate on the "last_balance" field.
func LastBalanceLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBalance), v))
	})
}

// LastBalanceLTE applies the LTE predicate on the "last_balance" field.
func LastBalanceLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBalance), v))
	})
}

// LastBalanceIsNil applies the IsNil predicate on the "last_balance" field.
func LastBalanceIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBalance)))
	})
}

// LastBalanceNotNil applies the NotNil predicate on the "last_balance" field.
func LastBalanceNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBalance)))
	})
}

// StlTimeEQ applies the EQ predicate on the "stl_time" field.
func StlTimeEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlTime), v))
	})
}

// StlTimeNEQ applies the NEQ predicate on the "stl_time" field.
func StlTimeNEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlTime), v))
	})
}

// StlTimeIn applies the In predicate on the "stl_time" field.
func StlTimeIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlTime), v...))
	})
}

// StlTimeNotIn applies the NotIn predicate on the "stl_time" field.
func StlTimeNotIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlTime), v...))
	})
}

// StlTimeGT applies the GT predicate on the "stl_time" field.
func StlTimeGT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlTime), v))
	})
}

// StlTimeGTE applies the GTE predicate on the "stl_time" field.
func StlTimeGTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlTime), v))
	})
}

// StlTimeLT applies the LT predicate on the "stl_time" field.
func StlTimeLT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlTime), v))
	})
}

// StlTimeLTE applies the LTE predicate on the "stl_time" field.
func StlTimeLTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlTime), v))
	})
}

// StlTimeIsNil applies the IsNil predicate on the "stl_time" field.
func StlTimeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlTime)))
	})
}

// StlTimeNotNil applies the NotNil predicate on the "stl_time" field.
func StlTimeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlTime)))
	})
}

// FxRateEQ applies the EQ predicate on the "fx_rate" field.
func FxRateEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFxRate), v))
	})
}

// FxRateNEQ applies the NEQ predicate on the "fx_rate" field.
func FxRateNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFxRate), v))
	})
}

// FxRateIn applies the In predicate on the "fx_rate" field.
func FxRateIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFxRate), v...))
	})
}

// FxRateNotIn applies the NotIn predicate on the "fx_rate" field.
func FxRateNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFxRate), v...))
	})
}

// FxRateGT applies the GT predicate on the "fx_rate" field.
func FxRateGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFxRate), v))
	})
}

// FxRateGTE applies the GTE predicate on the "fx_rate" field.
func FxRateGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFxRate), v))
	})
}

// FxRateLT applies the LT predicate on the "fx_rate" field.
func FxRateLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFxRate), v))
	})
}

// FxRateLTE applies the LTE predicate on the "fx_rate" field.
func FxRateLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFxRate), v))
	})
}

// FxRateIsNil applies the IsNil predicate on the "fx_rate" field.
func FxRateIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFxRate)))
	})
}

// FxRateNotNil applies the NotNil predicate on the "fx_rate" field.
func FxRateNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFxRate)))
	})
}

// StlCurrencyEQ applies the EQ predicate on the "stl_currency" field.
func StlCurrencyEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyNEQ applies the NEQ predicate on the "stl_currency" field.
func StlCurrencyNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyIn applies the In predicate on the "stl_currency" field.
func StlCurrencyIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlCurrency), v...))
	})
}

// StlCurrencyNotIn applies the NotIn predicate on the "stl_currency" field.
func StlCurrencyNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlCurrency), v...))
	})
}

// StlCurrencyGT applies the GT predicate on the "stl_currency" field.
func StlCurrencyGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyGTE applies the GTE predicate on the "stl_currency" field.
func StlCurrencyGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyLT applies the LT predicate on the "stl_currency" field.
func StlCurrencyLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyLTE applies the LTE predicate on the "stl_currency" field.
func StlCurrencyLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyContains applies the Contains predicate on the "stl_currency" field.
func StlCurrencyContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyHasPrefix applies the HasPrefix predicate on the "stl_currency" field.
func StlCurrencyHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyHasSuffix applies the HasSuffix predicate on the "stl_currency" field.
func StlCurrencyHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyIsNil applies the IsNil predicate on the "stl_currency" field.
func StlCurrencyIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlCurrency)))
	})
}

// StlCurrencyNotNil applies the NotNil predicate on the "stl_currency" field.
func StlCurrencyNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlCurrency)))
	})
}

// StlCurrencyEqualFold applies the EqualFold predicate on the "stl_currency" field.
func StlCurrencyEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyContainsFold applies the ContainsFold predicate on the "stl_currency" field.
func StlCurrencyContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStlCurrency), v))
	})
}

// StlAmountEQ applies the EQ predicate on the "stl_amount" field.
func StlAmountEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlAmount), v))
	})
}

// StlAmountNEQ applies the NEQ predicate on the "stl_amount" field.
func StlAmountNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlAmount), v))
	})
}

// StlAmountIn applies the In predicate on the "stl_amount" field.
func StlAmountIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlAmount), v...))
	})
}

// StlAmountNotIn applies the NotIn predicate on the "stl_amount" field.
func StlAmountNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlAmount), v...))
	})
}

// StlAmountGT applies the GT predicate on the "stl_amount" field.
func StlAmountGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlAmount), v))
	})
}

// StlAmountGTE applies the GTE predicate on the "stl_amount" field.
func StlAmountGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlAmount), v))
	})
}

// StlAmountLT applies the LT predicate on the "stl_amount" field.
func StlAmountLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlAmount), v))
	})
}

// StlAmountLTE applies the LTE predicate on the "stl_amount" field.
func StlAmountLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlAmount), v))
	})
}

// StlAmountIsNil applies the IsNil predicate on the "stl_amount" field.
func StlAmountIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlAmount)))
	})
}

// StlAmountNotNil applies the NotNil predicate on the "stl_amount" field.
func StlAmountNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlAmount)))
	})
}

// StlMarginLvEQ applies the EQ predicate on the "stl_margin_lv" field.
func StlMarginLvEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvNEQ applies the NEQ predicate on the "stl_margin_lv" field.
func StlMarginLvNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvIn applies the In predicate on the "stl_margin_lv" field.
func StlMarginLvIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlMarginLv), v...))
	})
}

// StlMarginLvNotIn applies the NotIn predicate on the "stl_margin_lv" field.
func StlMarginLvNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlMarginLv), v...))
	})
}

// StlMarginLvGT applies the GT predicate on the "stl_margin_lv" field.
func StlMarginLvGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvGTE applies the GTE predicate on the "stl_margin_lv" field.
func StlMarginLvGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvLT applies the LT predicate on the "stl_margin_lv" field.
func StlMarginLvLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvLTE applies the LTE predicate on the "stl_margin_lv" field.
func StlMarginLvLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvIsNil applies the IsNil predicate on the "stl_margin_lv" field.
func StlMarginLvIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlMarginLv)))
	})
}

// StlMarginLvNotNil applies the NotNil predicate on the "stl_margin_lv" field.
func StlMarginLvNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlMarginLv)))
	})
}

// IsSettlementEQ applies the EQ predicate on the "is_settlement" field.
func IsSettlementEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementNEQ applies the NEQ predicate on the "is_settlement" field.
func IsSettlementNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementIn applies the In predicate on the "is_settlement" field.
func IsSettlementIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsSettlement), v...))
	})
}

// IsSettlementNotIn applies the NotIn predicate on the "is_settlement" field.
func IsSettlementNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsSettlement), v...))
	})
}

// IsSettlementGT applies the GT predicate on the "is_settlement" field.
func IsSettlementGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementGTE applies the GTE predicate on the "is_settlement" field.
func IsSettlementGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementLT applies the LT predicate on the "is_settlement" field.
func IsSettlementLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementLTE applies the LTE predicate on the "is_settlement" field.
func IsSettlementLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementContains applies the Contains predicate on the "is_settlement" field.
func IsSettlementContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementHasPrefix applies the HasPrefix predicate on the "is_settlement" field.
func IsSettlementHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementHasSuffix applies the HasSuffix predicate on the "is_settlement" field.
func IsSettlementHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementIsNil applies the IsNil predicate on the "is_settlement" field.
func IsSettlementIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsSettlement)))
	})
}

// IsSettlementNotNil applies the NotNil predicate on the "is_settlement" field.
func IsSettlementNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsSettlement)))
	})
}

// IsSettlementEqualFold applies the EqualFold predicate on the "is_settlement" field.
func IsSettlementEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsSettlement), v))
	})
}

// IsSettlementContainsFold applies the ContainsFold predicate on the "is_settlement" field.
func IsSettlementContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsSettlement), v))
	})
}

// ActualStlTimeEQ applies the EQ predicate on the "actual_stl_time" field.
func ActualStlTimeEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeNEQ applies the NEQ predicate on the "actual_stl_time" field.
func ActualStlTimeNEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeIn applies the In predicate on the "actual_stl_time" field.
func ActualStlTimeIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActualStlTime), v...))
	})
}

// ActualStlTimeNotIn applies the NotIn predicate on the "actual_stl_time" field.
func ActualStlTimeNotIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActualStlTime), v...))
	})
}

// ActualStlTimeGT applies the GT predicate on the "actual_stl_time" field.
func ActualStlTimeGT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeGTE applies the GTE predicate on the "actual_stl_time" field.
func ActualStlTimeGTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeLT applies the LT predicate on the "actual_stl_time" field.
func ActualStlTimeLT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeLTE applies the LTE predicate on the "actual_stl_time" field.
func ActualStlTimeLTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActualStlTime), v))
	})
}

// ActualStlTimeIsNil applies the IsNil predicate on the "actual_stl_time" field.
func ActualStlTimeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActualStlTime)))
	})
}

// ActualStlTimeNotNil applies the NotNil predicate on the "actual_stl_time" field.
func ActualStlTimeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActualStlTime)))
	})
}

// TransNoEQ applies the EQ predicate on the "trans_no" field.
func TransNoEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransNo), v))
	})
}

// TransNoNEQ applies the NEQ predicate on the "trans_no" field.
func TransNoNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransNo), v))
	})
}

// TransNoIn applies the In predicate on the "trans_no" field.
func TransNoIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransNo), v...))
	})
}

// TransNoNotIn applies the NotIn predicate on the "trans_no" field.
func TransNoNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransNo), v...))
	})
}

// TransNoGT applies the GT predicate on the "trans_no" field.
func TransNoGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransNo), v))
	})
}

// TransNoGTE applies the GTE predicate on the "trans_no" field.
func TransNoGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransNo), v))
	})
}

// TransNoLT applies the LT predicate on the "trans_no" field.
func TransNoLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransNo), v))
	})
}

// TransNoLTE applies the LTE predicate on the "trans_no" field.
func TransNoLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransNo), v))
	})
}

// TransNoContains applies the Contains predicate on the "trans_no" field.
func TransNoContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransNo), v))
	})
}

// TransNoHasPrefix applies the HasPrefix predicate on the "trans_no" field.
func TransNoHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransNo), v))
	})
}

// TransNoHasSuffix applies the HasSuffix predicate on the "trans_no" field.
func TransNoHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransNo), v))
	})
}

// TransNoIsNil applies the IsNil predicate on the "trans_no" field.
func TransNoIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransNo)))
	})
}

// TransNoNotNil applies the NotNil predicate on the "trans_no" field.
func TransNoNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransNo)))
	})
}

// TransNoEqualFold applies the EqualFold predicate on the "trans_no" field.
func TransNoEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransNo), v))
	})
}

// TransNoContainsFold applies the ContainsFold predicate on the "trans_no" field.
func TransNoContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransNo), v))
	})
}

// TransTimeEQ applies the EQ predicate on the "trans_time" field.
func TransTimeEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransTime), v))
	})
}

// TransTimeNEQ applies the NEQ predicate on the "trans_time" field.
func TransTimeNEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransTime), v))
	})
}

// TransTimeIn applies the In predicate on the "trans_time" field.
func TransTimeIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransTime), v...))
	})
}

// TransTimeNotIn applies the NotIn predicate on the "trans_time" field.
func TransTimeNotIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransTime), v...))
	})
}

// TransTimeGT applies the GT predicate on the "trans_time" field.
func TransTimeGT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransTime), v))
	})
}

// TransTimeGTE applies the GTE predicate on the "trans_time" field.
func TransTimeGTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransTime), v))
	})
}

// TransTimeLT applies the LT predicate on the "trans_time" field.
func TransTimeLT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransTime), v))
	})
}

// TransTimeLTE applies the LTE predicate on the "trans_time" field.
func TransTimeLTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransTime), v))
	})
}

// TransTimeIsNil applies the IsNil predicate on the "trans_time" field.
func TransTimeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransTime)))
	})
}

// TransTimeNotNil applies the NotNil predicate on the "trans_time" field.
func TransTimeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransTime)))
	})
}

// AccountingNoEQ applies the EQ predicate on the "accounting_no" field.
func AccountingNoEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoNEQ applies the NEQ predicate on the "accounting_no" field.
func AccountingNoNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoIn applies the In predicate on the "accounting_no" field.
func AccountingNoIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountingNo), v...))
	})
}

// AccountingNoNotIn applies the NotIn predicate on the "accounting_no" field.
func AccountingNoNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountingNo), v...))
	})
}

// AccountingNoGT applies the GT predicate on the "accounting_no" field.
func AccountingNoGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoGTE applies the GTE predicate on the "accounting_no" field.
func AccountingNoGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoLT applies the LT predicate on the "accounting_no" field.
func AccountingNoLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoLTE applies the LTE predicate on the "accounting_no" field.
func AccountingNoLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoContains applies the Contains predicate on the "accounting_no" field.
func AccountingNoContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoHasPrefix applies the HasPrefix predicate on the "accounting_no" field.
func AccountingNoHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoHasSuffix applies the HasSuffix predicate on the "accounting_no" field.
func AccountingNoHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoIsNil applies the IsNil predicate on the "accounting_no" field.
func AccountingNoIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountingNo)))
	})
}

// AccountingNoNotNil applies the NotNil predicate on the "accounting_no" field.
func AccountingNoNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountingNo)))
	})
}

// AccountingNoEqualFold applies the EqualFold predicate on the "accounting_no" field.
func AccountingNoEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountingNo), v))
	})
}

// AccountingNoContainsFold applies the ContainsFold predicate on the "accounting_no" field.
func AccountingNoContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountingNo), v))
	})
}

// AccountingTimeEQ applies the EQ predicate on the "accounting_time" field.
func AccountingTimeEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeNEQ applies the NEQ predicate on the "accounting_time" field.
func AccountingTimeNEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeIn applies the In predicate on the "accounting_time" field.
func AccountingTimeIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountingTime), v...))
	})
}

// AccountingTimeNotIn applies the NotIn predicate on the "accounting_time" field.
func AccountingTimeNotIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountingTime), v...))
	})
}

// AccountingTimeGT applies the GT predicate on the "accounting_time" field.
func AccountingTimeGT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeGTE applies the GTE predicate on the "accounting_time" field.
func AccountingTimeGTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeLT applies the LT predicate on the "accounting_time" field.
func AccountingTimeLT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeLTE applies the LTE predicate on the "accounting_time" field.
func AccountingTimeLTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountingTime), v))
	})
}

// AccountingTimeIsNil applies the IsNil predicate on the "accounting_time" field.
func AccountingTimeIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountingTime)))
	})
}

// AccountingTimeNotNil applies the NotNil predicate on the "accounting_time" field.
func AccountingTimeNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountingTime)))
	})
}

// AccountedPositionQtyEQ applies the EQ predicate on the "accounted_position_qty" field.
func AccountedPositionQtyEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyNEQ applies the NEQ predicate on the "accounted_position_qty" field.
func AccountedPositionQtyNEQ(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyIn applies the In predicate on the "accounted_position_qty" field.
func AccountedPositionQtyIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountedPositionQty), v...))
	})
}

// AccountedPositionQtyNotIn applies the NotIn predicate on the "accounted_position_qty" field.
func AccountedPositionQtyNotIn(vs ...float64) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountedPositionQty), v...))
	})
}

// AccountedPositionQtyGT applies the GT predicate on the "accounted_position_qty" field.
func AccountedPositionQtyGT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyGTE applies the GTE predicate on the "accounted_position_qty" field.
func AccountedPositionQtyGTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyLT applies the LT predicate on the "accounted_position_qty" field.
func AccountedPositionQtyLT(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyLTE applies the LTE predicate on the "accounted_position_qty" field.
func AccountedPositionQtyLTE(v float64) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountedPositionQty), v))
	})
}

// AccountedPositionQtyIsNil applies the IsNil predicate on the "accounted_position_qty" field.
func AccountedPositionQtyIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountedPositionQty)))
	})
}

// AccountedPositionQtyNotNil applies the NotNil predicate on the "accounted_position_qty" field.
func AccountedPositionQtyNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountedPositionQty)))
	})
}

// CdDirectionEQ applies the EQ predicate on the "cd_direction" field.
func CdDirectionEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdDirection), v))
	})
}

// CdDirectionNEQ applies the NEQ predicate on the "cd_direction" field.
func CdDirectionNEQ(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCdDirection), v))
	})
}

// CdDirectionIn applies the In predicate on the "cd_direction" field.
func CdDirectionIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCdDirection), v...))
	})
}

// CdDirectionNotIn applies the NotIn predicate on the "cd_direction" field.
func CdDirectionNotIn(vs ...int) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCdDirection), v...))
	})
}

// CdDirectionGT applies the GT predicate on the "cd_direction" field.
func CdDirectionGT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCdDirection), v))
	})
}

// CdDirectionGTE applies the GTE predicate on the "cd_direction" field.
func CdDirectionGTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCdDirection), v))
	})
}

// CdDirectionLT applies the LT predicate on the "cd_direction" field.
func CdDirectionLT(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCdDirection), v))
	})
}

// CdDirectionLTE applies the LTE predicate on the "cd_direction" field.
func CdDirectionLTE(v int) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCdDirection), v))
	})
}

// CdDirectionIsNil applies the IsNil predicate on the "cd_direction" field.
func CdDirectionIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCdDirection)))
	})
}

// CdDirectionNotNil applies the NotNil predicate on the "cd_direction" field.
func CdDirectionNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCdDirection)))
	})
}

// ApplyFieldsEQ applies the EQ predicate on the "apply_fields" field.
func ApplyFieldsEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsNEQ applies the NEQ predicate on the "apply_fields" field.
func ApplyFieldsNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsIn applies the In predicate on the "apply_fields" field.
func ApplyFieldsIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplyFields), v...))
	})
}

// ApplyFieldsNotIn applies the NotIn predicate on the "apply_fields" field.
func ApplyFieldsNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplyFields), v...))
	})
}

// ApplyFieldsGT applies the GT predicate on the "apply_fields" field.
func ApplyFieldsGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsGTE applies the GTE predicate on the "apply_fields" field.
func ApplyFieldsGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsLT applies the LT predicate on the "apply_fields" field.
func ApplyFieldsLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsLTE applies the LTE predicate on the "apply_fields" field.
func ApplyFieldsLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsContains applies the Contains predicate on the "apply_fields" field.
func ApplyFieldsContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsHasPrefix applies the HasPrefix predicate on the "apply_fields" field.
func ApplyFieldsHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsHasSuffix applies the HasSuffix predicate on the "apply_fields" field.
func ApplyFieldsHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsIsNil applies the IsNil predicate on the "apply_fields" field.
func ApplyFieldsIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApplyFields)))
	})
}

// ApplyFieldsNotNil applies the NotNil predicate on the "apply_fields" field.
func ApplyFieldsNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApplyFields)))
	})
}

// ApplyFieldsEqualFold applies the EqualFold predicate on the "apply_fields" field.
func ApplyFieldsEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldApplyFields), v))
	})
}

// ApplyFieldsContainsFold applies the ContainsFold predicate on the "apply_fields" field.
func ApplyFieldsContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldApplyFields), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// RefTransNoEQ applies the EQ predicate on the "ref_trans_no" field.
func RefTransNoEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoNEQ applies the NEQ predicate on the "ref_trans_no" field.
func RefTransNoNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoIn applies the In predicate on the "ref_trans_no" field.
func RefTransNoIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefTransNo), v...))
	})
}

// RefTransNoNotIn applies the NotIn predicate on the "ref_trans_no" field.
func RefTransNoNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefTransNo), v...))
	})
}

// RefTransNoGT applies the GT predicate on the "ref_trans_no" field.
func RefTransNoGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoGTE applies the GTE predicate on the "ref_trans_no" field.
func RefTransNoGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoLT applies the LT predicate on the "ref_trans_no" field.
func RefTransNoLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoLTE applies the LTE predicate on the "ref_trans_no" field.
func RefTransNoLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoContains applies the Contains predicate on the "ref_trans_no" field.
func RefTransNoContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoHasPrefix applies the HasPrefix predicate on the "ref_trans_no" field.
func RefTransNoHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoHasSuffix applies the HasSuffix predicate on the "ref_trans_no" field.
func RefTransNoHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoIsNil applies the IsNil predicate on the "ref_trans_no" field.
func RefTransNoIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefTransNo)))
	})
}

// RefTransNoNotNil applies the NotNil predicate on the "ref_trans_no" field.
func RefTransNoNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefTransNo)))
	})
}

// RefTransNoEqualFold applies the EqualFold predicate on the "ref_trans_no" field.
func RefTransNoEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefTransNo), v))
	})
}

// RefTransNoContainsFold applies the ContainsFold predicate on the "ref_trans_no" field.
func RefTransNoContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefTransNo), v))
	})
}

// IsDayBookingEQ applies the EQ predicate on the "is_day_booking" field.
func IsDayBookingEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingNEQ applies the NEQ predicate on the "is_day_booking" field.
func IsDayBookingNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingIn applies the In predicate on the "is_day_booking" field.
func IsDayBookingIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDayBooking), v...))
	})
}

// IsDayBookingNotIn applies the NotIn predicate on the "is_day_booking" field.
func IsDayBookingNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDayBooking), v...))
	})
}

// IsDayBookingGT applies the GT predicate on the "is_day_booking" field.
func IsDayBookingGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingGTE applies the GTE predicate on the "is_day_booking" field.
func IsDayBookingGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingLT applies the LT predicate on the "is_day_booking" field.
func IsDayBookingLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingLTE applies the LTE predicate on the "is_day_booking" field.
func IsDayBookingLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingContains applies the Contains predicate on the "is_day_booking" field.
func IsDayBookingContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingHasPrefix applies the HasPrefix predicate on the "is_day_booking" field.
func IsDayBookingHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingHasSuffix applies the HasSuffix predicate on the "is_day_booking" field.
func IsDayBookingHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingIsNil applies the IsNil predicate on the "is_day_booking" field.
func IsDayBookingIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDayBooking)))
	})
}

// IsDayBookingNotNil applies the NotNil predicate on the "is_day_booking" field.
func IsDayBookingNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDayBooking)))
	})
}

// IsDayBookingEqualFold applies the EqualFold predicate on the "is_day_booking" field.
func IsDayBookingEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsDayBooking), v))
	})
}

// IsDayBookingContainsFold applies the ContainsFold predicate on the "is_day_booking" field.
func IsDayBookingContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsDayBooking), v))
	})
}

// IsEffectFundEQ applies the EQ predicate on the "is_effect_fund" field.
func IsEffectFundEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundNEQ applies the NEQ predicate on the "is_effect_fund" field.
func IsEffectFundNEQ(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundIn applies the In predicate on the "is_effect_fund" field.
func IsEffectFundIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsEffectFund), v...))
	})
}

// IsEffectFundNotIn applies the NotIn predicate on the "is_effect_fund" field.
func IsEffectFundNotIn(vs ...string) predicate.SecurityJournal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityJournal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsEffectFund), v...))
	})
}

// IsEffectFundGT applies the GT predicate on the "is_effect_fund" field.
func IsEffectFundGT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundGTE applies the GTE predicate on the "is_effect_fund" field.
func IsEffectFundGTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundLT applies the LT predicate on the "is_effect_fund" field.
func IsEffectFundLT(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundLTE applies the LTE predicate on the "is_effect_fund" field.
func IsEffectFundLTE(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundContains applies the Contains predicate on the "is_effect_fund" field.
func IsEffectFundContains(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundHasPrefix applies the HasPrefix predicate on the "is_effect_fund" field.
func IsEffectFundHasPrefix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundHasSuffix applies the HasSuffix predicate on the "is_effect_fund" field.
func IsEffectFundHasSuffix(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundIsNil applies the IsNil predicate on the "is_effect_fund" field.
func IsEffectFundIsNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsEffectFund)))
	})
}

// IsEffectFundNotNil applies the NotNil predicate on the "is_effect_fund" field.
func IsEffectFundNotNil() predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsEffectFund)))
	})
}

// IsEffectFundEqualFold applies the EqualFold predicate on the "is_effect_fund" field.
func IsEffectFundEqualFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsEffectFund), v))
	})
}

// IsEffectFundContainsFold applies the ContainsFold predicate on the "is_effect_fund" field.
func IsEffectFundContainsFold(v string) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsEffectFund), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SecurityJournal) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SecurityJournal) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SecurityJournal) predicate.SecurityJournal {
	return predicate.SecurityJournal(func(s *sql.Selector) {
		p(s.Not())
	})
}
