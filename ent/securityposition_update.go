// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/securityposition"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SecurityPositionUpdate is the builder for updating SecurityPosition entities.
type SecurityPositionUpdate struct {
	config
	hooks    []Hook
	mutation *SecurityPositionMutation
}

// Where appends a list predicates to the SecurityPositionUpdate builder.
func (spu *SecurityPositionUpdate) Where(ps ...predicate.SecurityPosition) *SecurityPositionUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetParentID sets the "parent_id" field.
func (spu *SecurityPositionUpdate) SetParentID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetParentID()
	spu.mutation.SetParentID(i)
	return spu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableParentID(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetParentID(*i)
	}
	return spu
}

// AddParentID adds i to the "parent_id" field.
func (spu *SecurityPositionUpdate) AddParentID(i int) *SecurityPositionUpdate {
	spu.mutation.AddParentID(i)
	return spu
}

// SetAccountID sets the "account_id" field.
func (spu *SecurityPositionUpdate) SetAccountID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetAccountID()
	spu.mutation.SetAccountID(i)
	return spu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableAccountID(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetAccountID(*i)
	}
	return spu
}

// AddAccountID adds i to the "account_id" field.
func (spu *SecurityPositionUpdate) AddAccountID(i int) *SecurityPositionUpdate {
	spu.mutation.AddAccountID(i)
	return spu
}

// ClearAccountID clears the value of the "account_id" field.
func (spu *SecurityPositionUpdate) ClearAccountID() *SecurityPositionUpdate {
	spu.mutation.ClearAccountID()
	return spu
}

// SetSecurityAccountID sets the "security_account_id" field.
func (spu *SecurityPositionUpdate) SetSecurityAccountID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetSecurityAccountID()
	spu.mutation.SetSecurityAccountID(i)
	return spu
}

// AddSecurityAccountID adds i to the "security_account_id" field.
func (spu *SecurityPositionUpdate) AddSecurityAccountID(i int) *SecurityPositionUpdate {
	spu.mutation.AddSecurityAccountID(i)
	return spu
}

// SetPositionType sets the "position_type" field.
func (spu *SecurityPositionUpdate) SetPositionType(i int) *SecurityPositionUpdate {
	spu.mutation.ResetPositionType()
	spu.mutation.SetPositionType(i)
	return spu
}

// SetNillablePositionType sets the "position_type" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillablePositionType(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetPositionType(*i)
	}
	return spu
}

// AddPositionType adds i to the "position_type" field.
func (spu *SecurityPositionUpdate) AddPositionType(i int) *SecurityPositionUpdate {
	spu.mutation.AddPositionType(i)
	return spu
}

// ClearPositionType clears the value of the "position_type" field.
func (spu *SecurityPositionUpdate) ClearPositionType() *SecurityPositionUpdate {
	spu.mutation.ClearPositionType()
	return spu
}

// SetCdDirection sets the "cd_direction" field.
func (spu *SecurityPositionUpdate) SetCdDirection(i int) *SecurityPositionUpdate {
	spu.mutation.ResetCdDirection()
	spu.mutation.SetCdDirection(i)
	return spu
}

// SetNillableCdDirection sets the "cd_direction" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableCdDirection(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetCdDirection(*i)
	}
	return spu
}

// AddCdDirection adds i to the "cd_direction" field.
func (spu *SecurityPositionUpdate) AddCdDirection(i int) *SecurityPositionUpdate {
	spu.mutation.AddCdDirection(i)
	return spu
}

// ClearCdDirection clears the value of the "cd_direction" field.
func (spu *SecurityPositionUpdate) ClearCdDirection() *SecurityPositionUpdate {
	spu.mutation.ClearCdDirection()
	return spu
}

// SetProjectID sets the "project_id" field.
func (spu *SecurityPositionUpdate) SetProjectID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetProjectID()
	spu.mutation.SetProjectID(i)
	return spu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableProjectID(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetProjectID(*i)
	}
	return spu
}

// AddProjectID adds i to the "project_id" field.
func (spu *SecurityPositionUpdate) AddProjectID(i int) *SecurityPositionUpdate {
	spu.mutation.AddProjectID(i)
	return spu
}

// ClearProjectID clears the value of the "project_id" field.
func (spu *SecurityPositionUpdate) ClearProjectID() *SecurityPositionUpdate {
	spu.mutation.ClearProjectID()
	return spu
}

// SetProductID sets the "product_id" field.
func (spu *SecurityPositionUpdate) SetProductID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetProductID()
	spu.mutation.SetProductID(i)
	return spu
}

// AddProductID adds i to the "product_id" field.
func (spu *SecurityPositionUpdate) AddProductID(i int) *SecurityPositionUpdate {
	spu.mutation.AddProductID(i)
	return spu
}

// SetMaterialID sets the "material_id" field.
func (spu *SecurityPositionUpdate) SetMaterialID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetMaterialID()
	spu.mutation.SetMaterialID(i)
	return spu
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableMaterialID(i *int) *SecurityPositionUpdate {
	if i != nil {
		spu.SetMaterialID(*i)
	}
	return spu
}

// AddMaterialID adds i to the "material_id" field.
func (spu *SecurityPositionUpdate) AddMaterialID(i int) *SecurityPositionUpdate {
	spu.mutation.AddMaterialID(i)
	return spu
}

// ClearMaterialID clears the value of the "material_id" field.
func (spu *SecurityPositionUpdate) ClearMaterialID() *SecurityPositionUpdate {
	spu.mutation.ClearMaterialID()
	return spu
}

// SetMaterialNo sets the "material_no" field.
func (spu *SecurityPositionUpdate) SetMaterialNo(s string) *SecurityPositionUpdate {
	spu.mutation.SetMaterialNo(s)
	return spu
}

// SetNillableMaterialNo sets the "material_no" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableMaterialNo(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetMaterialNo(*s)
	}
	return spu
}

// ClearMaterialNo clears the value of the "material_no" field.
func (spu *SecurityPositionUpdate) ClearMaterialNo() *SecurityPositionUpdate {
	spu.mutation.ClearMaterialNo()
	return spu
}

// SetMultiplier sets the "multiplier" field.
func (spu *SecurityPositionUpdate) SetMultiplier(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetMultiplier()
	spu.mutation.SetMultiplier(f)
	return spu
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableMultiplier(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetMultiplier(*f)
	}
	return spu
}

// AddMultiplier adds f to the "multiplier" field.
func (spu *SecurityPositionUpdate) AddMultiplier(f float64) *SecurityPositionUpdate {
	spu.mutation.AddMultiplier(f)
	return spu
}

// ClearMultiplier clears the value of the "multiplier" field.
func (spu *SecurityPositionUpdate) ClearMultiplier() *SecurityPositionUpdate {
	spu.mutation.ClearMultiplier()
	return spu
}

// SetBalance sets the "balance" field.
func (spu *SecurityPositionUpdate) SetBalance(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetBalance()
	spu.mutation.SetBalance(f)
	return spu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableBalance(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetBalance(*f)
	}
	return spu
}

// AddBalance adds f to the "balance" field.
func (spu *SecurityPositionUpdate) AddBalance(f float64) *SecurityPositionUpdate {
	spu.mutation.AddBalance(f)
	return spu
}

// ClearBalance clears the value of the "balance" field.
func (spu *SecurityPositionUpdate) ClearBalance() *SecurityPositionUpdate {
	spu.mutation.ClearBalance()
	return spu
}

// SetAvailable sets the "available" field.
func (spu *SecurityPositionUpdate) SetAvailable(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetAvailable()
	spu.mutation.SetAvailable(f)
	return spu
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableAvailable(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetAvailable(*f)
	}
	return spu
}

// AddAvailable adds f to the "available" field.
func (spu *SecurityPositionUpdate) AddAvailable(f float64) *SecurityPositionUpdate {
	spu.mutation.AddAvailable(f)
	return spu
}

// ClearAvailable clears the value of the "available" field.
func (spu *SecurityPositionUpdate) ClearAvailable() *SecurityPositionUpdate {
	spu.mutation.ClearAvailable()
	return spu
}

// SetFreeze sets the "freeze" field.
func (spu *SecurityPositionUpdate) SetFreeze(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetFreeze()
	spu.mutation.SetFreeze(f)
	return spu
}

// SetNillableFreeze sets the "freeze" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableFreeze(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetFreeze(*f)
	}
	return spu
}

// AddFreeze adds f to the "freeze" field.
func (spu *SecurityPositionUpdate) AddFreeze(f float64) *SecurityPositionUpdate {
	spu.mutation.AddFreeze(f)
	return spu
}

// ClearFreeze clears the value of the "freeze" field.
func (spu *SecurityPositionUpdate) ClearFreeze() *SecurityPositionUpdate {
	spu.mutation.ClearFreeze()
	return spu
}

// SetAfloat sets the "afloat" field.
func (spu *SecurityPositionUpdate) SetAfloat(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetAfloat()
	spu.mutation.SetAfloat(f)
	return spu
}

// SetNillableAfloat sets the "afloat" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableAfloat(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetAfloat(*f)
	}
	return spu
}

// AddAfloat adds f to the "afloat" field.
func (spu *SecurityPositionUpdate) AddAfloat(f float64) *SecurityPositionUpdate {
	spu.mutation.AddAfloat(f)
	return spu
}

// ClearAfloat clears the value of the "afloat" field.
func (spu *SecurityPositionUpdate) ClearAfloat() *SecurityPositionUpdate {
	spu.mutation.ClearAfloat()
	return spu
}

// SetUnit sets the "unit" field.
func (spu *SecurityPositionUpdate) SetUnit(s string) *SecurityPositionUpdate {
	spu.mutation.SetUnit(s)
	return spu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableUnit(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetUnit(*s)
	}
	return spu
}

// ClearUnit clears the value of the "unit" field.
func (spu *SecurityPositionUpdate) ClearUnit() *SecurityPositionUpdate {
	spu.mutation.ClearUnit()
	return spu
}

// SetSpec sets the "spec" field.
func (spu *SecurityPositionUpdate) SetSpec(s string) *SecurityPositionUpdate {
	spu.mutation.SetSpec(s)
	return spu
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableSpec(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetSpec(*s)
	}
	return spu
}

// ClearSpec clears the value of the "spec" field.
func (spu *SecurityPositionUpdate) ClearSpec() *SecurityPositionUpdate {
	spu.mutation.ClearSpec()
	return spu
}

// SetCurrency sets the "currency" field.
func (spu *SecurityPositionUpdate) SetCurrency(s string) *SecurityPositionUpdate {
	spu.mutation.SetCurrency(s)
	return spu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableCurrency(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetCurrency(*s)
	}
	return spu
}

// ClearCurrency clears the value of the "currency" field.
func (spu *SecurityPositionUpdate) ClearCurrency() *SecurityPositionUpdate {
	spu.mutation.ClearCurrency()
	return spu
}

// SetPrice sets the "price" field.
func (spu *SecurityPositionUpdate) SetPrice(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetPrice()
	spu.mutation.SetPrice(f)
	return spu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillablePrice(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetPrice(*f)
	}
	return spu
}

// AddPrice adds f to the "price" field.
func (spu *SecurityPositionUpdate) AddPrice(f float64) *SecurityPositionUpdate {
	spu.mutation.AddPrice(f)
	return spu
}

// ClearPrice clears the value of the "price" field.
func (spu *SecurityPositionUpdate) ClearPrice() *SecurityPositionUpdate {
	spu.mutation.ClearPrice()
	return spu
}

// SetAmount sets the "amount" field.
func (spu *SecurityPositionUpdate) SetAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetAmount()
	spu.mutation.SetAmount(f)
	return spu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableAmount(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetAmount(*f)
	}
	return spu
}

// AddAmount adds f to the "amount" field.
func (spu *SecurityPositionUpdate) AddAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.AddAmount(f)
	return spu
}

// ClearAmount clears the value of the "amount" field.
func (spu *SecurityPositionUpdate) ClearAmount() *SecurityPositionUpdate {
	spu.mutation.ClearAmount()
	return spu
}

// SetCostAmount sets the "cost_amount" field.
func (spu *SecurityPositionUpdate) SetCostAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetCostAmount()
	spu.mutation.SetCostAmount(f)
	return spu
}

// SetNillableCostAmount sets the "cost_amount" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableCostAmount(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetCostAmount(*f)
	}
	return spu
}

// AddCostAmount adds f to the "cost_amount" field.
func (spu *SecurityPositionUpdate) AddCostAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.AddCostAmount(f)
	return spu
}

// ClearCostAmount clears the value of the "cost_amount" field.
func (spu *SecurityPositionUpdate) ClearCostAmount() *SecurityPositionUpdate {
	spu.mutation.ClearCostAmount()
	return spu
}

// SetCost sets the "cost" field.
func (spu *SecurityPositionUpdate) SetCost(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetCost()
	spu.mutation.SetCost(f)
	return spu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableCost(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetCost(*f)
	}
	return spu
}

// AddCost adds f to the "cost" field.
func (spu *SecurityPositionUpdate) AddCost(f float64) *SecurityPositionUpdate {
	spu.mutation.AddCost(f)
	return spu
}

// ClearCost clears the value of the "cost" field.
func (spu *SecurityPositionUpdate) ClearCost() *SecurityPositionUpdate {
	spu.mutation.ClearCost()
	return spu
}

// SetFxRate sets the "fx_rate" field.
func (spu *SecurityPositionUpdate) SetFxRate(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetFxRate()
	spu.mutation.SetFxRate(f)
	return spu
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableFxRate(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetFxRate(*f)
	}
	return spu
}

// AddFxRate adds f to the "fx_rate" field.
func (spu *SecurityPositionUpdate) AddFxRate(f float64) *SecurityPositionUpdate {
	spu.mutation.AddFxRate(f)
	return spu
}

// ClearFxRate clears the value of the "fx_rate" field.
func (spu *SecurityPositionUpdate) ClearFxRate() *SecurityPositionUpdate {
	spu.mutation.ClearFxRate()
	return spu
}

// SetStlCurrency sets the "stl_currency" field.
func (spu *SecurityPositionUpdate) SetStlCurrency(s string) *SecurityPositionUpdate {
	spu.mutation.SetStlCurrency(s)
	return spu
}

// SetNillableStlCurrency sets the "stl_currency" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlCurrency(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetStlCurrency(*s)
	}
	return spu
}

// ClearStlCurrency clears the value of the "stl_currency" field.
func (spu *SecurityPositionUpdate) ClearStlCurrency() *SecurityPositionUpdate {
	spu.mutation.ClearStlCurrency()
	return spu
}

// SetStlAmount sets the "stl_amount" field.
func (spu *SecurityPositionUpdate) SetStlAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlAmount()
	spu.mutation.SetStlAmount(f)
	return spu
}

// SetNillableStlAmount sets the "stl_amount" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlAmount(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlAmount(*f)
	}
	return spu
}

// AddStlAmount adds f to the "stl_amount" field.
func (spu *SecurityPositionUpdate) AddStlAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlAmount(f)
	return spu
}

// ClearStlAmount clears the value of the "stl_amount" field.
func (spu *SecurityPositionUpdate) ClearStlAmount() *SecurityPositionUpdate {
	spu.mutation.ClearStlAmount()
	return spu
}

// SetStlCost sets the "stl_cost" field.
func (spu *SecurityPositionUpdate) SetStlCost(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlCost()
	spu.mutation.SetStlCost(f)
	return spu
}

// SetNillableStlCost sets the "stl_cost" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlCost(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlCost(*f)
	}
	return spu
}

// AddStlCost adds f to the "stl_cost" field.
func (spu *SecurityPositionUpdate) AddStlCost(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlCost(f)
	return spu
}

// ClearStlCost clears the value of the "stl_cost" field.
func (spu *SecurityPositionUpdate) ClearStlCost() *SecurityPositionUpdate {
	spu.mutation.ClearStlCost()
	return spu
}

// SetStlMargin sets the "stl_margin" field.
func (spu *SecurityPositionUpdate) SetStlMargin(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlMargin()
	spu.mutation.SetStlMargin(f)
	return spu
}

// SetNillableStlMargin sets the "stl_margin" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlMargin(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlMargin(*f)
	}
	return spu
}

// AddStlMargin adds f to the "stl_margin" field.
func (spu *SecurityPositionUpdate) AddStlMargin(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlMargin(f)
	return spu
}

// ClearStlMargin clears the value of the "stl_margin" field.
func (spu *SecurityPositionUpdate) ClearStlMargin() *SecurityPositionUpdate {
	spu.mutation.ClearStlMargin()
	return spu
}

// SetStlCostAmount sets the "stl_cost_amount" field.
func (spu *SecurityPositionUpdate) SetStlCostAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlCostAmount()
	spu.mutation.SetStlCostAmount(f)
	return spu
}

// SetNillableStlCostAmount sets the "stl_cost_amount" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlCostAmount(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlCostAmount(*f)
	}
	return spu
}

// AddStlCostAmount adds f to the "stl_cost_amount" field.
func (spu *SecurityPositionUpdate) AddStlCostAmount(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlCostAmount(f)
	return spu
}

// ClearStlCostAmount clears the value of the "stl_cost_amount" field.
func (spu *SecurityPositionUpdate) ClearStlCostAmount() *SecurityPositionUpdate {
	spu.mutation.ClearStlCostAmount()
	return spu
}

// SetStlMarginLv sets the "stl_margin_lv" field.
func (spu *SecurityPositionUpdate) SetStlMarginLv(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlMarginLv()
	spu.mutation.SetStlMarginLv(f)
	return spu
}

// SetNillableStlMarginLv sets the "stl_margin_lv" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlMarginLv(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlMarginLv(*f)
	}
	return spu
}

// AddStlMarginLv adds f to the "stl_margin_lv" field.
func (spu *SecurityPositionUpdate) AddStlMarginLv(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlMarginLv(f)
	return spu
}

// ClearStlMarginLv clears the value of the "stl_margin_lv" field.
func (spu *SecurityPositionUpdate) ClearStlMarginLv() *SecurityPositionUpdate {
	spu.mutation.ClearStlMarginLv()
	return spu
}

// SetStlValPrice sets the "stl_val_price" field.
func (spu *SecurityPositionUpdate) SetStlValPrice(f float64) *SecurityPositionUpdate {
	spu.mutation.ResetStlValPrice()
	spu.mutation.SetStlValPrice(f)
	return spu
}

// SetNillableStlValPrice sets the "stl_val_price" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableStlValPrice(f *float64) *SecurityPositionUpdate {
	if f != nil {
		spu.SetStlValPrice(*f)
	}
	return spu
}

// AddStlValPrice adds f to the "stl_val_price" field.
func (spu *SecurityPositionUpdate) AddStlValPrice(f float64) *SecurityPositionUpdate {
	spu.mutation.AddStlValPrice(f)
	return spu
}

// ClearStlValPrice clears the value of the "stl_val_price" field.
func (spu *SecurityPositionUpdate) ClearStlValPrice() *SecurityPositionUpdate {
	spu.mutation.ClearStlValPrice()
	return spu
}

// SetInvalidAt sets the "invalid_at" field.
func (spu *SecurityPositionUpdate) SetInvalidAt(t time.Time) *SecurityPositionUpdate {
	spu.mutation.SetInvalidAt(t)
	return spu
}

// SetNillableInvalidAt sets the "invalid_at" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableInvalidAt(t *time.Time) *SecurityPositionUpdate {
	if t != nil {
		spu.SetInvalidAt(*t)
	}
	return spu
}

// ClearInvalidAt clears the value of the "invalid_at" field.
func (spu *SecurityPositionUpdate) ClearInvalidAt() *SecurityPositionUpdate {
	spu.mutation.ClearInvalidAt()
	return spu
}

// SetCreatedAt sets the "created_at" field.
func (spu *SecurityPositionUpdate) SetCreatedAt(t time.Time) *SecurityPositionUpdate {
	spu.mutation.SetCreatedAt(t)
	return spu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableCreatedAt(t *time.Time) *SecurityPositionUpdate {
	if t != nil {
		spu.SetCreatedAt(*t)
	}
	return spu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (spu *SecurityPositionUpdate) ClearCreatedAt() *SecurityPositionUpdate {
	spu.mutation.ClearCreatedAt()
	return spu
}

// SetUniqueTag sets the "unique_tag" field.
func (spu *SecurityPositionUpdate) SetUniqueTag(s string) *SecurityPositionUpdate {
	spu.mutation.SetUniqueTag(s)
	return spu
}

// SetNillableUniqueTag sets the "unique_tag" field if the given value is not nil.
func (spu *SecurityPositionUpdate) SetNillableUniqueTag(s *string) *SecurityPositionUpdate {
	if s != nil {
		spu.SetUniqueTag(*s)
	}
	return spu
}

// ClearUniqueTag clears the value of the "unique_tag" field.
func (spu *SecurityPositionUpdate) ClearUniqueTag() *SecurityPositionUpdate {
	spu.mutation.ClearUniqueTag()
	return spu
}

// SetOrgID sets the "org_id" field.
func (spu *SecurityPositionUpdate) SetOrgID(i int) *SecurityPositionUpdate {
	spu.mutation.ResetOrgID()
	spu.mutation.SetOrgID(i)
	return spu
}

// AddOrgID adds i to the "org_id" field.
func (spu *SecurityPositionUpdate) AddOrgID(i int) *SecurityPositionUpdate {
	spu.mutation.AddOrgID(i)
	return spu
}

// Mutation returns the SecurityPositionMutation object of the builder.
func (spu *SecurityPositionUpdate) Mutation() *SecurityPositionMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SecurityPositionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(spu.hooks) == 0 {
		if err = spu.check(); err != nil {
			return 0, err
		}
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spu.check(); err != nil {
				return 0, err
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SecurityPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SecurityPositionUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SecurityPositionUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SecurityPositionUpdate) check() error {
	if v, ok := spu.mutation.MaterialNo(); ok {
		if err := securityposition.MaterialNoValidator(v); err != nil {
			return &ValidationError{Name: "material_no", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.material_no": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Unit(); ok {
		if err := securityposition.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.unit": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Spec(); ok {
		if err := securityposition.SpecValidator(v); err != nil {
			return &ValidationError{Name: "spec", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.spec": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Currency(); ok {
		if err := securityposition.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.currency": %w`, err)}
		}
	}
	if v, ok := spu.mutation.StlCurrency(); ok {
		if err := securityposition.StlCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "stl_currency", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.stl_currency": %w`, err)}
		}
	}
	if v, ok := spu.mutation.UniqueTag(); ok {
		if err := securityposition.UniqueTagValidator(v); err != nil {
			return &ValidationError{Name: "unique_tag", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.unique_tag": %w`, err)}
		}
	}
	return nil
}

func (spu *SecurityPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securityposition.Table,
			Columns: securityposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securityposition.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.ParentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldParentID,
		})
	}
	if value, ok := spu.mutation.AddedParentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldParentID,
		})
	}
	if value, ok := spu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldAccountID,
		})
	}
	if value, ok := spu.mutation.AddedAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldAccountID,
		})
	}
	if spu.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldAccountID,
		})
	}
	if value, ok := spu.mutation.SecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldSecurityAccountID,
		})
	}
	if value, ok := spu.mutation.AddedSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldSecurityAccountID,
		})
	}
	if value, ok := spu.mutation.PositionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldPositionType,
		})
	}
	if value, ok := spu.mutation.AddedPositionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldPositionType,
		})
	}
	if spu.mutation.PositionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldPositionType,
		})
	}
	if value, ok := spu.mutation.CdDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldCdDirection,
		})
	}
	if value, ok := spu.mutation.AddedCdDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldCdDirection,
		})
	}
	if spu.mutation.CdDirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldCdDirection,
		})
	}
	if value, ok := spu.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProjectID,
		})
	}
	if value, ok := spu.mutation.AddedProjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProjectID,
		})
	}
	if spu.mutation.ProjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldProjectID,
		})
	}
	if value, ok := spu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProductID,
		})
	}
	if value, ok := spu.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProductID,
		})
	}
	if value, ok := spu.mutation.MaterialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldMaterialID,
		})
	}
	if value, ok := spu.mutation.AddedMaterialID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldMaterialID,
		})
	}
	if spu.mutation.MaterialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldMaterialID,
		})
	}
	if value, ok := spu.mutation.MaterialNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldMaterialNo,
		})
	}
	if spu.mutation.MaterialNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldMaterialNo,
		})
	}
	if value, ok := spu.mutation.Multiplier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldMultiplier,
		})
	}
	if value, ok := spu.mutation.AddedMultiplier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldMultiplier,
		})
	}
	if spu.mutation.MultiplierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldMultiplier,
		})
	}
	if value, ok := spu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldBalance,
		})
	}
	if value, ok := spu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldBalance,
		})
	}
	if spu.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldBalance,
		})
	}
	if value, ok := spu.mutation.Available(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAvailable,
		})
	}
	if value, ok := spu.mutation.AddedAvailable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAvailable,
		})
	}
	if spu.mutation.AvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAvailable,
		})
	}
	if value, ok := spu.mutation.Freeze(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFreeze,
		})
	}
	if value, ok := spu.mutation.AddedFreeze(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFreeze,
		})
	}
	if spu.mutation.FreezeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldFreeze,
		})
	}
	if value, ok := spu.mutation.Afloat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAfloat,
		})
	}
	if value, ok := spu.mutation.AddedAfloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAfloat,
		})
	}
	if spu.mutation.AfloatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAfloat,
		})
	}
	if value, ok := spu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldUnit,
		})
	}
	if spu.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldUnit,
		})
	}
	if value, ok := spu.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldSpec,
		})
	}
	if spu.mutation.SpecCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldSpec,
		})
	}
	if value, ok := spu.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldCurrency,
		})
	}
	if spu.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldCurrency,
		})
	}
	if value, ok := spu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldPrice,
		})
	}
	if value, ok := spu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldPrice,
		})
	}
	if spu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldPrice,
		})
	}
	if value, ok := spu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAmount,
		})
	}
	if value, ok := spu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAmount,
		})
	}
	if spu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAmount,
		})
	}
	if value, ok := spu.mutation.CostAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCostAmount,
		})
	}
	if value, ok := spu.mutation.AddedCostAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCostAmount,
		})
	}
	if spu.mutation.CostAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldCostAmount,
		})
	}
	if value, ok := spu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCost,
		})
	}
	if value, ok := spu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCost,
		})
	}
	if spu.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldCost,
		})
	}
	if value, ok := spu.mutation.FxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFxRate,
		})
	}
	if value, ok := spu.mutation.AddedFxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFxRate,
		})
	}
	if spu.mutation.FxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldFxRate,
		})
	}
	if value, ok := spu.mutation.StlCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldStlCurrency,
		})
	}
	if spu.mutation.StlCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldStlCurrency,
		})
	}
	if value, ok := spu.mutation.StlAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlAmount,
		})
	}
	if value, ok := spu.mutation.AddedStlAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlAmount,
		})
	}
	if spu.mutation.StlAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlAmount,
		})
	}
	if value, ok := spu.mutation.StlCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCost,
		})
	}
	if value, ok := spu.mutation.AddedStlCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCost,
		})
	}
	if spu.mutation.StlCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlCost,
		})
	}
	if value, ok := spu.mutation.StlMargin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMargin,
		})
	}
	if value, ok := spu.mutation.AddedStlMargin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMargin,
		})
	}
	if spu.mutation.StlMarginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlMargin,
		})
	}
	if value, ok := spu.mutation.StlCostAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if value, ok := spu.mutation.AddedStlCostAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if spu.mutation.StlCostAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if value, ok := spu.mutation.StlMarginLv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if value, ok := spu.mutation.AddedStlMarginLv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if spu.mutation.StlMarginLvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if value, ok := spu.mutation.StlValPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if value, ok := spu.mutation.AddedStlValPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if spu.mutation.StlValPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if value, ok := spu.mutation.InvalidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityposition.FieldInvalidAt,
		})
	}
	if spu.mutation.InvalidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityposition.FieldInvalidAt,
		})
	}
	if value, ok := spu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityposition.FieldCreatedAt,
		})
	}
	if spu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityposition.FieldCreatedAt,
		})
	}
	if value, ok := spu.mutation.UniqueTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldUniqueTag,
		})
	}
	if spu.mutation.UniqueTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldUniqueTag,
		})
	}
	if value, ok := spu.mutation.OrgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldOrgID,
		})
	}
	if value, ok := spu.mutation.AddedOrgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldOrgID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SecurityPositionUpdateOne is the builder for updating a single SecurityPosition entity.
type SecurityPositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecurityPositionMutation
}

// SetParentID sets the "parent_id" field.
func (spuo *SecurityPositionUpdateOne) SetParentID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetParentID()
	spuo.mutation.SetParentID(i)
	return spuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableParentID(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetParentID(*i)
	}
	return spuo
}

// AddParentID adds i to the "parent_id" field.
func (spuo *SecurityPositionUpdateOne) AddParentID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddParentID(i)
	return spuo
}

// SetAccountID sets the "account_id" field.
func (spuo *SecurityPositionUpdateOne) SetAccountID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetAccountID()
	spuo.mutation.SetAccountID(i)
	return spuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableAccountID(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetAccountID(*i)
	}
	return spuo
}

// AddAccountID adds i to the "account_id" field.
func (spuo *SecurityPositionUpdateOne) AddAccountID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddAccountID(i)
	return spuo
}

// ClearAccountID clears the value of the "account_id" field.
func (spuo *SecurityPositionUpdateOne) ClearAccountID() *SecurityPositionUpdateOne {
	spuo.mutation.ClearAccountID()
	return spuo
}

// SetSecurityAccountID sets the "security_account_id" field.
func (spuo *SecurityPositionUpdateOne) SetSecurityAccountID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetSecurityAccountID()
	spuo.mutation.SetSecurityAccountID(i)
	return spuo
}

// AddSecurityAccountID adds i to the "security_account_id" field.
func (spuo *SecurityPositionUpdateOne) AddSecurityAccountID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddSecurityAccountID(i)
	return spuo
}

// SetPositionType sets the "position_type" field.
func (spuo *SecurityPositionUpdateOne) SetPositionType(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetPositionType()
	spuo.mutation.SetPositionType(i)
	return spuo
}

// SetNillablePositionType sets the "position_type" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillablePositionType(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetPositionType(*i)
	}
	return spuo
}

// AddPositionType adds i to the "position_type" field.
func (spuo *SecurityPositionUpdateOne) AddPositionType(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddPositionType(i)
	return spuo
}

// ClearPositionType clears the value of the "position_type" field.
func (spuo *SecurityPositionUpdateOne) ClearPositionType() *SecurityPositionUpdateOne {
	spuo.mutation.ClearPositionType()
	return spuo
}

// SetCdDirection sets the "cd_direction" field.
func (spuo *SecurityPositionUpdateOne) SetCdDirection(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetCdDirection()
	spuo.mutation.SetCdDirection(i)
	return spuo
}

// SetNillableCdDirection sets the "cd_direction" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableCdDirection(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetCdDirection(*i)
	}
	return spuo
}

// AddCdDirection adds i to the "cd_direction" field.
func (spuo *SecurityPositionUpdateOne) AddCdDirection(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddCdDirection(i)
	return spuo
}

// ClearCdDirection clears the value of the "cd_direction" field.
func (spuo *SecurityPositionUpdateOne) ClearCdDirection() *SecurityPositionUpdateOne {
	spuo.mutation.ClearCdDirection()
	return spuo
}

// SetProjectID sets the "project_id" field.
func (spuo *SecurityPositionUpdateOne) SetProjectID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetProjectID()
	spuo.mutation.SetProjectID(i)
	return spuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableProjectID(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetProjectID(*i)
	}
	return spuo
}

// AddProjectID adds i to the "project_id" field.
func (spuo *SecurityPositionUpdateOne) AddProjectID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddProjectID(i)
	return spuo
}

// ClearProjectID clears the value of the "project_id" field.
func (spuo *SecurityPositionUpdateOne) ClearProjectID() *SecurityPositionUpdateOne {
	spuo.mutation.ClearProjectID()
	return spuo
}

// SetProductID sets the "product_id" field.
func (spuo *SecurityPositionUpdateOne) SetProductID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetProductID()
	spuo.mutation.SetProductID(i)
	return spuo
}

// AddProductID adds i to the "product_id" field.
func (spuo *SecurityPositionUpdateOne) AddProductID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddProductID(i)
	return spuo
}

// SetMaterialID sets the "material_id" field.
func (spuo *SecurityPositionUpdateOne) SetMaterialID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetMaterialID()
	spuo.mutation.SetMaterialID(i)
	return spuo
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableMaterialID(i *int) *SecurityPositionUpdateOne {
	if i != nil {
		spuo.SetMaterialID(*i)
	}
	return spuo
}

// AddMaterialID adds i to the "material_id" field.
func (spuo *SecurityPositionUpdateOne) AddMaterialID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddMaterialID(i)
	return spuo
}

// ClearMaterialID clears the value of the "material_id" field.
func (spuo *SecurityPositionUpdateOne) ClearMaterialID() *SecurityPositionUpdateOne {
	spuo.mutation.ClearMaterialID()
	return spuo
}

// SetMaterialNo sets the "material_no" field.
func (spuo *SecurityPositionUpdateOne) SetMaterialNo(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetMaterialNo(s)
	return spuo
}

// SetNillableMaterialNo sets the "material_no" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableMaterialNo(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetMaterialNo(*s)
	}
	return spuo
}

// ClearMaterialNo clears the value of the "material_no" field.
func (spuo *SecurityPositionUpdateOne) ClearMaterialNo() *SecurityPositionUpdateOne {
	spuo.mutation.ClearMaterialNo()
	return spuo
}

// SetMultiplier sets the "multiplier" field.
func (spuo *SecurityPositionUpdateOne) SetMultiplier(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetMultiplier()
	spuo.mutation.SetMultiplier(f)
	return spuo
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableMultiplier(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetMultiplier(*f)
	}
	return spuo
}

// AddMultiplier adds f to the "multiplier" field.
func (spuo *SecurityPositionUpdateOne) AddMultiplier(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddMultiplier(f)
	return spuo
}

// ClearMultiplier clears the value of the "multiplier" field.
func (spuo *SecurityPositionUpdateOne) ClearMultiplier() *SecurityPositionUpdateOne {
	spuo.mutation.ClearMultiplier()
	return spuo
}

// SetBalance sets the "balance" field.
func (spuo *SecurityPositionUpdateOne) SetBalance(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetBalance()
	spuo.mutation.SetBalance(f)
	return spuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableBalance(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetBalance(*f)
	}
	return spuo
}

// AddBalance adds f to the "balance" field.
func (spuo *SecurityPositionUpdateOne) AddBalance(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddBalance(f)
	return spuo
}

// ClearBalance clears the value of the "balance" field.
func (spuo *SecurityPositionUpdateOne) ClearBalance() *SecurityPositionUpdateOne {
	spuo.mutation.ClearBalance()
	return spuo
}

// SetAvailable sets the "available" field.
func (spuo *SecurityPositionUpdateOne) SetAvailable(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetAvailable()
	spuo.mutation.SetAvailable(f)
	return spuo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableAvailable(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetAvailable(*f)
	}
	return spuo
}

// AddAvailable adds f to the "available" field.
func (spuo *SecurityPositionUpdateOne) AddAvailable(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddAvailable(f)
	return spuo
}

// ClearAvailable clears the value of the "available" field.
func (spuo *SecurityPositionUpdateOne) ClearAvailable() *SecurityPositionUpdateOne {
	spuo.mutation.ClearAvailable()
	return spuo
}

// SetFreeze sets the "freeze" field.
func (spuo *SecurityPositionUpdateOne) SetFreeze(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetFreeze()
	spuo.mutation.SetFreeze(f)
	return spuo
}

// SetNillableFreeze sets the "freeze" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableFreeze(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetFreeze(*f)
	}
	return spuo
}

// AddFreeze adds f to the "freeze" field.
func (spuo *SecurityPositionUpdateOne) AddFreeze(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddFreeze(f)
	return spuo
}

// ClearFreeze clears the value of the "freeze" field.
func (spuo *SecurityPositionUpdateOne) ClearFreeze() *SecurityPositionUpdateOne {
	spuo.mutation.ClearFreeze()
	return spuo
}

// SetAfloat sets the "afloat" field.
func (spuo *SecurityPositionUpdateOne) SetAfloat(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetAfloat()
	spuo.mutation.SetAfloat(f)
	return spuo
}

// SetNillableAfloat sets the "afloat" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableAfloat(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetAfloat(*f)
	}
	return spuo
}

// AddAfloat adds f to the "afloat" field.
func (spuo *SecurityPositionUpdateOne) AddAfloat(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddAfloat(f)
	return spuo
}

// ClearAfloat clears the value of the "afloat" field.
func (spuo *SecurityPositionUpdateOne) ClearAfloat() *SecurityPositionUpdateOne {
	spuo.mutation.ClearAfloat()
	return spuo
}

// SetUnit sets the "unit" field.
func (spuo *SecurityPositionUpdateOne) SetUnit(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetUnit(s)
	return spuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableUnit(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetUnit(*s)
	}
	return spuo
}

// ClearUnit clears the value of the "unit" field.
func (spuo *SecurityPositionUpdateOne) ClearUnit() *SecurityPositionUpdateOne {
	spuo.mutation.ClearUnit()
	return spuo
}

// SetSpec sets the "spec" field.
func (spuo *SecurityPositionUpdateOne) SetSpec(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetSpec(s)
	return spuo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableSpec(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetSpec(*s)
	}
	return spuo
}

// ClearSpec clears the value of the "spec" field.
func (spuo *SecurityPositionUpdateOne) ClearSpec() *SecurityPositionUpdateOne {
	spuo.mutation.ClearSpec()
	return spuo
}

// SetCurrency sets the "currency" field.
func (spuo *SecurityPositionUpdateOne) SetCurrency(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetCurrency(s)
	return spuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableCurrency(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetCurrency(*s)
	}
	return spuo
}

// ClearCurrency clears the value of the "currency" field.
func (spuo *SecurityPositionUpdateOne) ClearCurrency() *SecurityPositionUpdateOne {
	spuo.mutation.ClearCurrency()
	return spuo
}

// SetPrice sets the "price" field.
func (spuo *SecurityPositionUpdateOne) SetPrice(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetPrice()
	spuo.mutation.SetPrice(f)
	return spuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillablePrice(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetPrice(*f)
	}
	return spuo
}

// AddPrice adds f to the "price" field.
func (spuo *SecurityPositionUpdateOne) AddPrice(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddPrice(f)
	return spuo
}

// ClearPrice clears the value of the "price" field.
func (spuo *SecurityPositionUpdateOne) ClearPrice() *SecurityPositionUpdateOne {
	spuo.mutation.ClearPrice()
	return spuo
}

// SetAmount sets the "amount" field.
func (spuo *SecurityPositionUpdateOne) SetAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetAmount()
	spuo.mutation.SetAmount(f)
	return spuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableAmount(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetAmount(*f)
	}
	return spuo
}

// AddAmount adds f to the "amount" field.
func (spuo *SecurityPositionUpdateOne) AddAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddAmount(f)
	return spuo
}

// ClearAmount clears the value of the "amount" field.
func (spuo *SecurityPositionUpdateOne) ClearAmount() *SecurityPositionUpdateOne {
	spuo.mutation.ClearAmount()
	return spuo
}

// SetCostAmount sets the "cost_amount" field.
func (spuo *SecurityPositionUpdateOne) SetCostAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetCostAmount()
	spuo.mutation.SetCostAmount(f)
	return spuo
}

// SetNillableCostAmount sets the "cost_amount" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableCostAmount(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetCostAmount(*f)
	}
	return spuo
}

// AddCostAmount adds f to the "cost_amount" field.
func (spuo *SecurityPositionUpdateOne) AddCostAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddCostAmount(f)
	return spuo
}

// ClearCostAmount clears the value of the "cost_amount" field.
func (spuo *SecurityPositionUpdateOne) ClearCostAmount() *SecurityPositionUpdateOne {
	spuo.mutation.ClearCostAmount()
	return spuo
}

// SetCost sets the "cost" field.
func (spuo *SecurityPositionUpdateOne) SetCost(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetCost()
	spuo.mutation.SetCost(f)
	return spuo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableCost(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetCost(*f)
	}
	return spuo
}

// AddCost adds f to the "cost" field.
func (spuo *SecurityPositionUpdateOne) AddCost(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddCost(f)
	return spuo
}

// ClearCost clears the value of the "cost" field.
func (spuo *SecurityPositionUpdateOne) ClearCost() *SecurityPositionUpdateOne {
	spuo.mutation.ClearCost()
	return spuo
}

// SetFxRate sets the "fx_rate" field.
func (spuo *SecurityPositionUpdateOne) SetFxRate(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetFxRate()
	spuo.mutation.SetFxRate(f)
	return spuo
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableFxRate(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetFxRate(*f)
	}
	return spuo
}

// AddFxRate adds f to the "fx_rate" field.
func (spuo *SecurityPositionUpdateOne) AddFxRate(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddFxRate(f)
	return spuo
}

// ClearFxRate clears the value of the "fx_rate" field.
func (spuo *SecurityPositionUpdateOne) ClearFxRate() *SecurityPositionUpdateOne {
	spuo.mutation.ClearFxRate()
	return spuo
}

// SetStlCurrency sets the "stl_currency" field.
func (spuo *SecurityPositionUpdateOne) SetStlCurrency(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetStlCurrency(s)
	return spuo
}

// SetNillableStlCurrency sets the "stl_currency" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlCurrency(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetStlCurrency(*s)
	}
	return spuo
}

// ClearStlCurrency clears the value of the "stl_currency" field.
func (spuo *SecurityPositionUpdateOne) ClearStlCurrency() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlCurrency()
	return spuo
}

// SetStlAmount sets the "stl_amount" field.
func (spuo *SecurityPositionUpdateOne) SetStlAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlAmount()
	spuo.mutation.SetStlAmount(f)
	return spuo
}

// SetNillableStlAmount sets the "stl_amount" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlAmount(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlAmount(*f)
	}
	return spuo
}

// AddStlAmount adds f to the "stl_amount" field.
func (spuo *SecurityPositionUpdateOne) AddStlAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlAmount(f)
	return spuo
}

// ClearStlAmount clears the value of the "stl_amount" field.
func (spuo *SecurityPositionUpdateOne) ClearStlAmount() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlAmount()
	return spuo
}

// SetStlCost sets the "stl_cost" field.
func (spuo *SecurityPositionUpdateOne) SetStlCost(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlCost()
	spuo.mutation.SetStlCost(f)
	return spuo
}

// SetNillableStlCost sets the "stl_cost" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlCost(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlCost(*f)
	}
	return spuo
}

// AddStlCost adds f to the "stl_cost" field.
func (spuo *SecurityPositionUpdateOne) AddStlCost(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlCost(f)
	return spuo
}

// ClearStlCost clears the value of the "stl_cost" field.
func (spuo *SecurityPositionUpdateOne) ClearStlCost() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlCost()
	return spuo
}

// SetStlMargin sets the "stl_margin" field.
func (spuo *SecurityPositionUpdateOne) SetStlMargin(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlMargin()
	spuo.mutation.SetStlMargin(f)
	return spuo
}

// SetNillableStlMargin sets the "stl_margin" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlMargin(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlMargin(*f)
	}
	return spuo
}

// AddStlMargin adds f to the "stl_margin" field.
func (spuo *SecurityPositionUpdateOne) AddStlMargin(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlMargin(f)
	return spuo
}

// ClearStlMargin clears the value of the "stl_margin" field.
func (spuo *SecurityPositionUpdateOne) ClearStlMargin() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlMargin()
	return spuo
}

// SetStlCostAmount sets the "stl_cost_amount" field.
func (spuo *SecurityPositionUpdateOne) SetStlCostAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlCostAmount()
	spuo.mutation.SetStlCostAmount(f)
	return spuo
}

// SetNillableStlCostAmount sets the "stl_cost_amount" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlCostAmount(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlCostAmount(*f)
	}
	return spuo
}

// AddStlCostAmount adds f to the "stl_cost_amount" field.
func (spuo *SecurityPositionUpdateOne) AddStlCostAmount(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlCostAmount(f)
	return spuo
}

// ClearStlCostAmount clears the value of the "stl_cost_amount" field.
func (spuo *SecurityPositionUpdateOne) ClearStlCostAmount() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlCostAmount()
	return spuo
}

// SetStlMarginLv sets the "stl_margin_lv" field.
func (spuo *SecurityPositionUpdateOne) SetStlMarginLv(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlMarginLv()
	spuo.mutation.SetStlMarginLv(f)
	return spuo
}

// SetNillableStlMarginLv sets the "stl_margin_lv" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlMarginLv(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlMarginLv(*f)
	}
	return spuo
}

// AddStlMarginLv adds f to the "stl_margin_lv" field.
func (spuo *SecurityPositionUpdateOne) AddStlMarginLv(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlMarginLv(f)
	return spuo
}

// ClearStlMarginLv clears the value of the "stl_margin_lv" field.
func (spuo *SecurityPositionUpdateOne) ClearStlMarginLv() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlMarginLv()
	return spuo
}

// SetStlValPrice sets the "stl_val_price" field.
func (spuo *SecurityPositionUpdateOne) SetStlValPrice(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.ResetStlValPrice()
	spuo.mutation.SetStlValPrice(f)
	return spuo
}

// SetNillableStlValPrice sets the "stl_val_price" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableStlValPrice(f *float64) *SecurityPositionUpdateOne {
	if f != nil {
		spuo.SetStlValPrice(*f)
	}
	return spuo
}

// AddStlValPrice adds f to the "stl_val_price" field.
func (spuo *SecurityPositionUpdateOne) AddStlValPrice(f float64) *SecurityPositionUpdateOne {
	spuo.mutation.AddStlValPrice(f)
	return spuo
}

// ClearStlValPrice clears the value of the "stl_val_price" field.
func (spuo *SecurityPositionUpdateOne) ClearStlValPrice() *SecurityPositionUpdateOne {
	spuo.mutation.ClearStlValPrice()
	return spuo
}

// SetInvalidAt sets the "invalid_at" field.
func (spuo *SecurityPositionUpdateOne) SetInvalidAt(t time.Time) *SecurityPositionUpdateOne {
	spuo.mutation.SetInvalidAt(t)
	return spuo
}

// SetNillableInvalidAt sets the "invalid_at" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableInvalidAt(t *time.Time) *SecurityPositionUpdateOne {
	if t != nil {
		spuo.SetInvalidAt(*t)
	}
	return spuo
}

// ClearInvalidAt clears the value of the "invalid_at" field.
func (spuo *SecurityPositionUpdateOne) ClearInvalidAt() *SecurityPositionUpdateOne {
	spuo.mutation.ClearInvalidAt()
	return spuo
}

// SetCreatedAt sets the "created_at" field.
func (spuo *SecurityPositionUpdateOne) SetCreatedAt(t time.Time) *SecurityPositionUpdateOne {
	spuo.mutation.SetCreatedAt(t)
	return spuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableCreatedAt(t *time.Time) *SecurityPositionUpdateOne {
	if t != nil {
		spuo.SetCreatedAt(*t)
	}
	return spuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (spuo *SecurityPositionUpdateOne) ClearCreatedAt() *SecurityPositionUpdateOne {
	spuo.mutation.ClearCreatedAt()
	return spuo
}

// SetUniqueTag sets the "unique_tag" field.
func (spuo *SecurityPositionUpdateOne) SetUniqueTag(s string) *SecurityPositionUpdateOne {
	spuo.mutation.SetUniqueTag(s)
	return spuo
}

// SetNillableUniqueTag sets the "unique_tag" field if the given value is not nil.
func (spuo *SecurityPositionUpdateOne) SetNillableUniqueTag(s *string) *SecurityPositionUpdateOne {
	if s != nil {
		spuo.SetUniqueTag(*s)
	}
	return spuo
}

// ClearUniqueTag clears the value of the "unique_tag" field.
func (spuo *SecurityPositionUpdateOne) ClearUniqueTag() *SecurityPositionUpdateOne {
	spuo.mutation.ClearUniqueTag()
	return spuo
}

// SetOrgID sets the "org_id" field.
func (spuo *SecurityPositionUpdateOne) SetOrgID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.ResetOrgID()
	spuo.mutation.SetOrgID(i)
	return spuo
}

// AddOrgID adds i to the "org_id" field.
func (spuo *SecurityPositionUpdateOne) AddOrgID(i int) *SecurityPositionUpdateOne {
	spuo.mutation.AddOrgID(i)
	return spuo
}

// Mutation returns the SecurityPositionMutation object of the builder.
func (spuo *SecurityPositionUpdateOne) Mutation() *SecurityPositionMutation {
	return spuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SecurityPositionUpdateOne) Select(field string, fields ...string) *SecurityPositionUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SecurityPosition entity.
func (spuo *SecurityPositionUpdateOne) Save(ctx context.Context) (*SecurityPosition, error) {
	var (
		err  error
		node *SecurityPosition
	)
	if len(spuo.hooks) == 0 {
		if err = spuo.check(); err != nil {
			return nil, err
		}
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spuo.check(); err != nil {
				return nil, err
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SecurityPosition)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SecurityPositionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SecurityPositionUpdateOne) SaveX(ctx context.Context) *SecurityPosition {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SecurityPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SecurityPositionUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SecurityPositionUpdateOne) check() error {
	if v, ok := spuo.mutation.MaterialNo(); ok {
		if err := securityposition.MaterialNoValidator(v); err != nil {
			return &ValidationError{Name: "material_no", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.material_no": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Unit(); ok {
		if err := securityposition.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.unit": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Spec(); ok {
		if err := securityposition.SpecValidator(v); err != nil {
			return &ValidationError{Name: "spec", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.spec": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Currency(); ok {
		if err := securityposition.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.currency": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.StlCurrency(); ok {
		if err := securityposition.StlCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "stl_currency", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.stl_currency": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.UniqueTag(); ok {
		if err := securityposition.UniqueTagValidator(v); err != nil {
			return &ValidationError{Name: "unique_tag", err: fmt.Errorf(`ent: validator failed for field "SecurityPosition.unique_tag": %w`, err)}
		}
	}
	return nil
}

func (spuo *SecurityPositionUpdateOne) sqlSave(ctx context.Context) (_node *SecurityPosition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securityposition.Table,
			Columns: securityposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securityposition.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SecurityPosition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, securityposition.FieldID)
		for _, f := range fields {
			if !securityposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != securityposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.ParentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldParentID,
		})
	}
	if value, ok := spuo.mutation.AddedParentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldParentID,
		})
	}
	if value, ok := spuo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldAccountID,
		})
	}
	if value, ok := spuo.mutation.AddedAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldAccountID,
		})
	}
	if spuo.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldAccountID,
		})
	}
	if value, ok := spuo.mutation.SecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldSecurityAccountID,
		})
	}
	if value, ok := spuo.mutation.AddedSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldSecurityAccountID,
		})
	}
	if value, ok := spuo.mutation.PositionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldPositionType,
		})
	}
	if value, ok := spuo.mutation.AddedPositionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldPositionType,
		})
	}
	if spuo.mutation.PositionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldPositionType,
		})
	}
	if value, ok := spuo.mutation.CdDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldCdDirection,
		})
	}
	if value, ok := spuo.mutation.AddedCdDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldCdDirection,
		})
	}
	if spuo.mutation.CdDirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldCdDirection,
		})
	}
	if value, ok := spuo.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProjectID,
		})
	}
	if value, ok := spuo.mutation.AddedProjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProjectID,
		})
	}
	if spuo.mutation.ProjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldProjectID,
		})
	}
	if value, ok := spuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProductID,
		})
	}
	if value, ok := spuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldProductID,
		})
	}
	if value, ok := spuo.mutation.MaterialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldMaterialID,
		})
	}
	if value, ok := spuo.mutation.AddedMaterialID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldMaterialID,
		})
	}
	if spuo.mutation.MaterialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityposition.FieldMaterialID,
		})
	}
	if value, ok := spuo.mutation.MaterialNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldMaterialNo,
		})
	}
	if spuo.mutation.MaterialNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldMaterialNo,
		})
	}
	if value, ok := spuo.mutation.Multiplier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldMultiplier,
		})
	}
	if value, ok := spuo.mutation.AddedMultiplier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldMultiplier,
		})
	}
	if spuo.mutation.MultiplierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldMultiplier,
		})
	}
	if value, ok := spuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldBalance,
		})
	}
	if value, ok := spuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldBalance,
		})
	}
	if spuo.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldBalance,
		})
	}
	if value, ok := spuo.mutation.Available(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAvailable,
		})
	}
	if value, ok := spuo.mutation.AddedAvailable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAvailable,
		})
	}
	if spuo.mutation.AvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAvailable,
		})
	}
	if value, ok := spuo.mutation.Freeze(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFreeze,
		})
	}
	if value, ok := spuo.mutation.AddedFreeze(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFreeze,
		})
	}
	if spuo.mutation.FreezeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldFreeze,
		})
	}
	if value, ok := spuo.mutation.Afloat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAfloat,
		})
	}
	if value, ok := spuo.mutation.AddedAfloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAfloat,
		})
	}
	if spuo.mutation.AfloatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAfloat,
		})
	}
	if value, ok := spuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldUnit,
		})
	}
	if spuo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldUnit,
		})
	}
	if value, ok := spuo.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldSpec,
		})
	}
	if spuo.mutation.SpecCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldSpec,
		})
	}
	if value, ok := spuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldCurrency,
		})
	}
	if spuo.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldCurrency,
		})
	}
	if value, ok := spuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldPrice,
		})
	}
	if value, ok := spuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldPrice,
		})
	}
	if spuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldPrice,
		})
	}
	if value, ok := spuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAmount,
		})
	}
	if value, ok := spuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldAmount,
		})
	}
	if spuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldAmount,
		})
	}
	if value, ok := spuo.mutation.CostAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCostAmount,
		})
	}
	if value, ok := spuo.mutation.AddedCostAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCostAmount,
		})
	}
	if spuo.mutation.CostAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldCostAmount,
		})
	}
	if value, ok := spuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCost,
		})
	}
	if value, ok := spuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldCost,
		})
	}
	if spuo.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldCost,
		})
	}
	if value, ok := spuo.mutation.FxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFxRate,
		})
	}
	if value, ok := spuo.mutation.AddedFxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldFxRate,
		})
	}
	if spuo.mutation.FxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldFxRate,
		})
	}
	if value, ok := spuo.mutation.StlCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldStlCurrency,
		})
	}
	if spuo.mutation.StlCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldStlCurrency,
		})
	}
	if value, ok := spuo.mutation.StlAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlAmount,
		})
	}
	if value, ok := spuo.mutation.AddedStlAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlAmount,
		})
	}
	if spuo.mutation.StlAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlAmount,
		})
	}
	if value, ok := spuo.mutation.StlCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCost,
		})
	}
	if value, ok := spuo.mutation.AddedStlCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCost,
		})
	}
	if spuo.mutation.StlCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlCost,
		})
	}
	if value, ok := spuo.mutation.StlMargin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMargin,
		})
	}
	if value, ok := spuo.mutation.AddedStlMargin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMargin,
		})
	}
	if spuo.mutation.StlMarginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlMargin,
		})
	}
	if value, ok := spuo.mutation.StlCostAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if value, ok := spuo.mutation.AddedStlCostAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if spuo.mutation.StlCostAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlCostAmount,
		})
	}
	if value, ok := spuo.mutation.StlMarginLv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if value, ok := spuo.mutation.AddedStlMarginLv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if spuo.mutation.StlMarginLvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlMarginLv,
		})
	}
	if value, ok := spuo.mutation.StlValPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if value, ok := spuo.mutation.AddedStlValPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if spuo.mutation.StlValPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityposition.FieldStlValPrice,
		})
	}
	if value, ok := spuo.mutation.InvalidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityposition.FieldInvalidAt,
		})
	}
	if spuo.mutation.InvalidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityposition.FieldInvalidAt,
		})
	}
	if value, ok := spuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityposition.FieldCreatedAt,
		})
	}
	if spuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityposition.FieldCreatedAt,
		})
	}
	if value, ok := spuo.mutation.UniqueTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityposition.FieldUniqueTag,
		})
	}
	if spuo.mutation.UniqueTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityposition.FieldUniqueTag,
		})
	}
	if value, ok := spuo.mutation.OrgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldOrgID,
		})
	}
	if value, ok := spuo.mutation.AddedOrgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityposition.FieldOrgID,
		})
	}
	_node = &SecurityPosition{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
