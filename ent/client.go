// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/bug/ent/migrate"

	"entgo.io/bug/ent/securityjournal"
	"entgo.io/bug/ent/securityposition"
	"entgo.io/bug/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// SecurityJournal is the client for interacting with the SecurityJournal builders.
	SecurityJournal *SecurityJournalClient
	// SecurityPosition is the client for interacting with the SecurityPosition builders.
	SecurityPosition *SecurityPositionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.SecurityJournal = NewSecurityJournalClient(c.config)
	c.SecurityPosition = NewSecurityPositionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		SecurityJournal:  NewSecurityJournalClient(cfg),
		SecurityPosition: NewSecurityPositionClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		SecurityJournal:  NewSecurityJournalClient(cfg),
		SecurityPosition: NewSecurityPositionClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		SecurityJournal.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.SecurityJournal.Use(hooks...)
	c.SecurityPosition.Use(hooks...)
	c.User.Use(hooks...)
}

// SecurityJournalClient is a client for the SecurityJournal schema.
type SecurityJournalClient struct {
	config
}

// NewSecurityJournalClient returns a client for the SecurityJournal from the given config.
func NewSecurityJournalClient(c config) *SecurityJournalClient {
	return &SecurityJournalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securityjournal.Hooks(f(g(h())))`.
func (c *SecurityJournalClient) Use(hooks ...Hook) {
	c.hooks.SecurityJournal = append(c.hooks.SecurityJournal, hooks...)
}

// Create returns a builder for creating a SecurityJournal entity.
func (c *SecurityJournalClient) Create() *SecurityJournalCreate {
	mutation := newSecurityJournalMutation(c.config, OpCreate)
	return &SecurityJournalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityJournal entities.
func (c *SecurityJournalClient) CreateBulk(builders ...*SecurityJournalCreate) *SecurityJournalCreateBulk {
	return &SecurityJournalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityJournal.
func (c *SecurityJournalClient) Update() *SecurityJournalUpdate {
	mutation := newSecurityJournalMutation(c.config, OpUpdate)
	return &SecurityJournalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityJournalClient) UpdateOne(sj *SecurityJournal) *SecurityJournalUpdateOne {
	mutation := newSecurityJournalMutation(c.config, OpUpdateOne, withSecurityJournal(sj))
	return &SecurityJournalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityJournalClient) UpdateOneID(id int) *SecurityJournalUpdateOne {
	mutation := newSecurityJournalMutation(c.config, OpUpdateOne, withSecurityJournalID(id))
	return &SecurityJournalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityJournal.
func (c *SecurityJournalClient) Delete() *SecurityJournalDelete {
	mutation := newSecurityJournalMutation(c.config, OpDelete)
	return &SecurityJournalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecurityJournalClient) DeleteOne(sj *SecurityJournal) *SecurityJournalDeleteOne {
	return c.DeleteOneID(sj.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SecurityJournalClient) DeleteOneID(id int) *SecurityJournalDeleteOne {
	builder := c.Delete().Where(securityjournal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityJournalDeleteOne{builder}
}

// Query returns a query builder for SecurityJournal.
func (c *SecurityJournalClient) Query() *SecurityJournalQuery {
	return &SecurityJournalQuery{
		config: c.config,
	}
}

// Get returns a SecurityJournal entity by its id.
func (c *SecurityJournalClient) Get(ctx context.Context, id int) (*SecurityJournal, error) {
	return c.Query().Where(securityjournal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityJournalClient) GetX(ctx context.Context, id int) *SecurityJournal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SecurityJournalClient) Hooks() []Hook {
	return c.hooks.SecurityJournal
}

// SecurityPositionClient is a client for the SecurityPosition schema.
type SecurityPositionClient struct {
	config
}

// NewSecurityPositionClient returns a client for the SecurityPosition from the given config.
func NewSecurityPositionClient(c config) *SecurityPositionClient {
	return &SecurityPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securityposition.Hooks(f(g(h())))`.
func (c *SecurityPositionClient) Use(hooks ...Hook) {
	c.hooks.SecurityPosition = append(c.hooks.SecurityPosition, hooks...)
}

// Create returns a builder for creating a SecurityPosition entity.
func (c *SecurityPositionClient) Create() *SecurityPositionCreate {
	mutation := newSecurityPositionMutation(c.config, OpCreate)
	return &SecurityPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityPosition entities.
func (c *SecurityPositionClient) CreateBulk(builders ...*SecurityPositionCreate) *SecurityPositionCreateBulk {
	return &SecurityPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityPosition.
func (c *SecurityPositionClient) Update() *SecurityPositionUpdate {
	mutation := newSecurityPositionMutation(c.config, OpUpdate)
	return &SecurityPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityPositionClient) UpdateOne(sp *SecurityPosition) *SecurityPositionUpdateOne {
	mutation := newSecurityPositionMutation(c.config, OpUpdateOne, withSecurityPosition(sp))
	return &SecurityPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityPositionClient) UpdateOneID(id int) *SecurityPositionUpdateOne {
	mutation := newSecurityPositionMutation(c.config, OpUpdateOne, withSecurityPositionID(id))
	return &SecurityPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityPosition.
func (c *SecurityPositionClient) Delete() *SecurityPositionDelete {
	mutation := newSecurityPositionMutation(c.config, OpDelete)
	return &SecurityPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecurityPositionClient) DeleteOne(sp *SecurityPosition) *SecurityPositionDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SecurityPositionClient) DeleteOneID(id int) *SecurityPositionDeleteOne {
	builder := c.Delete().Where(securityposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityPositionDeleteOne{builder}
}

// Query returns a query builder for SecurityPosition.
func (c *SecurityPositionClient) Query() *SecurityPositionQuery {
	return &SecurityPositionQuery{
		config: c.config,
	}
}

// Get returns a SecurityPosition entity by its id.
func (c *SecurityPositionClient) Get(ctx context.Context, id int) (*SecurityPosition, error) {
	return c.Query().Where(securityposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityPositionClient) GetX(ctx context.Context, id int) *SecurityPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SecurityPositionClient) Hooks() []Hook {
	return c.hooks.SecurityPosition
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
