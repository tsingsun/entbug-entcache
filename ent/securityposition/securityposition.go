// Code generated by ent, DO NOT EDIT.

package securityposition

const (
	// Label holds the string label denoting the securityposition type in the database.
	Label = "security_position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldSecurityAccountID holds the string denoting the security_account_id field in the database.
	FieldSecurityAccountID = "security_account_id"
	// FieldPositionType holds the string denoting the position_type field in the database.
	FieldPositionType = "position_type"
	// FieldCdDirection holds the string denoting the cd_direction field in the database.
	FieldCdDirection = "cd_direction"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldMaterialID holds the string denoting the material_id field in the database.
	FieldMaterialID = "material_id"
	// FieldMaterialNo holds the string denoting the material_no field in the database.
	FieldMaterialNo = "material_no"
	// FieldMultiplier holds the string denoting the multiplier field in the database.
	FieldMultiplier = "multiplier"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldAvailable holds the string denoting the available field in the database.
	FieldAvailable = "available"
	// FieldFreeze holds the string denoting the freeze field in the database.
	FieldFreeze = "freeze"
	// FieldAfloat holds the string denoting the afloat field in the database.
	FieldAfloat = "afloat"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldSpec holds the string denoting the spec field in the database.
	FieldSpec = "spec"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCostAmount holds the string denoting the cost_amount field in the database.
	FieldCostAmount = "cost_amount"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldFxRate holds the string denoting the fx_rate field in the database.
	FieldFxRate = "fx_rate"
	// FieldStlCurrency holds the string denoting the stl_currency field in the database.
	FieldStlCurrency = "stl_currency"
	// FieldStlAmount holds the string denoting the stl_amount field in the database.
	FieldStlAmount = "stl_amount"
	// FieldStlCost holds the string denoting the stl_cost field in the database.
	FieldStlCost = "stl_cost"
	// FieldStlMargin holds the string denoting the stl_margin field in the database.
	FieldStlMargin = "stl_margin"
	// FieldStlCostAmount holds the string denoting the stl_cost_amount field in the database.
	FieldStlCostAmount = "stl_cost_amount"
	// FieldStlMarginLv holds the string denoting the stl_margin_lv field in the database.
	FieldStlMarginLv = "stl_margin_lv"
	// FieldStlValPrice holds the string denoting the stl_val_price field in the database.
	FieldStlValPrice = "stl_val_price"
	// FieldInvalidAt holds the string denoting the invalid_at field in the database.
	FieldInvalidAt = "invalid_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUniqueTag holds the string denoting the unique_tag field in the database.
	FieldUniqueTag = "unique_tag"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// Table holds the table name of the securityposition in the database.
	Table = "security_position"
)

// Columns holds all SQL columns for securityposition fields.
var Columns = []string{
	FieldID,
	FieldParentID,
	FieldAccountID,
	FieldSecurityAccountID,
	FieldPositionType,
	FieldCdDirection,
	FieldProjectID,
	FieldProductID,
	FieldMaterialID,
	FieldMaterialNo,
	FieldMultiplier,
	FieldBalance,
	FieldAvailable,
	FieldFreeze,
	FieldAfloat,
	FieldUnit,
	FieldSpec,
	FieldCurrency,
	FieldPrice,
	FieldAmount,
	FieldCostAmount,
	FieldCost,
	FieldFxRate,
	FieldStlCurrency,
	FieldStlAmount,
	FieldStlCost,
	FieldStlMargin,
	FieldStlCostAmount,
	FieldStlMarginLv,
	FieldStlValPrice,
	FieldInvalidAt,
	FieldCreatedAt,
	FieldUniqueTag,
	FieldOrgID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int
	// MaterialNoValidator is a validator for the "material_no" field. It is called by the builders before save.
	MaterialNoValidator func(string) error
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// DefaultAvailable holds the default value on creation for the "available" field.
	DefaultAvailable float64
	// DefaultFreeze holds the default value on creation for the "freeze" field.
	DefaultFreeze float64
	// DefaultAfloat holds the default value on creation for the "afloat" field.
	DefaultAfloat float64
	// UnitValidator is a validator for the "unit" field. It is called by the builders before save.
	UnitValidator func(string) error
	// SpecValidator is a validator for the "spec" field. It is called by the builders before save.
	SpecValidator func(string) error
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// StlCurrencyValidator is a validator for the "stl_currency" field. It is called by the builders before save.
	StlCurrencyValidator func(string) error
	// DefaultStlMarginLv holds the default value on creation for the "stl_margin_lv" field.
	DefaultStlMarginLv float64
	// UniqueTagValidator is a validator for the "unique_tag" field. It is called by the builders before save.
	UniqueTagValidator func(string) error
)
