// Code generated by ent, DO NOT EDIT.

package securityposition

import (
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// SecurityAccountID applies equality check predicate on the "security_account_id" field. It's identical to SecurityAccountIDEQ.
func SecurityAccountID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityAccountID), v))
	})
}

// PositionType applies equality check predicate on the "position_type" field. It's identical to PositionTypeEQ.
func PositionType(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionType), v))
	})
}

// CdDirection applies equality check predicate on the "cd_direction" field. It's identical to CdDirectionEQ.
func CdDirection(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdDirection), v))
	})
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// MaterialID applies equality check predicate on the "material_id" field. It's identical to MaterialIDEQ.
func MaterialID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialID), v))
	})
}

// MaterialNo applies equality check predicate on the "material_no" field. It's identical to MaterialNoEQ.
func MaterialNo(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialNo), v))
	})
}

// Multiplier applies equality check predicate on the "multiplier" field. It's identical to MultiplierEQ.
func Multiplier(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiplier), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Available applies equality check predicate on the "available" field. It's identical to AvailableEQ.
func Available(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailable), v))
	})
}

// Freeze applies equality check predicate on the "freeze" field. It's identical to FreezeEQ.
func Freeze(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeze), v))
	})
}

// Afloat applies equality check predicate on the "afloat" field. It's identical to AfloatEQ.
func Afloat(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfloat), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Spec applies equality check predicate on the "spec" field. It's identical to SpecEQ.
func Spec(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpec), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// CostAmount applies equality check predicate on the "cost_amount" field. It's identical to CostAmountEQ.
func CostAmount(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCostAmount), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// FxRate applies equality check predicate on the "fx_rate" field. It's identical to FxRateEQ.
func FxRate(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFxRate), v))
	})
}

// StlCurrency applies equality check predicate on the "stl_currency" field. It's identical to StlCurrencyEQ.
func StlCurrency(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCurrency), v))
	})
}

// StlAmount applies equality check predicate on the "stl_amount" field. It's identical to StlAmountEQ.
func StlAmount(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlAmount), v))
	})
}

// StlCost applies equality check predicate on the "stl_cost" field. It's identical to StlCostEQ.
func StlCost(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCost), v))
	})
}

// StlMargin applies equality check predicate on the "stl_margin" field. It's identical to StlMarginEQ.
func StlMargin(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMargin), v))
	})
}

// StlCostAmount applies equality check predicate on the "stl_cost_amount" field. It's identical to StlCostAmountEQ.
func StlCostAmount(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCostAmount), v))
	})
}

// StlMarginLv applies equality check predicate on the "stl_margin_lv" field. It's identical to StlMarginLvEQ.
func StlMarginLv(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMarginLv), v))
	})
}

// StlValPrice applies equality check predicate on the "stl_val_price" field. It's identical to StlValPriceEQ.
func StlValPrice(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlValPrice), v))
	})
}

// InvalidAt applies equality check predicate on the "invalid_at" field. It's identical to InvalidAtEQ.
func InvalidAt(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvalidAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UniqueTag applies equality check predicate on the "unique_tag" field. It's identical to UniqueTagEQ.
func UniqueTag(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueTag), v))
	})
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentID), v))
	})
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentID), v))
	})
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentID), v))
	})
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentID), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// SecurityAccountIDEQ applies the EQ predicate on the "security_account_id" field.
func SecurityAccountIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDNEQ applies the NEQ predicate on the "security_account_id" field.
func SecurityAccountIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDIn applies the In predicate on the "security_account_id" field.
func SecurityAccountIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecurityAccountID), v...))
	})
}

// SecurityAccountIDNotIn applies the NotIn predicate on the "security_account_id" field.
func SecurityAccountIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecurityAccountID), v...))
	})
}

// SecurityAccountIDGT applies the GT predicate on the "security_account_id" field.
func SecurityAccountIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDGTE applies the GTE predicate on the "security_account_id" field.
func SecurityAccountIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDLT applies the LT predicate on the "security_account_id" field.
func SecurityAccountIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecurityAccountID), v))
	})
}

// SecurityAccountIDLTE applies the LTE predicate on the "security_account_id" field.
func SecurityAccountIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecurityAccountID), v))
	})
}

// PositionTypeEQ applies the EQ predicate on the "position_type" field.
func PositionTypeEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionType), v))
	})
}

// PositionTypeNEQ applies the NEQ predicate on the "position_type" field.
func PositionTypeNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionType), v))
	})
}

// PositionTypeIn applies the In predicate on the "position_type" field.
func PositionTypeIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPositionType), v...))
	})
}

// PositionTypeNotIn applies the NotIn predicate on the "position_type" field.
func PositionTypeNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPositionType), v...))
	})
}

// PositionTypeGT applies the GT predicate on the "position_type" field.
func PositionTypeGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionType), v))
	})
}

// PositionTypeGTE applies the GTE predicate on the "position_type" field.
func PositionTypeGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionType), v))
	})
}

// PositionTypeLT applies the LT predicate on the "position_type" field.
func PositionTypeLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionType), v))
	})
}

// PositionTypeLTE applies the LTE predicate on the "position_type" field.
func PositionTypeLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionType), v))
	})
}

// PositionTypeIsNil applies the IsNil predicate on the "position_type" field.
func PositionTypeIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPositionType)))
	})
}

// PositionTypeNotNil applies the NotNil predicate on the "position_type" field.
func PositionTypeNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPositionType)))
	})
}

// CdDirectionEQ applies the EQ predicate on the "cd_direction" field.
func CdDirectionEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdDirection), v))
	})
}

// CdDirectionNEQ applies the NEQ predicate on the "cd_direction" field.
func CdDirectionNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCdDirection), v))
	})
}

// CdDirectionIn applies the In predicate on the "cd_direction" field.
func CdDirectionIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCdDirection), v...))
	})
}

// CdDirectionNotIn applies the NotIn predicate on the "cd_direction" field.
func CdDirectionNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCdDirection), v...))
	})
}

// CdDirectionGT applies the GT predicate on the "cd_direction" field.
func CdDirectionGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCdDirection), v))
	})
}

// CdDirectionGTE applies the GTE predicate on the "cd_direction" field.
func CdDirectionGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCdDirection), v))
	})
}

// CdDirectionLT applies the LT predicate on the "cd_direction" field.
func CdDirectionLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCdDirection), v))
	})
}

// CdDirectionLTE applies the LTE predicate on the "cd_direction" field.
func CdDirectionLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCdDirection), v))
	})
}

// CdDirectionIsNil applies the IsNil predicate on the "cd_direction" field.
func CdDirectionIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCdDirection)))
	})
}

// CdDirectionNotNil applies the NotNil predicate on the "cd_direction" field.
func CdDirectionNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCdDirection)))
	})
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectID), v...))
	})
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectID), v...))
	})
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectID), v))
	})
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectID), v))
	})
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDIsNil applies the IsNil predicate on the "project_id" field.
func ProjectIDIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProjectID)))
	})
}

// ProjectIDNotNil applies the NotNil predicate on the "project_id" field.
func ProjectIDNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProjectID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// MaterialIDEQ applies the EQ predicate on the "material_id" field.
func MaterialIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialID), v))
	})
}

// MaterialIDNEQ applies the NEQ predicate on the "material_id" field.
func MaterialIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialID), v))
	})
}

// MaterialIDIn applies the In predicate on the "material_id" field.
func MaterialIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialID), v...))
	})
}

// MaterialIDNotIn applies the NotIn predicate on the "material_id" field.
func MaterialIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialID), v...))
	})
}

// MaterialIDGT applies the GT predicate on the "material_id" field.
func MaterialIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialID), v))
	})
}

// MaterialIDGTE applies the GTE predicate on the "material_id" field.
func MaterialIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialID), v))
	})
}

// MaterialIDLT applies the LT predicate on the "material_id" field.
func MaterialIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialID), v))
	})
}

// MaterialIDLTE applies the LTE predicate on the "material_id" field.
func MaterialIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialID), v))
	})
}

// MaterialIDIsNil applies the IsNil predicate on the "material_id" field.
func MaterialIDIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaterialID)))
	})
}

// MaterialIDNotNil applies the NotNil predicate on the "material_id" field.
func MaterialIDNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaterialID)))
	})
}

// MaterialNoEQ applies the EQ predicate on the "material_no" field.
func MaterialNoEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoNEQ applies the NEQ predicate on the "material_no" field.
func MaterialNoNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoIn applies the In predicate on the "material_no" field.
func MaterialNoIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialNo), v...))
	})
}

// MaterialNoNotIn applies the NotIn predicate on the "material_no" field.
func MaterialNoNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialNo), v...))
	})
}

// MaterialNoGT applies the GT predicate on the "material_no" field.
func MaterialNoGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoGTE applies the GTE predicate on the "material_no" field.
func MaterialNoGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoLT applies the LT predicate on the "material_no" field.
func MaterialNoLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoLTE applies the LTE predicate on the "material_no" field.
func MaterialNoLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoContains applies the Contains predicate on the "material_no" field.
func MaterialNoContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoHasPrefix applies the HasPrefix predicate on the "material_no" field.
func MaterialNoHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoHasSuffix applies the HasSuffix predicate on the "material_no" field.
func MaterialNoHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoIsNil applies the IsNil predicate on the "material_no" field.
func MaterialNoIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaterialNo)))
	})
}

// MaterialNoNotNil applies the NotNil predicate on the "material_no" field.
func MaterialNoNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaterialNo)))
	})
}

// MaterialNoEqualFold applies the EqualFold predicate on the "material_no" field.
func MaterialNoEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterialNo), v))
	})
}

// MaterialNoContainsFold applies the ContainsFold predicate on the "material_no" field.
func MaterialNoContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterialNo), v))
	})
}

// MultiplierEQ applies the EQ predicate on the "multiplier" field.
func MultiplierEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiplier), v))
	})
}

// MultiplierNEQ applies the NEQ predicate on the "multiplier" field.
func MultiplierNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiplier), v))
	})
}

// MultiplierIn applies the In predicate on the "multiplier" field.
func MultiplierIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMultiplier), v...))
	})
}

// MultiplierNotIn applies the NotIn predicate on the "multiplier" field.
func MultiplierNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMultiplier), v...))
	})
}

// MultiplierGT applies the GT predicate on the "multiplier" field.
func MultiplierGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMultiplier), v))
	})
}

// MultiplierGTE applies the GTE predicate on the "multiplier" field.
func MultiplierGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMultiplier), v))
	})
}

// MultiplierLT applies the LT predicate on the "multiplier" field.
func MultiplierLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMultiplier), v))
	})
}

// MultiplierLTE applies the LTE predicate on the "multiplier" field.
func MultiplierLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMultiplier), v))
	})
}

// MultiplierIsNil applies the IsNil predicate on the "multiplier" field.
func MultiplierIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMultiplier)))
	})
}

// MultiplierNotNil applies the NotNil predicate on the "multiplier" field.
func MultiplierNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMultiplier)))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// BalanceIsNil applies the IsNil predicate on the "balance" field.
func BalanceIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBalance)))
	})
}

// BalanceNotNil applies the NotNil predicate on the "balance" field.
func BalanceNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBalance)))
	})
}

// AvailableEQ applies the EQ predicate on the "available" field.
func AvailableEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailable), v))
	})
}

// AvailableNEQ applies the NEQ predicate on the "available" field.
func AvailableNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailable), v))
	})
}

// AvailableIn applies the In predicate on the "available" field.
func AvailableIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailable), v...))
	})
}

// AvailableNotIn applies the NotIn predicate on the "available" field.
func AvailableNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailable), v...))
	})
}

// AvailableGT applies the GT predicate on the "available" field.
func AvailableGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailable), v))
	})
}

// AvailableGTE applies the GTE predicate on the "available" field.
func AvailableGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailable), v))
	})
}

// AvailableLT applies the LT predicate on the "available" field.
func AvailableLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailable), v))
	})
}

// AvailableLTE applies the LTE predicate on the "available" field.
func AvailableLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailable), v))
	})
}

// AvailableIsNil applies the IsNil predicate on the "available" field.
func AvailableIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvailable)))
	})
}

// AvailableNotNil applies the NotNil predicate on the "available" field.
func AvailableNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvailable)))
	})
}

// FreezeEQ applies the EQ predicate on the "freeze" field.
func FreezeEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeze), v))
	})
}

// FreezeNEQ applies the NEQ predicate on the "freeze" field.
func FreezeNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreeze), v))
	})
}

// FreezeIn applies the In predicate on the "freeze" field.
func FreezeIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFreeze), v...))
	})
}

// FreezeNotIn applies the NotIn predicate on the "freeze" field.
func FreezeNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFreeze), v...))
	})
}

// FreezeGT applies the GT predicate on the "freeze" field.
func FreezeGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreeze), v))
	})
}

// FreezeGTE applies the GTE predicate on the "freeze" field.
func FreezeGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreeze), v))
	})
}

// FreezeLT applies the LT predicate on the "freeze" field.
func FreezeLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreeze), v))
	})
}

// FreezeLTE applies the LTE predicate on the "freeze" field.
func FreezeLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreeze), v))
	})
}

// FreezeIsNil applies the IsNil predicate on the "freeze" field.
func FreezeIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFreeze)))
	})
}

// FreezeNotNil applies the NotNil predicate on the "freeze" field.
func FreezeNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFreeze)))
	})
}

// AfloatEQ applies the EQ predicate on the "afloat" field.
func AfloatEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfloat), v))
	})
}

// AfloatNEQ applies the NEQ predicate on the "afloat" field.
func AfloatNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAfloat), v))
	})
}

// AfloatIn applies the In predicate on the "afloat" field.
func AfloatIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAfloat), v...))
	})
}

// AfloatNotIn applies the NotIn predicate on the "afloat" field.
func AfloatNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAfloat), v...))
	})
}

// AfloatGT applies the GT predicate on the "afloat" field.
func AfloatGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAfloat), v))
	})
}

// AfloatGTE applies the GTE predicate on the "afloat" field.
func AfloatGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAfloat), v))
	})
}

// AfloatLT applies the LT predicate on the "afloat" field.
func AfloatLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAfloat), v))
	})
}

// AfloatLTE applies the LTE predicate on the "afloat" field.
func AfloatLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAfloat), v))
	})
}

// AfloatIsNil applies the IsNil predicate on the "afloat" field.
func AfloatIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAfloat)))
	})
}

// AfloatNotNil applies the NotNil predicate on the "afloat" field.
func AfloatNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAfloat)))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnit)))
	})
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnit)))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// SpecEQ applies the EQ predicate on the "spec" field.
func SpecEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpec), v))
	})
}

// SpecNEQ applies the NEQ predicate on the "spec" field.
func SpecNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpec), v))
	})
}

// SpecIn applies the In predicate on the "spec" field.
func SpecIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpec), v...))
	})
}

// SpecNotIn applies the NotIn predicate on the "spec" field.
func SpecNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpec), v...))
	})
}

// SpecGT applies the GT predicate on the "spec" field.
func SpecGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpec), v))
	})
}

// SpecGTE applies the GTE predicate on the "spec" field.
func SpecGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpec), v))
	})
}

// SpecLT applies the LT predicate on the "spec" field.
func SpecLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpec), v))
	})
}

// SpecLTE applies the LTE predicate on the "spec" field.
func SpecLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpec), v))
	})
}

// SpecContains applies the Contains predicate on the "spec" field.
func SpecContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpec), v))
	})
}

// SpecHasPrefix applies the HasPrefix predicate on the "spec" field.
func SpecHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpec), v))
	})
}

// SpecHasSuffix applies the HasSuffix predicate on the "spec" field.
func SpecHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpec), v))
	})
}

// SpecIsNil applies the IsNil predicate on the "spec" field.
func SpecIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpec)))
	})
}

// SpecNotNil applies the NotNil predicate on the "spec" field.
func SpecNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpec)))
	})
}

// SpecEqualFold applies the EqualFold predicate on the "spec" field.
func SpecEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpec), v))
	})
}

// SpecContainsFold applies the ContainsFold predicate on the "spec" field.
func SpecContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpec), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrency)))
	})
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrency)))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// CostAmountEQ applies the EQ predicate on the "cost_amount" field.
func CostAmountEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCostAmount), v))
	})
}

// CostAmountNEQ applies the NEQ predicate on the "cost_amount" field.
func CostAmountNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCostAmount), v))
	})
}

// CostAmountIn applies the In predicate on the "cost_amount" field.
func CostAmountIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCostAmount), v...))
	})
}

// CostAmountNotIn applies the NotIn predicate on the "cost_amount" field.
func CostAmountNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCostAmount), v...))
	})
}

// CostAmountGT applies the GT predicate on the "cost_amount" field.
func CostAmountGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCostAmount), v))
	})
}

// CostAmountGTE applies the GTE predicate on the "cost_amount" field.
func CostAmountGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCostAmount), v))
	})
}

// CostAmountLT applies the LT predicate on the "cost_amount" field.
func CostAmountLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCostAmount), v))
	})
}

// CostAmountLTE applies the LTE predicate on the "cost_amount" field.
func CostAmountLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCostAmount), v))
	})
}

// CostAmountIsNil applies the IsNil predicate on the "cost_amount" field.
func CostAmountIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCostAmount)))
	})
}

// CostAmountNotNil applies the NotNil predicate on the "cost_amount" field.
func CostAmountNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCostAmount)))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// CostIsNil applies the IsNil predicate on the "cost" field.
func CostIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCost)))
	})
}

// CostNotNil applies the NotNil predicate on the "cost" field.
func CostNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCost)))
	})
}

// FxRateEQ applies the EQ predicate on the "fx_rate" field.
func FxRateEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFxRate), v))
	})
}

// FxRateNEQ applies the NEQ predicate on the "fx_rate" field.
func FxRateNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFxRate), v))
	})
}

// FxRateIn applies the In predicate on the "fx_rate" field.
func FxRateIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFxRate), v...))
	})
}

// FxRateNotIn applies the NotIn predicate on the "fx_rate" field.
func FxRateNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFxRate), v...))
	})
}

// FxRateGT applies the GT predicate on the "fx_rate" field.
func FxRateGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFxRate), v))
	})
}

// FxRateGTE applies the GTE predicate on the "fx_rate" field.
func FxRateGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFxRate), v))
	})
}

// FxRateLT applies the LT predicate on the "fx_rate" field.
func FxRateLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFxRate), v))
	})
}

// FxRateLTE applies the LTE predicate on the "fx_rate" field.
func FxRateLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFxRate), v))
	})
}

// FxRateIsNil applies the IsNil predicate on the "fx_rate" field.
func FxRateIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFxRate)))
	})
}

// FxRateNotNil applies the NotNil predicate on the "fx_rate" field.
func FxRateNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFxRate)))
	})
}

// StlCurrencyEQ applies the EQ predicate on the "stl_currency" field.
func StlCurrencyEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyNEQ applies the NEQ predicate on the "stl_currency" field.
func StlCurrencyNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyIn applies the In predicate on the "stl_currency" field.
func StlCurrencyIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlCurrency), v...))
	})
}

// StlCurrencyNotIn applies the NotIn predicate on the "stl_currency" field.
func StlCurrencyNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlCurrency), v...))
	})
}

// StlCurrencyGT applies the GT predicate on the "stl_currency" field.
func StlCurrencyGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyGTE applies the GTE predicate on the "stl_currency" field.
func StlCurrencyGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyLT applies the LT predicate on the "stl_currency" field.
func StlCurrencyLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyLTE applies the LTE predicate on the "stl_currency" field.
func StlCurrencyLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyContains applies the Contains predicate on the "stl_currency" field.
func StlCurrencyContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyHasPrefix applies the HasPrefix predicate on the "stl_currency" field.
func StlCurrencyHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyHasSuffix applies the HasSuffix predicate on the "stl_currency" field.
func StlCurrencyHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyIsNil applies the IsNil predicate on the "stl_currency" field.
func StlCurrencyIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlCurrency)))
	})
}

// StlCurrencyNotNil applies the NotNil predicate on the "stl_currency" field.
func StlCurrencyNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlCurrency)))
	})
}

// StlCurrencyEqualFold applies the EqualFold predicate on the "stl_currency" field.
func StlCurrencyEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStlCurrency), v))
	})
}

// StlCurrencyContainsFold applies the ContainsFold predicate on the "stl_currency" field.
func StlCurrencyContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStlCurrency), v))
	})
}

// StlAmountEQ applies the EQ predicate on the "stl_amount" field.
func StlAmountEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlAmount), v))
	})
}

// StlAmountNEQ applies the NEQ predicate on the "stl_amount" field.
func StlAmountNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlAmount), v))
	})
}

// StlAmountIn applies the In predicate on the "stl_amount" field.
func StlAmountIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlAmount), v...))
	})
}

// StlAmountNotIn applies the NotIn predicate on the "stl_amount" field.
func StlAmountNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlAmount), v...))
	})
}

// StlAmountGT applies the GT predicate on the "stl_amount" field.
func StlAmountGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlAmount), v))
	})
}

// StlAmountGTE applies the GTE predicate on the "stl_amount" field.
func StlAmountGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlAmount), v))
	})
}

// StlAmountLT applies the LT predicate on the "stl_amount" field.
func StlAmountLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlAmount), v))
	})
}

// StlAmountLTE applies the LTE predicate on the "stl_amount" field.
func StlAmountLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlAmount), v))
	})
}

// StlAmountIsNil applies the IsNil predicate on the "stl_amount" field.
func StlAmountIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlAmount)))
	})
}

// StlAmountNotNil applies the NotNil predicate on the "stl_amount" field.
func StlAmountNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlAmount)))
	})
}

// StlCostEQ applies the EQ predicate on the "stl_cost" field.
func StlCostEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCost), v))
	})
}

// StlCostNEQ applies the NEQ predicate on the "stl_cost" field.
func StlCostNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlCost), v))
	})
}

// StlCostIn applies the In predicate on the "stl_cost" field.
func StlCostIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlCost), v...))
	})
}

// StlCostNotIn applies the NotIn predicate on the "stl_cost" field.
func StlCostNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlCost), v...))
	})
}

// StlCostGT applies the GT predicate on the "stl_cost" field.
func StlCostGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlCost), v))
	})
}

// StlCostGTE applies the GTE predicate on the "stl_cost" field.
func StlCostGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlCost), v))
	})
}

// StlCostLT applies the LT predicate on the "stl_cost" field.
func StlCostLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlCost), v))
	})
}

// StlCostLTE applies the LTE predicate on the "stl_cost" field.
func StlCostLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlCost), v))
	})
}

// StlCostIsNil applies the IsNil predicate on the "stl_cost" field.
func StlCostIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlCost)))
	})
}

// StlCostNotNil applies the NotNil predicate on the "stl_cost" field.
func StlCostNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlCost)))
	})
}

// StlMarginEQ applies the EQ predicate on the "stl_margin" field.
func StlMarginEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMargin), v))
	})
}

// StlMarginNEQ applies the NEQ predicate on the "stl_margin" field.
func StlMarginNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlMargin), v))
	})
}

// StlMarginIn applies the In predicate on the "stl_margin" field.
func StlMarginIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlMargin), v...))
	})
}

// StlMarginNotIn applies the NotIn predicate on the "stl_margin" field.
func StlMarginNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlMargin), v...))
	})
}

// StlMarginGT applies the GT predicate on the "stl_margin" field.
func StlMarginGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlMargin), v))
	})
}

// StlMarginGTE applies the GTE predicate on the "stl_margin" field.
func StlMarginGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlMargin), v))
	})
}

// StlMarginLT applies the LT predicate on the "stl_margin" field.
func StlMarginLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlMargin), v))
	})
}

// StlMarginLTE applies the LTE predicate on the "stl_margin" field.
func StlMarginLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlMargin), v))
	})
}

// StlMarginIsNil applies the IsNil predicate on the "stl_margin" field.
func StlMarginIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlMargin)))
	})
}

// StlMarginNotNil applies the NotNil predicate on the "stl_margin" field.
func StlMarginNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlMargin)))
	})
}

// StlCostAmountEQ applies the EQ predicate on the "stl_cost_amount" field.
func StlCostAmountEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountNEQ applies the NEQ predicate on the "stl_cost_amount" field.
func StlCostAmountNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountIn applies the In predicate on the "stl_cost_amount" field.
func StlCostAmountIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlCostAmount), v...))
	})
}

// StlCostAmountNotIn applies the NotIn predicate on the "stl_cost_amount" field.
func StlCostAmountNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlCostAmount), v...))
	})
}

// StlCostAmountGT applies the GT predicate on the "stl_cost_amount" field.
func StlCostAmountGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountGTE applies the GTE predicate on the "stl_cost_amount" field.
func StlCostAmountGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountLT applies the LT predicate on the "stl_cost_amount" field.
func StlCostAmountLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountLTE applies the LTE predicate on the "stl_cost_amount" field.
func StlCostAmountLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlCostAmount), v))
	})
}

// StlCostAmountIsNil applies the IsNil predicate on the "stl_cost_amount" field.
func StlCostAmountIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlCostAmount)))
	})
}

// StlCostAmountNotNil applies the NotNil predicate on the "stl_cost_amount" field.
func StlCostAmountNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlCostAmount)))
	})
}

// StlMarginLvEQ applies the EQ predicate on the "stl_margin_lv" field.
func StlMarginLvEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvNEQ applies the NEQ predicate on the "stl_margin_lv" field.
func StlMarginLvNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvIn applies the In predicate on the "stl_margin_lv" field.
func StlMarginLvIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlMarginLv), v...))
	})
}

// StlMarginLvNotIn applies the NotIn predicate on the "stl_margin_lv" field.
func StlMarginLvNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlMarginLv), v...))
	})
}

// StlMarginLvGT applies the GT predicate on the "stl_margin_lv" field.
func StlMarginLvGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvGTE applies the GTE predicate on the "stl_margin_lv" field.
func StlMarginLvGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvLT applies the LT predicate on the "stl_margin_lv" field.
func StlMarginLvLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvLTE applies the LTE predicate on the "stl_margin_lv" field.
func StlMarginLvLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlMarginLv), v))
	})
}

// StlMarginLvIsNil applies the IsNil predicate on the "stl_margin_lv" field.
func StlMarginLvIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlMarginLv)))
	})
}

// StlMarginLvNotNil applies the NotNil predicate on the "stl_margin_lv" field.
func StlMarginLvNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlMarginLv)))
	})
}

// StlValPriceEQ applies the EQ predicate on the "stl_val_price" field.
func StlValPriceEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceNEQ applies the NEQ predicate on the "stl_val_price" field.
func StlValPriceNEQ(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceIn applies the In predicate on the "stl_val_price" field.
func StlValPriceIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStlValPrice), v...))
	})
}

// StlValPriceNotIn applies the NotIn predicate on the "stl_val_price" field.
func StlValPriceNotIn(vs ...float64) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStlValPrice), v...))
	})
}

// StlValPriceGT applies the GT predicate on the "stl_val_price" field.
func StlValPriceGT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceGTE applies the GTE predicate on the "stl_val_price" field.
func StlValPriceGTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceLT applies the LT predicate on the "stl_val_price" field.
func StlValPriceLT(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceLTE applies the LTE predicate on the "stl_val_price" field.
func StlValPriceLTE(v float64) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStlValPrice), v))
	})
}

// StlValPriceIsNil applies the IsNil predicate on the "stl_val_price" field.
func StlValPriceIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStlValPrice)))
	})
}

// StlValPriceNotNil applies the NotNil predicate on the "stl_val_price" field.
func StlValPriceNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStlValPrice)))
	})
}

// InvalidAtEQ applies the EQ predicate on the "invalid_at" field.
func InvalidAtEQ(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtNEQ applies the NEQ predicate on the "invalid_at" field.
func InvalidAtNEQ(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtIn applies the In predicate on the "invalid_at" field.
func InvalidAtIn(vs ...time.Time) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInvalidAt), v...))
	})
}

// InvalidAtNotIn applies the NotIn predicate on the "invalid_at" field.
func InvalidAtNotIn(vs ...time.Time) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInvalidAt), v...))
	})
}

// InvalidAtGT applies the GT predicate on the "invalid_at" field.
func InvalidAtGT(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtGTE applies the GTE predicate on the "invalid_at" field.
func InvalidAtGTE(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtLT applies the LT predicate on the "invalid_at" field.
func InvalidAtLT(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtLTE applies the LTE predicate on the "invalid_at" field.
func InvalidAtLTE(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInvalidAt), v))
	})
}

// InvalidAtIsNil applies the IsNil predicate on the "invalid_at" field.
func InvalidAtIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInvalidAt)))
	})
}

// InvalidAtNotNil applies the NotNil predicate on the "invalid_at" field.
func InvalidAtNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInvalidAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UniqueTagEQ applies the EQ predicate on the "unique_tag" field.
func UniqueTagEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagNEQ applies the NEQ predicate on the "unique_tag" field.
func UniqueTagNEQ(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagIn applies the In predicate on the "unique_tag" field.
func UniqueTagIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUniqueTag), v...))
	})
}

// UniqueTagNotIn applies the NotIn predicate on the "unique_tag" field.
func UniqueTagNotIn(vs ...string) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUniqueTag), v...))
	})
}

// UniqueTagGT applies the GT predicate on the "unique_tag" field.
func UniqueTagGT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagGTE applies the GTE predicate on the "unique_tag" field.
func UniqueTagGTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagLT applies the LT predicate on the "unique_tag" field.
func UniqueTagLT(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagLTE applies the LTE predicate on the "unique_tag" field.
func UniqueTagLTE(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagContains applies the Contains predicate on the "unique_tag" field.
func UniqueTagContains(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagHasPrefix applies the HasPrefix predicate on the "unique_tag" field.
func UniqueTagHasPrefix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagHasSuffix applies the HasSuffix predicate on the "unique_tag" field.
func UniqueTagHasSuffix(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagIsNil applies the IsNil predicate on the "unique_tag" field.
func UniqueTagIsNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUniqueTag)))
	})
}

// UniqueTagNotNil applies the NotNil predicate on the "unique_tag" field.
func UniqueTagNotNil() predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUniqueTag)))
	})
}

// UniqueTagEqualFold applies the EqualFold predicate on the "unique_tag" field.
func UniqueTagEqualFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUniqueTag), v))
	})
}

// UniqueTagContainsFold applies the ContainsFold predicate on the "unique_tag" field.
func UniqueTagContainsFold(v string) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUniqueTag), v))
	})
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgID), v))
	})
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrgID), v...))
	})
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.SecurityPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SecurityPosition(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrgID), v...))
	})
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrgID), v))
	})
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrgID), v))
	})
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrgID), v))
	})
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v int) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrgID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SecurityPosition) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SecurityPosition) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SecurityPosition) predicate.SecurityPosition {
	return predicate.SecurityPosition(func(s *sql.Selector) {
		p(s.Not())
	})
}
