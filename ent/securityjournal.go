// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/bug/ent/securityjournal"
	"entgo.io/ent/dialect/sql"
)

// SecurityJournal is the model entity for the SecurityJournal schema.
type SecurityJournal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SecurityAccountID holds the value of the "security_account_id" field.
	SecurityAccountID int `json:"security_account_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// BizNo holds the value of the "biz_no" field.
	BizNo *string `json:"biz_no,omitempty"`
	// BizType holds the value of the "biz_type" field.
	BizType *string `json:"biz_type,omitempty"`
	// 运营组织
	OrgID int `json:"org_id,omitempty"`
	// TradeCode holds the value of the "trade_code" field.
	TradeCode *string `json:"trade_code,omitempty"`
	// ChangeType holds the value of the "change_type" field.
	ChangeType *string `json:"change_type,omitempty"`
	// 记账请求类型
	RecordMethodID *int `json:"record_method_id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// MaterialID holds the value of the "material_id" field.
	MaterialID int `json:"material_id,omitempty"`
	// MaterialNo holds the value of the "material_no" field.
	MaterialNo *string `json:"material_no,omitempty"`
	// MaterialName holds the value of the "material_name" field.
	MaterialName *string `json:"material_name,omitempty"`
	// Multiplier holds the value of the "multiplier" field.
	Multiplier float64 `json:"multiplier,omitempty"`
	// PositionType holds the value of the "position_type" field.
	PositionType int `json:"position_type,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency *string `json:"currency,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty float64 `json:"qty,omitempty"`
	// Price holds the value of the "price" field.
	Price *float64 `json:"price,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount *float64 `json:"amount,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost *float64 `json:"cost,omitempty"`
	// Total holds the value of the "total" field.
	Total *float64 `json:"total,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit *string `json:"unit,omitempty"`
	// Spec holds the value of the "spec" field.
	Spec *string `json:"spec,omitempty"`
	// Commission holds the value of the "commission" field.
	Commission *float64 `json:"commission,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee *float64 `json:"fee,omitempty"`
	// FeeOther holds the value of the "fee_other" field.
	FeeOther *float64 `json:"fee_other,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// Direction holds the value of the "direction" field.
	Direction *int `json:"direction,omitempty"`
	// Tamper holds the value of the "tamper" field.
	Tamper *string `json:"tamper,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary *string `json:"summary,omitempty"`
	// PairSubjectCode holds the value of the "pair_subject_code" field.
	PairSubjectCode *string `json:"pair_subject_code,omitempty"`
	// PairSecurityAccountID holds the value of the "pair_security_account_id" field.
	PairSecurityAccountID *int `json:"pair_security_account_id,omitempty"`
	// LastBalance holds the value of the "last_balance" field.
	LastBalance *float64 `json:"last_balance,omitempty"`
	// StlTime holds the value of the "stl_time" field.
	StlTime *time.Time `json:"stl_time,omitempty"`
	// FxRate holds the value of the "fx_rate" field.
	FxRate *float64 `json:"fx_rate,omitempty"`
	// StlCurrency holds the value of the "stl_currency" field.
	StlCurrency *string `json:"stl_currency,omitempty"`
	// StlAmount holds the value of the "stl_amount" field.
	StlAmount *float64 `json:"stl_amount,omitempty"`
	// StlMarginLv holds the value of the "stl_margin_lv" field.
	StlMarginLv *float64 `json:"stl_margin_lv,omitempty"`
	// IsSettlement holds the value of the "is_settlement" field.
	IsSettlement string `json:"is_settlement,omitempty"`
	// ActualStlTime holds the value of the "actual_stl_time" field.
	ActualStlTime *time.Time `json:"actual_stl_time,omitempty"`
	// TransNo holds the value of the "trans_no" field.
	TransNo *string `json:"trans_no,omitempty"`
	// TransTime holds the value of the "trans_time" field.
	TransTime *time.Time `json:"trans_time,omitempty"`
	// AccountingNo holds the value of the "accounting_no" field.
	AccountingNo *string `json:"accounting_no,omitempty"`
	// AccountingTime holds the value of the "accounting_time" field.
	AccountingTime *time.Time `json:"accounting_time,omitempty"`
	// AccountedPositionQty holds the value of the "accounted_position_qty" field.
	AccountedPositionQty *float64 `json:"accounted_position_qty,omitempty"`
	// CdDirection holds the value of the "cd_direction" field.
	CdDirection *int `json:"cd_direction,omitempty"`
	// ApplyFields holds the value of the "apply_fields" field.
	ApplyFields *string `json:"apply_fields,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// RefTransNo holds the value of the "ref_trans_no" field.
	RefTransNo *string `json:"ref_trans_no,omitempty"`
	// IsDayBooking holds the value of the "is_day_booking" field.
	IsDayBooking *string `json:"is_day_booking,omitempty"`
	// IsEffectFund holds the value of the "is_effect_fund" field.
	IsEffectFund string `json:"is_effect_fund,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SecurityJournal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case securityjournal.FieldMultiplier, securityjournal.FieldQty, securityjournal.FieldPrice, securityjournal.FieldAmount, securityjournal.FieldCost, securityjournal.FieldTotal, securityjournal.FieldCommission, securityjournal.FieldFee, securityjournal.FieldFeeOther, securityjournal.FieldLastBalance, securityjournal.FieldFxRate, securityjournal.FieldStlAmount, securityjournal.FieldStlMarginLv, securityjournal.FieldAccountedPositionQty:
			values[i] = new(sql.NullFloat64)
		case securityjournal.FieldID, securityjournal.FieldSecurityAccountID, securityjournal.FieldAccountID, securityjournal.FieldOrgID, securityjournal.FieldRecordMethodID, securityjournal.FieldProjectID, securityjournal.FieldProductID, securityjournal.FieldMaterialID, securityjournal.FieldPositionType, securityjournal.FieldCount, securityjournal.FieldDirection, securityjournal.FieldPairSecurityAccountID, securityjournal.FieldCdDirection:
			values[i] = new(sql.NullInt64)
		case securityjournal.FieldBizNo, securityjournal.FieldBizType, securityjournal.FieldTradeCode, securityjournal.FieldChangeType, securityjournal.FieldMaterialNo, securityjournal.FieldMaterialName, securityjournal.FieldCurrency, securityjournal.FieldUnit, securityjournal.FieldSpec, securityjournal.FieldTamper, securityjournal.FieldSummary, securityjournal.FieldPairSubjectCode, securityjournal.FieldStlCurrency, securityjournal.FieldIsSettlement, securityjournal.FieldTransNo, securityjournal.FieldAccountingNo, securityjournal.FieldApplyFields, securityjournal.FieldRefTransNo, securityjournal.FieldIsDayBooking, securityjournal.FieldIsEffectFund:
			values[i] = new(sql.NullString)
		case securityjournal.FieldStlTime, securityjournal.FieldActualStlTime, securityjournal.FieldTransTime, securityjournal.FieldAccountingTime, securityjournal.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SecurityJournal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SecurityJournal fields.
func (sj *SecurityJournal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case securityjournal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sj.ID = int(value.Int64)
		case securityjournal.FieldSecurityAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field security_account_id", values[i])
			} else if value.Valid {
				sj.SecurityAccountID = int(value.Int64)
			}
		case securityjournal.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				sj.AccountID = int(value.Int64)
			}
		case securityjournal.FieldBizNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_no", values[i])
			} else if value.Valid {
				sj.BizNo = new(string)
				*sj.BizNo = value.String
			}
		case securityjournal.FieldBizType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_type", values[i])
			} else if value.Valid {
				sj.BizType = new(string)
				*sj.BizType = value.String
			}
		case securityjournal.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				sj.OrgID = int(value.Int64)
			}
		case securityjournal.FieldTradeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_code", values[i])
			} else if value.Valid {
				sj.TradeCode = new(string)
				*sj.TradeCode = value.String
			}
		case securityjournal.FieldChangeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_type", values[i])
			} else if value.Valid {
				sj.ChangeType = new(string)
				*sj.ChangeType = value.String
			}
		case securityjournal.FieldRecordMethodID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_method_id", values[i])
			} else if value.Valid {
				sj.RecordMethodID = new(int)
				*sj.RecordMethodID = int(value.Int64)
			}
		case securityjournal.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				sj.ProjectID = int(value.Int64)
			}
		case securityjournal.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				sj.ProductID = int(value.Int64)
			}
		case securityjournal.FieldMaterialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_id", values[i])
			} else if value.Valid {
				sj.MaterialID = int(value.Int64)
			}
		case securityjournal.FieldMaterialNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material_no", values[i])
			} else if value.Valid {
				sj.MaterialNo = new(string)
				*sj.MaterialNo = value.String
			}
		case securityjournal.FieldMaterialName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material_name", values[i])
			} else if value.Valid {
				sj.MaterialName = new(string)
				*sj.MaterialName = value.String
			}
		case securityjournal.FieldMultiplier:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field multiplier", values[i])
			} else if value.Valid {
				sj.Multiplier = value.Float64
			}
		case securityjournal.FieldPositionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position_type", values[i])
			} else if value.Valid {
				sj.PositionType = int(value.Int64)
			}
		case securityjournal.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				sj.Currency = new(string)
				*sj.Currency = value.String
			}
		case securityjournal.FieldQty:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				sj.Qty = value.Float64
			}
		case securityjournal.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				sj.Price = new(float64)
				*sj.Price = value.Float64
			}
		case securityjournal.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				sj.Amount = new(float64)
				*sj.Amount = value.Float64
			}
		case securityjournal.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				sj.Cost = new(float64)
				*sj.Cost = value.Float64
			}
		case securityjournal.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				sj.Total = new(float64)
				*sj.Total = value.Float64
			}
		case securityjournal.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				sj.Unit = new(string)
				*sj.Unit = value.String
			}
		case securityjournal.FieldSpec:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value.Valid {
				sj.Spec = new(string)
				*sj.Spec = value.String
			}
		case securityjournal.FieldCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				sj.Commission = new(float64)
				*sj.Commission = value.Float64
			}
		case securityjournal.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				sj.Fee = new(float64)
				*sj.Fee = value.Float64
			}
		case securityjournal.FieldFeeOther:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee_other", values[i])
			} else if value.Valid {
				sj.FeeOther = new(float64)
				*sj.FeeOther = value.Float64
			}
		case securityjournal.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				sj.Count = int(value.Int64)
			}
		case securityjournal.FieldDirection:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field direction", values[i])
			} else if value.Valid {
				sj.Direction = new(int)
				*sj.Direction = int(value.Int64)
			}
		case securityjournal.FieldTamper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tamper", values[i])
			} else if value.Valid {
				sj.Tamper = new(string)
				*sj.Tamper = value.String
			}
		case securityjournal.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				sj.Summary = new(string)
				*sj.Summary = value.String
			}
		case securityjournal.FieldPairSubjectCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pair_subject_code", values[i])
			} else if value.Valid {
				sj.PairSubjectCode = new(string)
				*sj.PairSubjectCode = value.String
			}
		case securityjournal.FieldPairSecurityAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pair_security_account_id", values[i])
			} else if value.Valid {
				sj.PairSecurityAccountID = new(int)
				*sj.PairSecurityAccountID = int(value.Int64)
			}
		case securityjournal.FieldLastBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field last_balance", values[i])
			} else if value.Valid {
				sj.LastBalance = new(float64)
				*sj.LastBalance = value.Float64
			}
		case securityjournal.FieldStlTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stl_time", values[i])
			} else if value.Valid {
				sj.StlTime = new(time.Time)
				*sj.StlTime = value.Time
			}
		case securityjournal.FieldFxRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fx_rate", values[i])
			} else if value.Valid {
				sj.FxRate = new(float64)
				*sj.FxRate = value.Float64
			}
		case securityjournal.FieldStlCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stl_currency", values[i])
			} else if value.Valid {
				sj.StlCurrency = new(string)
				*sj.StlCurrency = value.String
			}
		case securityjournal.FieldStlAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stl_amount", values[i])
			} else if value.Valid {
				sj.StlAmount = new(float64)
				*sj.StlAmount = value.Float64
			}
		case securityjournal.FieldStlMarginLv:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stl_margin_lv", values[i])
			} else if value.Valid {
				sj.StlMarginLv = new(float64)
				*sj.StlMarginLv = value.Float64
			}
		case securityjournal.FieldIsSettlement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_settlement", values[i])
			} else if value.Valid {
				sj.IsSettlement = value.String
			}
		case securityjournal.FieldActualStlTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_stl_time", values[i])
			} else if value.Valid {
				sj.ActualStlTime = new(time.Time)
				*sj.ActualStlTime = value.Time
			}
		case securityjournal.FieldTransNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trans_no", values[i])
			} else if value.Valid {
				sj.TransNo = new(string)
				*sj.TransNo = value.String
			}
		case securityjournal.FieldTransTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trans_time", values[i])
			} else if value.Valid {
				sj.TransTime = new(time.Time)
				*sj.TransTime = value.Time
			}
		case securityjournal.FieldAccountingNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accounting_no", values[i])
			} else if value.Valid {
				sj.AccountingNo = new(string)
				*sj.AccountingNo = value.String
			}
		case securityjournal.FieldAccountingTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field accounting_time", values[i])
			} else if value.Valid {
				sj.AccountingTime = new(time.Time)
				*sj.AccountingTime = value.Time
			}
		case securityjournal.FieldAccountedPositionQty:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field accounted_position_qty", values[i])
			} else if value.Valid {
				sj.AccountedPositionQty = new(float64)
				*sj.AccountedPositionQty = value.Float64
			}
		case securityjournal.FieldCdDirection:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cd_direction", values[i])
			} else if value.Valid {
				sj.CdDirection = new(int)
				*sj.CdDirection = int(value.Int64)
			}
		case securityjournal.FieldApplyFields:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field apply_fields", values[i])
			} else if value.Valid {
				sj.ApplyFields = new(string)
				*sj.ApplyFields = value.String
			}
		case securityjournal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sj.CreatedAt = new(time.Time)
				*sj.CreatedAt = value.Time
			}
		case securityjournal.FieldRefTransNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_trans_no", values[i])
			} else if value.Valid {
				sj.RefTransNo = new(string)
				*sj.RefTransNo = value.String
			}
		case securityjournal.FieldIsDayBooking:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_day_booking", values[i])
			} else if value.Valid {
				sj.IsDayBooking = new(string)
				*sj.IsDayBooking = value.String
			}
		case securityjournal.FieldIsEffectFund:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_effect_fund", values[i])
			} else if value.Valid {
				sj.IsEffectFund = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SecurityJournal.
// Note that you need to call SecurityJournal.Unwrap() before calling this method if this SecurityJournal
// was returned from a transaction, and the transaction was committed or rolled back.
func (sj *SecurityJournal) Update() *SecurityJournalUpdateOne {
	return (&SecurityJournalClient{config: sj.config}).UpdateOne(sj)
}

// Unwrap unwraps the SecurityJournal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sj *SecurityJournal) Unwrap() *SecurityJournal {
	_tx, ok := sj.config.driver.(*txDriver)
	if !ok {
		panic("ent: SecurityJournal is not a transactional entity")
	}
	sj.config.driver = _tx.drv
	return sj
}

// String implements the fmt.Stringer.
func (sj *SecurityJournal) String() string {
	var builder strings.Builder
	builder.WriteString("SecurityJournal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sj.ID))
	builder.WriteString("security_account_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.SecurityAccountID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.AccountID))
	builder.WriteString(", ")
	if v := sj.BizNo; v != nil {
		builder.WriteString("biz_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.BizType; v != nil {
		builder.WriteString("biz_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.OrgID))
	builder.WriteString(", ")
	if v := sj.TradeCode; v != nil {
		builder.WriteString("trade_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.ChangeType; v != nil {
		builder.WriteString("change_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.RecordMethodID; v != nil {
		builder.WriteString("record_method_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.ProductID))
	builder.WriteString(", ")
	builder.WriteString("material_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.MaterialID))
	builder.WriteString(", ")
	if v := sj.MaterialNo; v != nil {
		builder.WriteString("material_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.MaterialName; v != nil {
		builder.WriteString("material_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("multiplier=")
	builder.WriteString(fmt.Sprintf("%v", sj.Multiplier))
	builder.WriteString(", ")
	builder.WriteString("position_type=")
	builder.WriteString(fmt.Sprintf("%v", sj.PositionType))
	builder.WriteString(", ")
	if v := sj.Currency; v != nil {
		builder.WriteString("currency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", sj.Qty))
	builder.WriteString(", ")
	if v := sj.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Amount; v != nil {
		builder.WriteString("amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Cost; v != nil {
		builder.WriteString("cost=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Total; v != nil {
		builder.WriteString("total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Unit; v != nil {
		builder.WriteString("unit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.Spec; v != nil {
		builder.WriteString("spec=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.Commission; v != nil {
		builder.WriteString("commission=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Fee; v != nil {
		builder.WriteString("fee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.FeeOther; v != nil {
		builder.WriteString("fee_other=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", sj.Count))
	builder.WriteString(", ")
	if v := sj.Direction; v != nil {
		builder.WriteString("direction=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.Tamper; v != nil {
		builder.WriteString("tamper=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.Summary; v != nil {
		builder.WriteString("summary=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.PairSubjectCode; v != nil {
		builder.WriteString("pair_subject_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.PairSecurityAccountID; v != nil {
		builder.WriteString("pair_security_account_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.LastBalance; v != nil {
		builder.WriteString("last_balance=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.StlTime; v != nil {
		builder.WriteString("stl_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.FxRate; v != nil {
		builder.WriteString("fx_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.StlCurrency; v != nil {
		builder.WriteString("stl_currency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.StlAmount; v != nil {
		builder.WriteString("stl_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.StlMarginLv; v != nil {
		builder.WriteString("stl_margin_lv=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_settlement=")
	builder.WriteString(sj.IsSettlement)
	builder.WriteString(", ")
	if v := sj.ActualStlTime; v != nil {
		builder.WriteString("actual_stl_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.TransNo; v != nil {
		builder.WriteString("trans_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.TransTime; v != nil {
		builder.WriteString("trans_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.AccountingNo; v != nil {
		builder.WriteString("accounting_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.AccountingTime; v != nil {
		builder.WriteString("accounting_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.AccountedPositionQty; v != nil {
		builder.WriteString("accounted_position_qty=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.CdDirection; v != nil {
		builder.WriteString("cd_direction=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sj.ApplyFields; v != nil {
		builder.WriteString("apply_fields=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.RefTransNo; v != nil {
		builder.WriteString("ref_trans_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sj.IsDayBooking; v != nil {
		builder.WriteString("is_day_booking=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_effect_fund=")
	builder.WriteString(sj.IsEffectFund)
	builder.WriteByte(')')
	return builder.String()
}

// SecurityJournals is a parsable slice of SecurityJournal.
type SecurityJournals []*SecurityJournal

func (sj SecurityJournals) config(cfg config) {
	for _i := range sj {
		sj[_i].config = cfg
	}
}
