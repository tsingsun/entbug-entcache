// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/securityjournal"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SecurityJournalCreate is the builder for creating a SecurityJournal entity.
type SecurityJournalCreate struct {
	config
	mutation *SecurityJournalMutation
	hooks    []Hook
}

// SetSecurityAccountID sets the "security_account_id" field.
func (sjc *SecurityJournalCreate) SetSecurityAccountID(i int) *SecurityJournalCreate {
	sjc.mutation.SetSecurityAccountID(i)
	return sjc
}

// SetAccountID sets the "account_id" field.
func (sjc *SecurityJournalCreate) SetAccountID(i int) *SecurityJournalCreate {
	sjc.mutation.SetAccountID(i)
	return sjc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableAccountID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetAccountID(*i)
	}
	return sjc
}

// SetBizNo sets the "biz_no" field.
func (sjc *SecurityJournalCreate) SetBizNo(s string) *SecurityJournalCreate {
	sjc.mutation.SetBizNo(s)
	return sjc
}

// SetNillableBizNo sets the "biz_no" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableBizNo(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetBizNo(*s)
	}
	return sjc
}

// SetBizType sets the "biz_type" field.
func (sjc *SecurityJournalCreate) SetBizType(s string) *SecurityJournalCreate {
	sjc.mutation.SetBizType(s)
	return sjc
}

// SetNillableBizType sets the "biz_type" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableBizType(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetBizType(*s)
	}
	return sjc
}

// SetOrgID sets the "org_id" field.
func (sjc *SecurityJournalCreate) SetOrgID(i int) *SecurityJournalCreate {
	sjc.mutation.SetOrgID(i)
	return sjc
}

// SetTradeCode sets the "trade_code" field.
func (sjc *SecurityJournalCreate) SetTradeCode(s string) *SecurityJournalCreate {
	sjc.mutation.SetTradeCode(s)
	return sjc
}

// SetNillableTradeCode sets the "trade_code" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableTradeCode(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetTradeCode(*s)
	}
	return sjc
}

// SetChangeType sets the "change_type" field.
func (sjc *SecurityJournalCreate) SetChangeType(s string) *SecurityJournalCreate {
	sjc.mutation.SetChangeType(s)
	return sjc
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableChangeType(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetChangeType(*s)
	}
	return sjc
}

// SetRecordMethodID sets the "record_method_id" field.
func (sjc *SecurityJournalCreate) SetRecordMethodID(i int) *SecurityJournalCreate {
	sjc.mutation.SetRecordMethodID(i)
	return sjc
}

// SetNillableRecordMethodID sets the "record_method_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableRecordMethodID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetRecordMethodID(*i)
	}
	return sjc
}

// SetProjectID sets the "project_id" field.
func (sjc *SecurityJournalCreate) SetProjectID(i int) *SecurityJournalCreate {
	sjc.mutation.SetProjectID(i)
	return sjc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableProjectID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetProjectID(*i)
	}
	return sjc
}

// SetProductID sets the "product_id" field.
func (sjc *SecurityJournalCreate) SetProductID(i int) *SecurityJournalCreate {
	sjc.mutation.SetProductID(i)
	return sjc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableProductID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetProductID(*i)
	}
	return sjc
}

// SetMaterialID sets the "material_id" field.
func (sjc *SecurityJournalCreate) SetMaterialID(i int) *SecurityJournalCreate {
	sjc.mutation.SetMaterialID(i)
	return sjc
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableMaterialID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetMaterialID(*i)
	}
	return sjc
}

// SetMaterialNo sets the "material_no" field.
func (sjc *SecurityJournalCreate) SetMaterialNo(s string) *SecurityJournalCreate {
	sjc.mutation.SetMaterialNo(s)
	return sjc
}

// SetNillableMaterialNo sets the "material_no" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableMaterialNo(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetMaterialNo(*s)
	}
	return sjc
}

// SetMaterialName sets the "material_name" field.
func (sjc *SecurityJournalCreate) SetMaterialName(s string) *SecurityJournalCreate {
	sjc.mutation.SetMaterialName(s)
	return sjc
}

// SetNillableMaterialName sets the "material_name" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableMaterialName(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetMaterialName(*s)
	}
	return sjc
}

// SetMultiplier sets the "multiplier" field.
func (sjc *SecurityJournalCreate) SetMultiplier(f float64) *SecurityJournalCreate {
	sjc.mutation.SetMultiplier(f)
	return sjc
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableMultiplier(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetMultiplier(*f)
	}
	return sjc
}

// SetPositionType sets the "position_type" field.
func (sjc *SecurityJournalCreate) SetPositionType(i int) *SecurityJournalCreate {
	sjc.mutation.SetPositionType(i)
	return sjc
}

// SetNillablePositionType sets the "position_type" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillablePositionType(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetPositionType(*i)
	}
	return sjc
}

// SetCurrency sets the "currency" field.
func (sjc *SecurityJournalCreate) SetCurrency(s string) *SecurityJournalCreate {
	sjc.mutation.SetCurrency(s)
	return sjc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCurrency(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetCurrency(*s)
	}
	return sjc
}

// SetQty sets the "qty" field.
func (sjc *SecurityJournalCreate) SetQty(f float64) *SecurityJournalCreate {
	sjc.mutation.SetQty(f)
	return sjc
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableQty(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetQty(*f)
	}
	return sjc
}

// SetPrice sets the "price" field.
func (sjc *SecurityJournalCreate) SetPrice(f float64) *SecurityJournalCreate {
	sjc.mutation.SetPrice(f)
	return sjc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillablePrice(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetPrice(*f)
	}
	return sjc
}

// SetAmount sets the "amount" field.
func (sjc *SecurityJournalCreate) SetAmount(f float64) *SecurityJournalCreate {
	sjc.mutation.SetAmount(f)
	return sjc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableAmount(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetAmount(*f)
	}
	return sjc
}

// SetCost sets the "cost" field.
func (sjc *SecurityJournalCreate) SetCost(f float64) *SecurityJournalCreate {
	sjc.mutation.SetCost(f)
	return sjc
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCost(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetCost(*f)
	}
	return sjc
}

// SetTotal sets the "total" field.
func (sjc *SecurityJournalCreate) SetTotal(f float64) *SecurityJournalCreate {
	sjc.mutation.SetTotal(f)
	return sjc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableTotal(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetTotal(*f)
	}
	return sjc
}

// SetUnit sets the "unit" field.
func (sjc *SecurityJournalCreate) SetUnit(s string) *SecurityJournalCreate {
	sjc.mutation.SetUnit(s)
	return sjc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableUnit(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetUnit(*s)
	}
	return sjc
}

// SetSpec sets the "spec" field.
func (sjc *SecurityJournalCreate) SetSpec(s string) *SecurityJournalCreate {
	sjc.mutation.SetSpec(s)
	return sjc
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableSpec(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetSpec(*s)
	}
	return sjc
}

// SetCommission sets the "commission" field.
func (sjc *SecurityJournalCreate) SetCommission(f float64) *SecurityJournalCreate {
	sjc.mutation.SetCommission(f)
	return sjc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCommission(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetCommission(*f)
	}
	return sjc
}

// SetFee sets the "fee" field.
func (sjc *SecurityJournalCreate) SetFee(f float64) *SecurityJournalCreate {
	sjc.mutation.SetFee(f)
	return sjc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableFee(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetFee(*f)
	}
	return sjc
}

// SetFeeOther sets the "fee_other" field.
func (sjc *SecurityJournalCreate) SetFeeOther(f float64) *SecurityJournalCreate {
	sjc.mutation.SetFeeOther(f)
	return sjc
}

// SetNillableFeeOther sets the "fee_other" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableFeeOther(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetFeeOther(*f)
	}
	return sjc
}

// SetCount sets the "count" field.
func (sjc *SecurityJournalCreate) SetCount(i int) *SecurityJournalCreate {
	sjc.mutation.SetCount(i)
	return sjc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCount(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetCount(*i)
	}
	return sjc
}

// SetDirection sets the "direction" field.
func (sjc *SecurityJournalCreate) SetDirection(i int) *SecurityJournalCreate {
	sjc.mutation.SetDirection(i)
	return sjc
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableDirection(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetDirection(*i)
	}
	return sjc
}

// SetTamper sets the "tamper" field.
func (sjc *SecurityJournalCreate) SetTamper(s string) *SecurityJournalCreate {
	sjc.mutation.SetTamper(s)
	return sjc
}

// SetNillableTamper sets the "tamper" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableTamper(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetTamper(*s)
	}
	return sjc
}

// SetSummary sets the "summary" field.
func (sjc *SecurityJournalCreate) SetSummary(s string) *SecurityJournalCreate {
	sjc.mutation.SetSummary(s)
	return sjc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableSummary(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetSummary(*s)
	}
	return sjc
}

// SetPairSubjectCode sets the "pair_subject_code" field.
func (sjc *SecurityJournalCreate) SetPairSubjectCode(s string) *SecurityJournalCreate {
	sjc.mutation.SetPairSubjectCode(s)
	return sjc
}

// SetNillablePairSubjectCode sets the "pair_subject_code" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillablePairSubjectCode(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetPairSubjectCode(*s)
	}
	return sjc
}

// SetPairSecurityAccountID sets the "pair_security_account_id" field.
func (sjc *SecurityJournalCreate) SetPairSecurityAccountID(i int) *SecurityJournalCreate {
	sjc.mutation.SetPairSecurityAccountID(i)
	return sjc
}

// SetNillablePairSecurityAccountID sets the "pair_security_account_id" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillablePairSecurityAccountID(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetPairSecurityAccountID(*i)
	}
	return sjc
}

// SetLastBalance sets the "last_balance" field.
func (sjc *SecurityJournalCreate) SetLastBalance(f float64) *SecurityJournalCreate {
	sjc.mutation.SetLastBalance(f)
	return sjc
}

// SetNillableLastBalance sets the "last_balance" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableLastBalance(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetLastBalance(*f)
	}
	return sjc
}

// SetStlTime sets the "stl_time" field.
func (sjc *SecurityJournalCreate) SetStlTime(t time.Time) *SecurityJournalCreate {
	sjc.mutation.SetStlTime(t)
	return sjc
}

// SetNillableStlTime sets the "stl_time" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableStlTime(t *time.Time) *SecurityJournalCreate {
	if t != nil {
		sjc.SetStlTime(*t)
	}
	return sjc
}

// SetFxRate sets the "fx_rate" field.
func (sjc *SecurityJournalCreate) SetFxRate(f float64) *SecurityJournalCreate {
	sjc.mutation.SetFxRate(f)
	return sjc
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableFxRate(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetFxRate(*f)
	}
	return sjc
}

// SetStlCurrency sets the "stl_currency" field.
func (sjc *SecurityJournalCreate) SetStlCurrency(s string) *SecurityJournalCreate {
	sjc.mutation.SetStlCurrency(s)
	return sjc
}

// SetNillableStlCurrency sets the "stl_currency" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableStlCurrency(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetStlCurrency(*s)
	}
	return sjc
}

// SetStlAmount sets the "stl_amount" field.
func (sjc *SecurityJournalCreate) SetStlAmount(f float64) *SecurityJournalCreate {
	sjc.mutation.SetStlAmount(f)
	return sjc
}

// SetNillableStlAmount sets the "stl_amount" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableStlAmount(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetStlAmount(*f)
	}
	return sjc
}

// SetStlMarginLv sets the "stl_margin_lv" field.
func (sjc *SecurityJournalCreate) SetStlMarginLv(f float64) *SecurityJournalCreate {
	sjc.mutation.SetStlMarginLv(f)
	return sjc
}

// SetNillableStlMarginLv sets the "stl_margin_lv" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableStlMarginLv(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetStlMarginLv(*f)
	}
	return sjc
}

// SetIsSettlement sets the "is_settlement" field.
func (sjc *SecurityJournalCreate) SetIsSettlement(s string) *SecurityJournalCreate {
	sjc.mutation.SetIsSettlement(s)
	return sjc
}

// SetNillableIsSettlement sets the "is_settlement" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableIsSettlement(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetIsSettlement(*s)
	}
	return sjc
}

// SetActualStlTime sets the "actual_stl_time" field.
func (sjc *SecurityJournalCreate) SetActualStlTime(t time.Time) *SecurityJournalCreate {
	sjc.mutation.SetActualStlTime(t)
	return sjc
}

// SetNillableActualStlTime sets the "actual_stl_time" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableActualStlTime(t *time.Time) *SecurityJournalCreate {
	if t != nil {
		sjc.SetActualStlTime(*t)
	}
	return sjc
}

// SetTransNo sets the "trans_no" field.
func (sjc *SecurityJournalCreate) SetTransNo(s string) *SecurityJournalCreate {
	sjc.mutation.SetTransNo(s)
	return sjc
}

// SetNillableTransNo sets the "trans_no" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableTransNo(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetTransNo(*s)
	}
	return sjc
}

// SetTransTime sets the "trans_time" field.
func (sjc *SecurityJournalCreate) SetTransTime(t time.Time) *SecurityJournalCreate {
	sjc.mutation.SetTransTime(t)
	return sjc
}

// SetNillableTransTime sets the "trans_time" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableTransTime(t *time.Time) *SecurityJournalCreate {
	if t != nil {
		sjc.SetTransTime(*t)
	}
	return sjc
}

// SetAccountingNo sets the "accounting_no" field.
func (sjc *SecurityJournalCreate) SetAccountingNo(s string) *SecurityJournalCreate {
	sjc.mutation.SetAccountingNo(s)
	return sjc
}

// SetNillableAccountingNo sets the "accounting_no" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableAccountingNo(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetAccountingNo(*s)
	}
	return sjc
}

// SetAccountingTime sets the "accounting_time" field.
func (sjc *SecurityJournalCreate) SetAccountingTime(t time.Time) *SecurityJournalCreate {
	sjc.mutation.SetAccountingTime(t)
	return sjc
}

// SetNillableAccountingTime sets the "accounting_time" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableAccountingTime(t *time.Time) *SecurityJournalCreate {
	if t != nil {
		sjc.SetAccountingTime(*t)
	}
	return sjc
}

// SetAccountedPositionQty sets the "accounted_position_qty" field.
func (sjc *SecurityJournalCreate) SetAccountedPositionQty(f float64) *SecurityJournalCreate {
	sjc.mutation.SetAccountedPositionQty(f)
	return sjc
}

// SetNillableAccountedPositionQty sets the "accounted_position_qty" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableAccountedPositionQty(f *float64) *SecurityJournalCreate {
	if f != nil {
		sjc.SetAccountedPositionQty(*f)
	}
	return sjc
}

// SetCdDirection sets the "cd_direction" field.
func (sjc *SecurityJournalCreate) SetCdDirection(i int) *SecurityJournalCreate {
	sjc.mutation.SetCdDirection(i)
	return sjc
}

// SetNillableCdDirection sets the "cd_direction" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCdDirection(i *int) *SecurityJournalCreate {
	if i != nil {
		sjc.SetCdDirection(*i)
	}
	return sjc
}

// SetApplyFields sets the "apply_fields" field.
func (sjc *SecurityJournalCreate) SetApplyFields(s string) *SecurityJournalCreate {
	sjc.mutation.SetApplyFields(s)
	return sjc
}

// SetNillableApplyFields sets the "apply_fields" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableApplyFields(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetApplyFields(*s)
	}
	return sjc
}

// SetCreatedAt sets the "created_at" field.
func (sjc *SecurityJournalCreate) SetCreatedAt(t time.Time) *SecurityJournalCreate {
	sjc.mutation.SetCreatedAt(t)
	return sjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableCreatedAt(t *time.Time) *SecurityJournalCreate {
	if t != nil {
		sjc.SetCreatedAt(*t)
	}
	return sjc
}

// SetRefTransNo sets the "ref_trans_no" field.
func (sjc *SecurityJournalCreate) SetRefTransNo(s string) *SecurityJournalCreate {
	sjc.mutation.SetRefTransNo(s)
	return sjc
}

// SetNillableRefTransNo sets the "ref_trans_no" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableRefTransNo(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetRefTransNo(*s)
	}
	return sjc
}

// SetIsDayBooking sets the "is_day_booking" field.
func (sjc *SecurityJournalCreate) SetIsDayBooking(s string) *SecurityJournalCreate {
	sjc.mutation.SetIsDayBooking(s)
	return sjc
}

// SetNillableIsDayBooking sets the "is_day_booking" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableIsDayBooking(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetIsDayBooking(*s)
	}
	return sjc
}

// SetIsEffectFund sets the "is_effect_fund" field.
func (sjc *SecurityJournalCreate) SetIsEffectFund(s string) *SecurityJournalCreate {
	sjc.mutation.SetIsEffectFund(s)
	return sjc
}

// SetNillableIsEffectFund sets the "is_effect_fund" field if the given value is not nil.
func (sjc *SecurityJournalCreate) SetNillableIsEffectFund(s *string) *SecurityJournalCreate {
	if s != nil {
		sjc.SetIsEffectFund(*s)
	}
	return sjc
}

// SetID sets the "id" field.
func (sjc *SecurityJournalCreate) SetID(i int) *SecurityJournalCreate {
	sjc.mutation.SetID(i)
	return sjc
}

// Mutation returns the SecurityJournalMutation object of the builder.
func (sjc *SecurityJournalCreate) Mutation() *SecurityJournalMutation {
	return sjc.mutation
}

// Save creates the SecurityJournal in the database.
func (sjc *SecurityJournalCreate) Save(ctx context.Context) (*SecurityJournal, error) {
	var (
		err  error
		node *SecurityJournal
	)
	sjc.defaults()
	if len(sjc.hooks) == 0 {
		if err = sjc.check(); err != nil {
			return nil, err
		}
		node, err = sjc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityJournalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sjc.check(); err != nil {
				return nil, err
			}
			sjc.mutation = mutation
			if node, err = sjc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sjc.hooks) - 1; i >= 0; i-- {
			if sjc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sjc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sjc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SecurityJournal)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SecurityJournalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sjc *SecurityJournalCreate) SaveX(ctx context.Context) *SecurityJournal {
	v, err := sjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjc *SecurityJournalCreate) Exec(ctx context.Context) error {
	_, err := sjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjc *SecurityJournalCreate) ExecX(ctx context.Context) {
	if err := sjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjc *SecurityJournalCreate) defaults() {
	if _, ok := sjc.mutation.AccountID(); !ok {
		v := securityjournal.DefaultAccountID
		sjc.mutation.SetAccountID(v)
	}
	if _, ok := sjc.mutation.Qty(); !ok {
		v := securityjournal.DefaultQty
		sjc.mutation.SetQty(v)
	}
	if _, ok := sjc.mutation.Count(); !ok {
		v := securityjournal.DefaultCount
		sjc.mutation.SetCount(v)
	}
	if _, ok := sjc.mutation.IsSettlement(); !ok {
		v := securityjournal.DefaultIsSettlement
		sjc.mutation.SetIsSettlement(v)
	}
	if _, ok := sjc.mutation.IsEffectFund(); !ok {
		v := securityjournal.DefaultIsEffectFund
		sjc.mutation.SetIsEffectFund(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjc *SecurityJournalCreate) check() error {
	if _, ok := sjc.mutation.SecurityAccountID(); !ok {
		return &ValidationError{Name: "security_account_id", err: errors.New(`ent: missing required field "SecurityJournal.security_account_id"`)}
	}
	if v, ok := sjc.mutation.BizNo(); ok {
		if err := securityjournal.BizNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_no": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.BizType(); ok {
		if err := securityjournal.BizTypeValidator(v); err != nil {
			return &ValidationError{Name: "biz_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_type": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "SecurityJournal.org_id"`)}
	}
	if v, ok := sjc.mutation.TradeCode(); ok {
		if err := securityjournal.TradeCodeValidator(v); err != nil {
			return &ValidationError{Name: "trade_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trade_code": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.ChangeType(); ok {
		if err := securityjournal.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.change_type": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.MaterialNo(); ok {
		if err := securityjournal.MaterialNoValidator(v); err != nil {
			return &ValidationError{Name: "material_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_no": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.MaterialName(); ok {
		if err := securityjournal.MaterialNameValidator(v); err != nil {
			return &ValidationError{Name: "material_name", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_name": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.Currency(); ok {
		if err := securityjournal.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.currency": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.Unit(); ok {
		if err := securityjournal.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.unit": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.Spec(); ok {
		if err := securityjournal.SpecValidator(v); err != nil {
			return &ValidationError{Name: "spec", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.spec": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.Tamper(); ok {
		if err := securityjournal.TamperValidator(v); err != nil {
			return &ValidationError{Name: "tamper", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.tamper": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.Summary(); ok {
		if err := securityjournal.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.summary": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.PairSubjectCode(); ok {
		if err := securityjournal.PairSubjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "pair_subject_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.pair_subject_code": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.StlCurrency(); ok {
		if err := securityjournal.StlCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "stl_currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.stl_currency": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.IsSettlement(); ok {
		if err := securityjournal.IsSettlementValidator(v); err != nil {
			return &ValidationError{Name: "is_settlement", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_settlement": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.TransNo(); ok {
		if err := securityjournal.TransNoValidator(v); err != nil {
			return &ValidationError{Name: "trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trans_no": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.AccountingNo(); ok {
		if err := securityjournal.AccountingNoValidator(v); err != nil {
			return &ValidationError{Name: "accounting_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.accounting_no": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.RefTransNo(); ok {
		if err := securityjournal.RefTransNoValidator(v); err != nil {
			return &ValidationError{Name: "ref_trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.ref_trans_no": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.IsDayBooking(); ok {
		if err := securityjournal.IsDayBookingValidator(v); err != nil {
			return &ValidationError{Name: "is_day_booking", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_day_booking": %w`, err)}
		}
	}
	if v, ok := sjc.mutation.IsEffectFund(); ok {
		if err := securityjournal.IsEffectFundValidator(v); err != nil {
			return &ValidationError{Name: "is_effect_fund", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_effect_fund": %w`, err)}
		}
	}
	return nil
}

func (sjc *SecurityJournalCreate) sqlSave(ctx context.Context) (*SecurityJournal, error) {
	_node, _spec := sjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (sjc *SecurityJournalCreate) createSpec() (*SecurityJournal, *sqlgraph.CreateSpec) {
	var (
		_node = &SecurityJournal{config: sjc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: securityjournal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securityjournal.FieldID,
			},
		}
	)
	if id, ok := sjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjc.mutation.SecurityAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldSecurityAccountID,
		})
		_node.SecurityAccountID = value
	}
	if value, ok := sjc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := sjc.mutation.BizNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizNo,
		})
		_node.BizNo = &value
	}
	if value, ok := sjc.mutation.BizType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizType,
		})
		_node.BizType = &value
	}
	if value, ok := sjc.mutation.OrgID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldOrgID,
		})
		_node.OrgID = value
	}
	if value, ok := sjc.mutation.TradeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTradeCode,
		})
		_node.TradeCode = &value
	}
	if value, ok := sjc.mutation.ChangeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldChangeType,
		})
		_node.ChangeType = &value
	}
	if value, ok := sjc.mutation.RecordMethodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldRecordMethodID,
		})
		_node.RecordMethodID = &value
	}
	if value, ok := sjc.mutation.ProjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProjectID,
		})
		_node.ProjectID = value
	}
	if value, ok := sjc.mutation.ProductID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProductID,
		})
		_node.ProductID = value
	}
	if value, ok := sjc.mutation.MaterialID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldMaterialID,
		})
		_node.MaterialID = value
	}
	if value, ok := sjc.mutation.MaterialNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialNo,
		})
		_node.MaterialNo = &value
	}
	if value, ok := sjc.mutation.MaterialName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialName,
		})
		_node.MaterialName = &value
	}
	if value, ok := sjc.mutation.Multiplier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldMultiplier,
		})
		_node.Multiplier = value
	}
	if value, ok := sjc.mutation.PositionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPositionType,
		})
		_node.PositionType = value
	}
	if value, ok := sjc.mutation.Currency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldCurrency,
		})
		_node.Currency = &value
	}
	if value, ok := sjc.mutation.Qty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldQty,
		})
		_node.Qty = value
	}
	if value, ok := sjc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldPrice,
		})
		_node.Price = &value
	}
	if value, ok := sjc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAmount,
		})
		_node.Amount = &value
	}
	if value, ok := sjc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCost,
		})
		_node.Cost = &value
	}
	if value, ok := sjc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldTotal,
		})
		_node.Total = &value
	}
	if value, ok := sjc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldUnit,
		})
		_node.Unit = &value
	}
	if value, ok := sjc.mutation.Spec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSpec,
		})
		_node.Spec = &value
	}
	if value, ok := sjc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCommission,
		})
		_node.Commission = &value
	}
	if value, ok := sjc.mutation.Fee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFee,
		})
		_node.Fee = &value
	}
	if value, ok := sjc.mutation.FeeOther(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFeeOther,
		})
		_node.FeeOther = &value
	}
	if value, ok := sjc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := sjc.mutation.Direction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldDirection,
		})
		_node.Direction = &value
	}
	if value, ok := sjc.mutation.Tamper(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTamper,
		})
		_node.Tamper = &value
	}
	if value, ok := sjc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSummary,
		})
		_node.Summary = &value
	}
	if value, ok := sjc.mutation.PairSubjectCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldPairSubjectCode,
		})
		_node.PairSubjectCode = &value
	}
	if value, ok := sjc.mutation.PairSecurityAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
		_node.PairSecurityAccountID = &value
	}
	if value, ok := sjc.mutation.LastBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldLastBalance,
		})
		_node.LastBalance = &value
	}
	if value, ok := sjc.mutation.StlTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldStlTime,
		})
		_node.StlTime = &value
	}
	if value, ok := sjc.mutation.FxRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFxRate,
		})
		_node.FxRate = &value
	}
	if value, ok := sjc.mutation.StlCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldStlCurrency,
		})
		_node.StlCurrency = &value
	}
	if value, ok := sjc.mutation.StlAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlAmount,
		})
		_node.StlAmount = &value
	}
	if value, ok := sjc.mutation.StlMarginLv(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlMarginLv,
		})
		_node.StlMarginLv = &value
	}
	if value, ok := sjc.mutation.IsSettlement(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsSettlement,
		})
		_node.IsSettlement = value
	}
	if value, ok := sjc.mutation.ActualStlTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldActualStlTime,
		})
		_node.ActualStlTime = &value
	}
	if value, ok := sjc.mutation.TransNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTransNo,
		})
		_node.TransNo = &value
	}
	if value, ok := sjc.mutation.TransTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldTransTime,
		})
		_node.TransTime = &value
	}
	if value, ok := sjc.mutation.AccountingNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldAccountingNo,
		})
		_node.AccountingNo = &value
	}
	if value, ok := sjc.mutation.AccountingTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldAccountingTime,
		})
		_node.AccountingTime = &value
	}
	if value, ok := sjc.mutation.AccountedPositionQty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAccountedPositionQty,
		})
		_node.AccountedPositionQty = &value
	}
	if value, ok := sjc.mutation.CdDirection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCdDirection,
		})
		_node.CdDirection = &value
	}
	if value, ok := sjc.mutation.ApplyFields(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldApplyFields,
		})
		_node.ApplyFields = &value
	}
	if value, ok := sjc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := sjc.mutation.RefTransNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldRefTransNo,
		})
		_node.RefTransNo = &value
	}
	if value, ok := sjc.mutation.IsDayBooking(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsDayBooking,
		})
		_node.IsDayBooking = &value
	}
	if value, ok := sjc.mutation.IsEffectFund(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsEffectFund,
		})
		_node.IsEffectFund = value
	}
	return _node, _spec
}

// SecurityJournalCreateBulk is the builder for creating many SecurityJournal entities in bulk.
type SecurityJournalCreateBulk struct {
	config
	builders []*SecurityJournalCreate
}

// Save creates the SecurityJournal entities in the database.
func (sjcb *SecurityJournalCreateBulk) Save(ctx context.Context) ([]*SecurityJournal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sjcb.builders))
	nodes := make([]*SecurityJournal, len(sjcb.builders))
	mutators := make([]Mutator, len(sjcb.builders))
	for i := range sjcb.builders {
		func(i int, root context.Context) {
			builder := sjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SecurityJournalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjcb *SecurityJournalCreateBulk) SaveX(ctx context.Context) []*SecurityJournal {
	v, err := sjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjcb *SecurityJournalCreateBulk) Exec(ctx context.Context) error {
	_, err := sjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjcb *SecurityJournalCreateBulk) ExecX(ctx context.Context) {
	if err := sjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
