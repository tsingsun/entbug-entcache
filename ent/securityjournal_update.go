// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/securityjournal"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SecurityJournalUpdate is the builder for updating SecurityJournal entities.
type SecurityJournalUpdate struct {
	config
	hooks    []Hook
	mutation *SecurityJournalMutation
}

// Where appends a list predicates to the SecurityJournalUpdate builder.
func (sju *SecurityJournalUpdate) Where(ps ...predicate.SecurityJournal) *SecurityJournalUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetSecurityAccountID sets the "security_account_id" field.
func (sju *SecurityJournalUpdate) SetSecurityAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetSecurityAccountID()
	sju.mutation.SetSecurityAccountID(i)
	return sju
}

// AddSecurityAccountID adds i to the "security_account_id" field.
func (sju *SecurityJournalUpdate) AddSecurityAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.AddSecurityAccountID(i)
	return sju
}

// SetAccountID sets the "account_id" field.
func (sju *SecurityJournalUpdate) SetAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetAccountID()
	sju.mutation.SetAccountID(i)
	return sju
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableAccountID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetAccountID(*i)
	}
	return sju
}

// AddAccountID adds i to the "account_id" field.
func (sju *SecurityJournalUpdate) AddAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.AddAccountID(i)
	return sju
}

// ClearAccountID clears the value of the "account_id" field.
func (sju *SecurityJournalUpdate) ClearAccountID() *SecurityJournalUpdate {
	sju.mutation.ClearAccountID()
	return sju
}

// SetBizNo sets the "biz_no" field.
func (sju *SecurityJournalUpdate) SetBizNo(s string) *SecurityJournalUpdate {
	sju.mutation.SetBizNo(s)
	return sju
}

// SetNillableBizNo sets the "biz_no" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableBizNo(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetBizNo(*s)
	}
	return sju
}

// ClearBizNo clears the value of the "biz_no" field.
func (sju *SecurityJournalUpdate) ClearBizNo() *SecurityJournalUpdate {
	sju.mutation.ClearBizNo()
	return sju
}

// SetBizType sets the "biz_type" field.
func (sju *SecurityJournalUpdate) SetBizType(s string) *SecurityJournalUpdate {
	sju.mutation.SetBizType(s)
	return sju
}

// SetNillableBizType sets the "biz_type" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableBizType(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetBizType(*s)
	}
	return sju
}

// ClearBizType clears the value of the "biz_type" field.
func (sju *SecurityJournalUpdate) ClearBizType() *SecurityJournalUpdate {
	sju.mutation.ClearBizType()
	return sju
}

// SetOrgID sets the "org_id" field.
func (sju *SecurityJournalUpdate) SetOrgID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetOrgID()
	sju.mutation.SetOrgID(i)
	return sju
}

// AddOrgID adds i to the "org_id" field.
func (sju *SecurityJournalUpdate) AddOrgID(i int) *SecurityJournalUpdate {
	sju.mutation.AddOrgID(i)
	return sju
}

// SetTradeCode sets the "trade_code" field.
func (sju *SecurityJournalUpdate) SetTradeCode(s string) *SecurityJournalUpdate {
	sju.mutation.SetTradeCode(s)
	return sju
}

// SetNillableTradeCode sets the "trade_code" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableTradeCode(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetTradeCode(*s)
	}
	return sju
}

// ClearTradeCode clears the value of the "trade_code" field.
func (sju *SecurityJournalUpdate) ClearTradeCode() *SecurityJournalUpdate {
	sju.mutation.ClearTradeCode()
	return sju
}

// SetChangeType sets the "change_type" field.
func (sju *SecurityJournalUpdate) SetChangeType(s string) *SecurityJournalUpdate {
	sju.mutation.SetChangeType(s)
	return sju
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableChangeType(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetChangeType(*s)
	}
	return sju
}

// ClearChangeType clears the value of the "change_type" field.
func (sju *SecurityJournalUpdate) ClearChangeType() *SecurityJournalUpdate {
	sju.mutation.ClearChangeType()
	return sju
}

// SetRecordMethodID sets the "record_method_id" field.
func (sju *SecurityJournalUpdate) SetRecordMethodID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetRecordMethodID()
	sju.mutation.SetRecordMethodID(i)
	return sju
}

// SetNillableRecordMethodID sets the "record_method_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableRecordMethodID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetRecordMethodID(*i)
	}
	return sju
}

// AddRecordMethodID adds i to the "record_method_id" field.
func (sju *SecurityJournalUpdate) AddRecordMethodID(i int) *SecurityJournalUpdate {
	sju.mutation.AddRecordMethodID(i)
	return sju
}

// ClearRecordMethodID clears the value of the "record_method_id" field.
func (sju *SecurityJournalUpdate) ClearRecordMethodID() *SecurityJournalUpdate {
	sju.mutation.ClearRecordMethodID()
	return sju
}

// SetProjectID sets the "project_id" field.
func (sju *SecurityJournalUpdate) SetProjectID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetProjectID()
	sju.mutation.SetProjectID(i)
	return sju
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableProjectID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetProjectID(*i)
	}
	return sju
}

// AddProjectID adds i to the "project_id" field.
func (sju *SecurityJournalUpdate) AddProjectID(i int) *SecurityJournalUpdate {
	sju.mutation.AddProjectID(i)
	return sju
}

// ClearProjectID clears the value of the "project_id" field.
func (sju *SecurityJournalUpdate) ClearProjectID() *SecurityJournalUpdate {
	sju.mutation.ClearProjectID()
	return sju
}

// SetProductID sets the "product_id" field.
func (sju *SecurityJournalUpdate) SetProductID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetProductID()
	sju.mutation.SetProductID(i)
	return sju
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableProductID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetProductID(*i)
	}
	return sju
}

// AddProductID adds i to the "product_id" field.
func (sju *SecurityJournalUpdate) AddProductID(i int) *SecurityJournalUpdate {
	sju.mutation.AddProductID(i)
	return sju
}

// ClearProductID clears the value of the "product_id" field.
func (sju *SecurityJournalUpdate) ClearProductID() *SecurityJournalUpdate {
	sju.mutation.ClearProductID()
	return sju
}

// SetMaterialID sets the "material_id" field.
func (sju *SecurityJournalUpdate) SetMaterialID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetMaterialID()
	sju.mutation.SetMaterialID(i)
	return sju
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableMaterialID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetMaterialID(*i)
	}
	return sju
}

// AddMaterialID adds i to the "material_id" field.
func (sju *SecurityJournalUpdate) AddMaterialID(i int) *SecurityJournalUpdate {
	sju.mutation.AddMaterialID(i)
	return sju
}

// ClearMaterialID clears the value of the "material_id" field.
func (sju *SecurityJournalUpdate) ClearMaterialID() *SecurityJournalUpdate {
	sju.mutation.ClearMaterialID()
	return sju
}

// SetMaterialNo sets the "material_no" field.
func (sju *SecurityJournalUpdate) SetMaterialNo(s string) *SecurityJournalUpdate {
	sju.mutation.SetMaterialNo(s)
	return sju
}

// SetNillableMaterialNo sets the "material_no" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableMaterialNo(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetMaterialNo(*s)
	}
	return sju
}

// ClearMaterialNo clears the value of the "material_no" field.
func (sju *SecurityJournalUpdate) ClearMaterialNo() *SecurityJournalUpdate {
	sju.mutation.ClearMaterialNo()
	return sju
}

// SetMaterialName sets the "material_name" field.
func (sju *SecurityJournalUpdate) SetMaterialName(s string) *SecurityJournalUpdate {
	sju.mutation.SetMaterialName(s)
	return sju
}

// SetNillableMaterialName sets the "material_name" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableMaterialName(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetMaterialName(*s)
	}
	return sju
}

// ClearMaterialName clears the value of the "material_name" field.
func (sju *SecurityJournalUpdate) ClearMaterialName() *SecurityJournalUpdate {
	sju.mutation.ClearMaterialName()
	return sju
}

// SetMultiplier sets the "multiplier" field.
func (sju *SecurityJournalUpdate) SetMultiplier(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetMultiplier()
	sju.mutation.SetMultiplier(f)
	return sju
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableMultiplier(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetMultiplier(*f)
	}
	return sju
}

// AddMultiplier adds f to the "multiplier" field.
func (sju *SecurityJournalUpdate) AddMultiplier(f float64) *SecurityJournalUpdate {
	sju.mutation.AddMultiplier(f)
	return sju
}

// ClearMultiplier clears the value of the "multiplier" field.
func (sju *SecurityJournalUpdate) ClearMultiplier() *SecurityJournalUpdate {
	sju.mutation.ClearMultiplier()
	return sju
}

// SetPositionType sets the "position_type" field.
func (sju *SecurityJournalUpdate) SetPositionType(i int) *SecurityJournalUpdate {
	sju.mutation.ResetPositionType()
	sju.mutation.SetPositionType(i)
	return sju
}

// SetNillablePositionType sets the "position_type" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillablePositionType(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetPositionType(*i)
	}
	return sju
}

// AddPositionType adds i to the "position_type" field.
func (sju *SecurityJournalUpdate) AddPositionType(i int) *SecurityJournalUpdate {
	sju.mutation.AddPositionType(i)
	return sju
}

// ClearPositionType clears the value of the "position_type" field.
func (sju *SecurityJournalUpdate) ClearPositionType() *SecurityJournalUpdate {
	sju.mutation.ClearPositionType()
	return sju
}

// SetCurrency sets the "currency" field.
func (sju *SecurityJournalUpdate) SetCurrency(s string) *SecurityJournalUpdate {
	sju.mutation.SetCurrency(s)
	return sju
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCurrency(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetCurrency(*s)
	}
	return sju
}

// ClearCurrency clears the value of the "currency" field.
func (sju *SecurityJournalUpdate) ClearCurrency() *SecurityJournalUpdate {
	sju.mutation.ClearCurrency()
	return sju
}

// SetQty sets the "qty" field.
func (sju *SecurityJournalUpdate) SetQty(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetQty()
	sju.mutation.SetQty(f)
	return sju
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableQty(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetQty(*f)
	}
	return sju
}

// AddQty adds f to the "qty" field.
func (sju *SecurityJournalUpdate) AddQty(f float64) *SecurityJournalUpdate {
	sju.mutation.AddQty(f)
	return sju
}

// ClearQty clears the value of the "qty" field.
func (sju *SecurityJournalUpdate) ClearQty() *SecurityJournalUpdate {
	sju.mutation.ClearQty()
	return sju
}

// SetPrice sets the "price" field.
func (sju *SecurityJournalUpdate) SetPrice(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetPrice()
	sju.mutation.SetPrice(f)
	return sju
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillablePrice(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetPrice(*f)
	}
	return sju
}

// AddPrice adds f to the "price" field.
func (sju *SecurityJournalUpdate) AddPrice(f float64) *SecurityJournalUpdate {
	sju.mutation.AddPrice(f)
	return sju
}

// ClearPrice clears the value of the "price" field.
func (sju *SecurityJournalUpdate) ClearPrice() *SecurityJournalUpdate {
	sju.mutation.ClearPrice()
	return sju
}

// SetAmount sets the "amount" field.
func (sju *SecurityJournalUpdate) SetAmount(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetAmount()
	sju.mutation.SetAmount(f)
	return sju
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableAmount(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetAmount(*f)
	}
	return sju
}

// AddAmount adds f to the "amount" field.
func (sju *SecurityJournalUpdate) AddAmount(f float64) *SecurityJournalUpdate {
	sju.mutation.AddAmount(f)
	return sju
}

// ClearAmount clears the value of the "amount" field.
func (sju *SecurityJournalUpdate) ClearAmount() *SecurityJournalUpdate {
	sju.mutation.ClearAmount()
	return sju
}

// SetCost sets the "cost" field.
func (sju *SecurityJournalUpdate) SetCost(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetCost()
	sju.mutation.SetCost(f)
	return sju
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCost(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetCost(*f)
	}
	return sju
}

// AddCost adds f to the "cost" field.
func (sju *SecurityJournalUpdate) AddCost(f float64) *SecurityJournalUpdate {
	sju.mutation.AddCost(f)
	return sju
}

// ClearCost clears the value of the "cost" field.
func (sju *SecurityJournalUpdate) ClearCost() *SecurityJournalUpdate {
	sju.mutation.ClearCost()
	return sju
}

// SetTotal sets the "total" field.
func (sju *SecurityJournalUpdate) SetTotal(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetTotal()
	sju.mutation.SetTotal(f)
	return sju
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableTotal(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetTotal(*f)
	}
	return sju
}

// AddTotal adds f to the "total" field.
func (sju *SecurityJournalUpdate) AddTotal(f float64) *SecurityJournalUpdate {
	sju.mutation.AddTotal(f)
	return sju
}

// ClearTotal clears the value of the "total" field.
func (sju *SecurityJournalUpdate) ClearTotal() *SecurityJournalUpdate {
	sju.mutation.ClearTotal()
	return sju
}

// SetUnit sets the "unit" field.
func (sju *SecurityJournalUpdate) SetUnit(s string) *SecurityJournalUpdate {
	sju.mutation.SetUnit(s)
	return sju
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableUnit(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetUnit(*s)
	}
	return sju
}

// ClearUnit clears the value of the "unit" field.
func (sju *SecurityJournalUpdate) ClearUnit() *SecurityJournalUpdate {
	sju.mutation.ClearUnit()
	return sju
}

// SetSpec sets the "spec" field.
func (sju *SecurityJournalUpdate) SetSpec(s string) *SecurityJournalUpdate {
	sju.mutation.SetSpec(s)
	return sju
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableSpec(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetSpec(*s)
	}
	return sju
}

// ClearSpec clears the value of the "spec" field.
func (sju *SecurityJournalUpdate) ClearSpec() *SecurityJournalUpdate {
	sju.mutation.ClearSpec()
	return sju
}

// SetCommission sets the "commission" field.
func (sju *SecurityJournalUpdate) SetCommission(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetCommission()
	sju.mutation.SetCommission(f)
	return sju
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCommission(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetCommission(*f)
	}
	return sju
}

// AddCommission adds f to the "commission" field.
func (sju *SecurityJournalUpdate) AddCommission(f float64) *SecurityJournalUpdate {
	sju.mutation.AddCommission(f)
	return sju
}

// ClearCommission clears the value of the "commission" field.
func (sju *SecurityJournalUpdate) ClearCommission() *SecurityJournalUpdate {
	sju.mutation.ClearCommission()
	return sju
}

// SetFee sets the "fee" field.
func (sju *SecurityJournalUpdate) SetFee(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetFee()
	sju.mutation.SetFee(f)
	return sju
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableFee(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetFee(*f)
	}
	return sju
}

// AddFee adds f to the "fee" field.
func (sju *SecurityJournalUpdate) AddFee(f float64) *SecurityJournalUpdate {
	sju.mutation.AddFee(f)
	return sju
}

// ClearFee clears the value of the "fee" field.
func (sju *SecurityJournalUpdate) ClearFee() *SecurityJournalUpdate {
	sju.mutation.ClearFee()
	return sju
}

// SetFeeOther sets the "fee_other" field.
func (sju *SecurityJournalUpdate) SetFeeOther(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetFeeOther()
	sju.mutation.SetFeeOther(f)
	return sju
}

// SetNillableFeeOther sets the "fee_other" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableFeeOther(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetFeeOther(*f)
	}
	return sju
}

// AddFeeOther adds f to the "fee_other" field.
func (sju *SecurityJournalUpdate) AddFeeOther(f float64) *SecurityJournalUpdate {
	sju.mutation.AddFeeOther(f)
	return sju
}

// ClearFeeOther clears the value of the "fee_other" field.
func (sju *SecurityJournalUpdate) ClearFeeOther() *SecurityJournalUpdate {
	sju.mutation.ClearFeeOther()
	return sju
}

// SetCount sets the "count" field.
func (sju *SecurityJournalUpdate) SetCount(i int) *SecurityJournalUpdate {
	sju.mutation.ResetCount()
	sju.mutation.SetCount(i)
	return sju
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCount(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetCount(*i)
	}
	return sju
}

// AddCount adds i to the "count" field.
func (sju *SecurityJournalUpdate) AddCount(i int) *SecurityJournalUpdate {
	sju.mutation.AddCount(i)
	return sju
}

// ClearCount clears the value of the "count" field.
func (sju *SecurityJournalUpdate) ClearCount() *SecurityJournalUpdate {
	sju.mutation.ClearCount()
	return sju
}

// SetDirection sets the "direction" field.
func (sju *SecurityJournalUpdate) SetDirection(i int) *SecurityJournalUpdate {
	sju.mutation.ResetDirection()
	sju.mutation.SetDirection(i)
	return sju
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableDirection(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetDirection(*i)
	}
	return sju
}

// AddDirection adds i to the "direction" field.
func (sju *SecurityJournalUpdate) AddDirection(i int) *SecurityJournalUpdate {
	sju.mutation.AddDirection(i)
	return sju
}

// ClearDirection clears the value of the "direction" field.
func (sju *SecurityJournalUpdate) ClearDirection() *SecurityJournalUpdate {
	sju.mutation.ClearDirection()
	return sju
}

// SetTamper sets the "tamper" field.
func (sju *SecurityJournalUpdate) SetTamper(s string) *SecurityJournalUpdate {
	sju.mutation.SetTamper(s)
	return sju
}

// SetNillableTamper sets the "tamper" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableTamper(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetTamper(*s)
	}
	return sju
}

// ClearTamper clears the value of the "tamper" field.
func (sju *SecurityJournalUpdate) ClearTamper() *SecurityJournalUpdate {
	sju.mutation.ClearTamper()
	return sju
}

// SetSummary sets the "summary" field.
func (sju *SecurityJournalUpdate) SetSummary(s string) *SecurityJournalUpdate {
	sju.mutation.SetSummary(s)
	return sju
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableSummary(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetSummary(*s)
	}
	return sju
}

// ClearSummary clears the value of the "summary" field.
func (sju *SecurityJournalUpdate) ClearSummary() *SecurityJournalUpdate {
	sju.mutation.ClearSummary()
	return sju
}

// SetPairSubjectCode sets the "pair_subject_code" field.
func (sju *SecurityJournalUpdate) SetPairSubjectCode(s string) *SecurityJournalUpdate {
	sju.mutation.SetPairSubjectCode(s)
	return sju
}

// SetNillablePairSubjectCode sets the "pair_subject_code" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillablePairSubjectCode(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetPairSubjectCode(*s)
	}
	return sju
}

// ClearPairSubjectCode clears the value of the "pair_subject_code" field.
func (sju *SecurityJournalUpdate) ClearPairSubjectCode() *SecurityJournalUpdate {
	sju.mutation.ClearPairSubjectCode()
	return sju
}

// SetPairSecurityAccountID sets the "pair_security_account_id" field.
func (sju *SecurityJournalUpdate) SetPairSecurityAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.ResetPairSecurityAccountID()
	sju.mutation.SetPairSecurityAccountID(i)
	return sju
}

// SetNillablePairSecurityAccountID sets the "pair_security_account_id" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillablePairSecurityAccountID(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetPairSecurityAccountID(*i)
	}
	return sju
}

// AddPairSecurityAccountID adds i to the "pair_security_account_id" field.
func (sju *SecurityJournalUpdate) AddPairSecurityAccountID(i int) *SecurityJournalUpdate {
	sju.mutation.AddPairSecurityAccountID(i)
	return sju
}

// ClearPairSecurityAccountID clears the value of the "pair_security_account_id" field.
func (sju *SecurityJournalUpdate) ClearPairSecurityAccountID() *SecurityJournalUpdate {
	sju.mutation.ClearPairSecurityAccountID()
	return sju
}

// SetLastBalance sets the "last_balance" field.
func (sju *SecurityJournalUpdate) SetLastBalance(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetLastBalance()
	sju.mutation.SetLastBalance(f)
	return sju
}

// SetNillableLastBalance sets the "last_balance" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableLastBalance(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetLastBalance(*f)
	}
	return sju
}

// AddLastBalance adds f to the "last_balance" field.
func (sju *SecurityJournalUpdate) AddLastBalance(f float64) *SecurityJournalUpdate {
	sju.mutation.AddLastBalance(f)
	return sju
}

// ClearLastBalance clears the value of the "last_balance" field.
func (sju *SecurityJournalUpdate) ClearLastBalance() *SecurityJournalUpdate {
	sju.mutation.ClearLastBalance()
	return sju
}

// SetStlTime sets the "stl_time" field.
func (sju *SecurityJournalUpdate) SetStlTime(t time.Time) *SecurityJournalUpdate {
	sju.mutation.SetStlTime(t)
	return sju
}

// SetNillableStlTime sets the "stl_time" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableStlTime(t *time.Time) *SecurityJournalUpdate {
	if t != nil {
		sju.SetStlTime(*t)
	}
	return sju
}

// ClearStlTime clears the value of the "stl_time" field.
func (sju *SecurityJournalUpdate) ClearStlTime() *SecurityJournalUpdate {
	sju.mutation.ClearStlTime()
	return sju
}

// SetFxRate sets the "fx_rate" field.
func (sju *SecurityJournalUpdate) SetFxRate(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetFxRate()
	sju.mutation.SetFxRate(f)
	return sju
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableFxRate(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetFxRate(*f)
	}
	return sju
}

// AddFxRate adds f to the "fx_rate" field.
func (sju *SecurityJournalUpdate) AddFxRate(f float64) *SecurityJournalUpdate {
	sju.mutation.AddFxRate(f)
	return sju
}

// ClearFxRate clears the value of the "fx_rate" field.
func (sju *SecurityJournalUpdate) ClearFxRate() *SecurityJournalUpdate {
	sju.mutation.ClearFxRate()
	return sju
}

// SetStlCurrency sets the "stl_currency" field.
func (sju *SecurityJournalUpdate) SetStlCurrency(s string) *SecurityJournalUpdate {
	sju.mutation.SetStlCurrency(s)
	return sju
}

// SetNillableStlCurrency sets the "stl_currency" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableStlCurrency(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetStlCurrency(*s)
	}
	return sju
}

// ClearStlCurrency clears the value of the "stl_currency" field.
func (sju *SecurityJournalUpdate) ClearStlCurrency() *SecurityJournalUpdate {
	sju.mutation.ClearStlCurrency()
	return sju
}

// SetStlAmount sets the "stl_amount" field.
func (sju *SecurityJournalUpdate) SetStlAmount(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetStlAmount()
	sju.mutation.SetStlAmount(f)
	return sju
}

// SetNillableStlAmount sets the "stl_amount" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableStlAmount(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetStlAmount(*f)
	}
	return sju
}

// AddStlAmount adds f to the "stl_amount" field.
func (sju *SecurityJournalUpdate) AddStlAmount(f float64) *SecurityJournalUpdate {
	sju.mutation.AddStlAmount(f)
	return sju
}

// ClearStlAmount clears the value of the "stl_amount" field.
func (sju *SecurityJournalUpdate) ClearStlAmount() *SecurityJournalUpdate {
	sju.mutation.ClearStlAmount()
	return sju
}

// SetStlMarginLv sets the "stl_margin_lv" field.
func (sju *SecurityJournalUpdate) SetStlMarginLv(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetStlMarginLv()
	sju.mutation.SetStlMarginLv(f)
	return sju
}

// SetNillableStlMarginLv sets the "stl_margin_lv" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableStlMarginLv(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetStlMarginLv(*f)
	}
	return sju
}

// AddStlMarginLv adds f to the "stl_margin_lv" field.
func (sju *SecurityJournalUpdate) AddStlMarginLv(f float64) *SecurityJournalUpdate {
	sju.mutation.AddStlMarginLv(f)
	return sju
}

// ClearStlMarginLv clears the value of the "stl_margin_lv" field.
func (sju *SecurityJournalUpdate) ClearStlMarginLv() *SecurityJournalUpdate {
	sju.mutation.ClearStlMarginLv()
	return sju
}

// SetIsSettlement sets the "is_settlement" field.
func (sju *SecurityJournalUpdate) SetIsSettlement(s string) *SecurityJournalUpdate {
	sju.mutation.SetIsSettlement(s)
	return sju
}

// SetNillableIsSettlement sets the "is_settlement" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableIsSettlement(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetIsSettlement(*s)
	}
	return sju
}

// ClearIsSettlement clears the value of the "is_settlement" field.
func (sju *SecurityJournalUpdate) ClearIsSettlement() *SecurityJournalUpdate {
	sju.mutation.ClearIsSettlement()
	return sju
}

// SetActualStlTime sets the "actual_stl_time" field.
func (sju *SecurityJournalUpdate) SetActualStlTime(t time.Time) *SecurityJournalUpdate {
	sju.mutation.SetActualStlTime(t)
	return sju
}

// SetNillableActualStlTime sets the "actual_stl_time" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableActualStlTime(t *time.Time) *SecurityJournalUpdate {
	if t != nil {
		sju.SetActualStlTime(*t)
	}
	return sju
}

// ClearActualStlTime clears the value of the "actual_stl_time" field.
func (sju *SecurityJournalUpdate) ClearActualStlTime() *SecurityJournalUpdate {
	sju.mutation.ClearActualStlTime()
	return sju
}

// SetTransNo sets the "trans_no" field.
func (sju *SecurityJournalUpdate) SetTransNo(s string) *SecurityJournalUpdate {
	sju.mutation.SetTransNo(s)
	return sju
}

// SetNillableTransNo sets the "trans_no" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableTransNo(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetTransNo(*s)
	}
	return sju
}

// ClearTransNo clears the value of the "trans_no" field.
func (sju *SecurityJournalUpdate) ClearTransNo() *SecurityJournalUpdate {
	sju.mutation.ClearTransNo()
	return sju
}

// SetTransTime sets the "trans_time" field.
func (sju *SecurityJournalUpdate) SetTransTime(t time.Time) *SecurityJournalUpdate {
	sju.mutation.SetTransTime(t)
	return sju
}

// SetNillableTransTime sets the "trans_time" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableTransTime(t *time.Time) *SecurityJournalUpdate {
	if t != nil {
		sju.SetTransTime(*t)
	}
	return sju
}

// ClearTransTime clears the value of the "trans_time" field.
func (sju *SecurityJournalUpdate) ClearTransTime() *SecurityJournalUpdate {
	sju.mutation.ClearTransTime()
	return sju
}

// SetAccountingNo sets the "accounting_no" field.
func (sju *SecurityJournalUpdate) SetAccountingNo(s string) *SecurityJournalUpdate {
	sju.mutation.SetAccountingNo(s)
	return sju
}

// SetNillableAccountingNo sets the "accounting_no" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableAccountingNo(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetAccountingNo(*s)
	}
	return sju
}

// ClearAccountingNo clears the value of the "accounting_no" field.
func (sju *SecurityJournalUpdate) ClearAccountingNo() *SecurityJournalUpdate {
	sju.mutation.ClearAccountingNo()
	return sju
}

// SetAccountingTime sets the "accounting_time" field.
func (sju *SecurityJournalUpdate) SetAccountingTime(t time.Time) *SecurityJournalUpdate {
	sju.mutation.SetAccountingTime(t)
	return sju
}

// SetNillableAccountingTime sets the "accounting_time" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableAccountingTime(t *time.Time) *SecurityJournalUpdate {
	if t != nil {
		sju.SetAccountingTime(*t)
	}
	return sju
}

// ClearAccountingTime clears the value of the "accounting_time" field.
func (sju *SecurityJournalUpdate) ClearAccountingTime() *SecurityJournalUpdate {
	sju.mutation.ClearAccountingTime()
	return sju
}

// SetAccountedPositionQty sets the "accounted_position_qty" field.
func (sju *SecurityJournalUpdate) SetAccountedPositionQty(f float64) *SecurityJournalUpdate {
	sju.mutation.ResetAccountedPositionQty()
	sju.mutation.SetAccountedPositionQty(f)
	return sju
}

// SetNillableAccountedPositionQty sets the "accounted_position_qty" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableAccountedPositionQty(f *float64) *SecurityJournalUpdate {
	if f != nil {
		sju.SetAccountedPositionQty(*f)
	}
	return sju
}

// AddAccountedPositionQty adds f to the "accounted_position_qty" field.
func (sju *SecurityJournalUpdate) AddAccountedPositionQty(f float64) *SecurityJournalUpdate {
	sju.mutation.AddAccountedPositionQty(f)
	return sju
}

// ClearAccountedPositionQty clears the value of the "accounted_position_qty" field.
func (sju *SecurityJournalUpdate) ClearAccountedPositionQty() *SecurityJournalUpdate {
	sju.mutation.ClearAccountedPositionQty()
	return sju
}

// SetCdDirection sets the "cd_direction" field.
func (sju *SecurityJournalUpdate) SetCdDirection(i int) *SecurityJournalUpdate {
	sju.mutation.ResetCdDirection()
	sju.mutation.SetCdDirection(i)
	return sju
}

// SetNillableCdDirection sets the "cd_direction" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCdDirection(i *int) *SecurityJournalUpdate {
	if i != nil {
		sju.SetCdDirection(*i)
	}
	return sju
}

// AddCdDirection adds i to the "cd_direction" field.
func (sju *SecurityJournalUpdate) AddCdDirection(i int) *SecurityJournalUpdate {
	sju.mutation.AddCdDirection(i)
	return sju
}

// ClearCdDirection clears the value of the "cd_direction" field.
func (sju *SecurityJournalUpdate) ClearCdDirection() *SecurityJournalUpdate {
	sju.mutation.ClearCdDirection()
	return sju
}

// SetApplyFields sets the "apply_fields" field.
func (sju *SecurityJournalUpdate) SetApplyFields(s string) *SecurityJournalUpdate {
	sju.mutation.SetApplyFields(s)
	return sju
}

// SetNillableApplyFields sets the "apply_fields" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableApplyFields(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetApplyFields(*s)
	}
	return sju
}

// ClearApplyFields clears the value of the "apply_fields" field.
func (sju *SecurityJournalUpdate) ClearApplyFields() *SecurityJournalUpdate {
	sju.mutation.ClearApplyFields()
	return sju
}

// SetCreatedAt sets the "created_at" field.
func (sju *SecurityJournalUpdate) SetCreatedAt(t time.Time) *SecurityJournalUpdate {
	sju.mutation.SetCreatedAt(t)
	return sju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableCreatedAt(t *time.Time) *SecurityJournalUpdate {
	if t != nil {
		sju.SetCreatedAt(*t)
	}
	return sju
}

// ClearCreatedAt clears the value of the "created_at" field.
func (sju *SecurityJournalUpdate) ClearCreatedAt() *SecurityJournalUpdate {
	sju.mutation.ClearCreatedAt()
	return sju
}

// SetRefTransNo sets the "ref_trans_no" field.
func (sju *SecurityJournalUpdate) SetRefTransNo(s string) *SecurityJournalUpdate {
	sju.mutation.SetRefTransNo(s)
	return sju
}

// SetNillableRefTransNo sets the "ref_trans_no" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableRefTransNo(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetRefTransNo(*s)
	}
	return sju
}

// ClearRefTransNo clears the value of the "ref_trans_no" field.
func (sju *SecurityJournalUpdate) ClearRefTransNo() *SecurityJournalUpdate {
	sju.mutation.ClearRefTransNo()
	return sju
}

// SetIsDayBooking sets the "is_day_booking" field.
func (sju *SecurityJournalUpdate) SetIsDayBooking(s string) *SecurityJournalUpdate {
	sju.mutation.SetIsDayBooking(s)
	return sju
}

// SetNillableIsDayBooking sets the "is_day_booking" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableIsDayBooking(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetIsDayBooking(*s)
	}
	return sju
}

// ClearIsDayBooking clears the value of the "is_day_booking" field.
func (sju *SecurityJournalUpdate) ClearIsDayBooking() *SecurityJournalUpdate {
	sju.mutation.ClearIsDayBooking()
	return sju
}

// SetIsEffectFund sets the "is_effect_fund" field.
func (sju *SecurityJournalUpdate) SetIsEffectFund(s string) *SecurityJournalUpdate {
	sju.mutation.SetIsEffectFund(s)
	return sju
}

// SetNillableIsEffectFund sets the "is_effect_fund" field if the given value is not nil.
func (sju *SecurityJournalUpdate) SetNillableIsEffectFund(s *string) *SecurityJournalUpdate {
	if s != nil {
		sju.SetIsEffectFund(*s)
	}
	return sju
}

// ClearIsEffectFund clears the value of the "is_effect_fund" field.
func (sju *SecurityJournalUpdate) ClearIsEffectFund() *SecurityJournalUpdate {
	sju.mutation.ClearIsEffectFund()
	return sju
}

// Mutation returns the SecurityJournalMutation object of the builder.
func (sju *SecurityJournalUpdate) Mutation() *SecurityJournalMutation {
	return sju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *SecurityJournalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sju.hooks) == 0 {
		if err = sju.check(); err != nil {
			return 0, err
		}
		affected, err = sju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityJournalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sju.check(); err != nil {
				return 0, err
			}
			sju.mutation = mutation
			affected, err = sju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sju.hooks) - 1; i >= 0; i-- {
			if sju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sju *SecurityJournalUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *SecurityJournalUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *SecurityJournalUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sju *SecurityJournalUpdate) check() error {
	if v, ok := sju.mutation.BizNo(); ok {
		if err := securityjournal.BizNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_no": %w`, err)}
		}
	}
	if v, ok := sju.mutation.BizType(); ok {
		if err := securityjournal.BizTypeValidator(v); err != nil {
			return &ValidationError{Name: "biz_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_type": %w`, err)}
		}
	}
	if v, ok := sju.mutation.TradeCode(); ok {
		if err := securityjournal.TradeCodeValidator(v); err != nil {
			return &ValidationError{Name: "trade_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trade_code": %w`, err)}
		}
	}
	if v, ok := sju.mutation.ChangeType(); ok {
		if err := securityjournal.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.change_type": %w`, err)}
		}
	}
	if v, ok := sju.mutation.MaterialNo(); ok {
		if err := securityjournal.MaterialNoValidator(v); err != nil {
			return &ValidationError{Name: "material_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_no": %w`, err)}
		}
	}
	if v, ok := sju.mutation.MaterialName(); ok {
		if err := securityjournal.MaterialNameValidator(v); err != nil {
			return &ValidationError{Name: "material_name", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_name": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Currency(); ok {
		if err := securityjournal.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.currency": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Unit(); ok {
		if err := securityjournal.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.unit": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Spec(); ok {
		if err := securityjournal.SpecValidator(v); err != nil {
			return &ValidationError{Name: "spec", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.spec": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Tamper(); ok {
		if err := securityjournal.TamperValidator(v); err != nil {
			return &ValidationError{Name: "tamper", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.tamper": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Summary(); ok {
		if err := securityjournal.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.summary": %w`, err)}
		}
	}
	if v, ok := sju.mutation.PairSubjectCode(); ok {
		if err := securityjournal.PairSubjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "pair_subject_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.pair_subject_code": %w`, err)}
		}
	}
	if v, ok := sju.mutation.StlCurrency(); ok {
		if err := securityjournal.StlCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "stl_currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.stl_currency": %w`, err)}
		}
	}
	if v, ok := sju.mutation.IsSettlement(); ok {
		if err := securityjournal.IsSettlementValidator(v); err != nil {
			return &ValidationError{Name: "is_settlement", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_settlement": %w`, err)}
		}
	}
	if v, ok := sju.mutation.TransNo(); ok {
		if err := securityjournal.TransNoValidator(v); err != nil {
			return &ValidationError{Name: "trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trans_no": %w`, err)}
		}
	}
	if v, ok := sju.mutation.AccountingNo(); ok {
		if err := securityjournal.AccountingNoValidator(v); err != nil {
			return &ValidationError{Name: "accounting_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.accounting_no": %w`, err)}
		}
	}
	if v, ok := sju.mutation.RefTransNo(); ok {
		if err := securityjournal.RefTransNoValidator(v); err != nil {
			return &ValidationError{Name: "ref_trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.ref_trans_no": %w`, err)}
		}
	}
	if v, ok := sju.mutation.IsDayBooking(); ok {
		if err := securityjournal.IsDayBookingValidator(v); err != nil {
			return &ValidationError{Name: "is_day_booking", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_day_booking": %w`, err)}
		}
	}
	if v, ok := sju.mutation.IsEffectFund(); ok {
		if err := securityjournal.IsEffectFundValidator(v); err != nil {
			return &ValidationError{Name: "is_effect_fund", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_effect_fund": %w`, err)}
		}
	}
	return nil
}

func (sju *SecurityJournalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securityjournal.Table,
			Columns: securityjournal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securityjournal.FieldID,
			},
		},
	}
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sju.mutation.SecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldSecurityAccountID,
		})
	}
	if value, ok := sju.mutation.AddedSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldSecurityAccountID,
		})
	}
	if value, ok := sju.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldAccountID,
		})
	}
	if value, ok := sju.mutation.AddedAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldAccountID,
		})
	}
	if sju.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldAccountID,
		})
	}
	if value, ok := sju.mutation.BizNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizNo,
		})
	}
	if sju.mutation.BizNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldBizNo,
		})
	}
	if value, ok := sju.mutation.BizType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizType,
		})
	}
	if sju.mutation.BizTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldBizType,
		})
	}
	if value, ok := sju.mutation.OrgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldOrgID,
		})
	}
	if value, ok := sju.mutation.AddedOrgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldOrgID,
		})
	}
	if value, ok := sju.mutation.TradeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTradeCode,
		})
	}
	if sju.mutation.TradeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTradeCode,
		})
	}
	if value, ok := sju.mutation.ChangeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldChangeType,
		})
	}
	if sju.mutation.ChangeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldChangeType,
		})
	}
	if value, ok := sju.mutation.RecordMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if value, ok := sju.mutation.AddedRecordMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if sju.mutation.RecordMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if value, ok := sju.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProjectID,
		})
	}
	if value, ok := sju.mutation.AddedProjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProjectID,
		})
	}
	if sju.mutation.ProjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldProjectID,
		})
	}
	if value, ok := sju.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProductID,
		})
	}
	if value, ok := sju.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProductID,
		})
	}
	if sju.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldProductID,
		})
	}
	if value, ok := sju.mutation.MaterialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if value, ok := sju.mutation.AddedMaterialID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if sju.mutation.MaterialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if value, ok := sju.mutation.MaterialNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialNo,
		})
	}
	if sju.mutation.MaterialNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldMaterialNo,
		})
	}
	if value, ok := sju.mutation.MaterialName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialName,
		})
	}
	if sju.mutation.MaterialNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldMaterialName,
		})
	}
	if value, ok := sju.mutation.Multiplier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if value, ok := sju.mutation.AddedMultiplier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if sju.mutation.MultiplierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if value, ok := sju.mutation.PositionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPositionType,
		})
	}
	if value, ok := sju.mutation.AddedPositionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPositionType,
		})
	}
	if sju.mutation.PositionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldPositionType,
		})
	}
	if value, ok := sju.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldCurrency,
		})
	}
	if sju.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldCurrency,
		})
	}
	if value, ok := sju.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldQty,
		})
	}
	if value, ok := sju.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldQty,
		})
	}
	if sju.mutation.QtyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldQty,
		})
	}
	if value, ok := sju.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldPrice,
		})
	}
	if value, ok := sju.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldPrice,
		})
	}
	if sju.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldPrice,
		})
	}
	if value, ok := sju.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAmount,
		})
	}
	if value, ok := sju.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAmount,
		})
	}
	if sju.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldAmount,
		})
	}
	if value, ok := sju.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCost,
		})
	}
	if value, ok := sju.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCost,
		})
	}
	if sju.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldCost,
		})
	}
	if value, ok := sju.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldTotal,
		})
	}
	if value, ok := sju.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldTotal,
		})
	}
	if sju.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldTotal,
		})
	}
	if value, ok := sju.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldUnit,
		})
	}
	if sju.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldUnit,
		})
	}
	if value, ok := sju.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSpec,
		})
	}
	if sju.mutation.SpecCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldSpec,
		})
	}
	if value, ok := sju.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCommission,
		})
	}
	if value, ok := sju.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCommission,
		})
	}
	if sju.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldCommission,
		})
	}
	if value, ok := sju.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFee,
		})
	}
	if value, ok := sju.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFee,
		})
	}
	if sju.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFee,
		})
	}
	if value, ok := sju.mutation.FeeOther(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if value, ok := sju.mutation.AddedFeeOther(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if sju.mutation.FeeOtherCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if value, ok := sju.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCount,
		})
	}
	if value, ok := sju.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCount,
		})
	}
	if sju.mutation.CountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldCount,
		})
	}
	if value, ok := sju.mutation.Direction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldDirection,
		})
	}
	if value, ok := sju.mutation.AddedDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldDirection,
		})
	}
	if sju.mutation.DirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldDirection,
		})
	}
	if value, ok := sju.mutation.Tamper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTamper,
		})
	}
	if sju.mutation.TamperCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTamper,
		})
	}
	if value, ok := sju.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSummary,
		})
	}
	if sju.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldSummary,
		})
	}
	if value, ok := sju.mutation.PairSubjectCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldPairSubjectCode,
		})
	}
	if sju.mutation.PairSubjectCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldPairSubjectCode,
		})
	}
	if value, ok := sju.mutation.PairSecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if value, ok := sju.mutation.AddedPairSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if sju.mutation.PairSecurityAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if value, ok := sju.mutation.LastBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if value, ok := sju.mutation.AddedLastBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if sju.mutation.LastBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if value, ok := sju.mutation.StlTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldStlTime,
		})
	}
	if sju.mutation.StlTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldStlTime,
		})
	}
	if value, ok := sju.mutation.FxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFxRate,
		})
	}
	if value, ok := sju.mutation.AddedFxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFxRate,
		})
	}
	if sju.mutation.FxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFxRate,
		})
	}
	if value, ok := sju.mutation.StlCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldStlCurrency,
		})
	}
	if sju.mutation.StlCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldStlCurrency,
		})
	}
	if value, ok := sju.mutation.StlAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if value, ok := sju.mutation.AddedStlAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if sju.mutation.StlAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if value, ok := sju.mutation.StlMarginLv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if value, ok := sju.mutation.AddedStlMarginLv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if sju.mutation.StlMarginLvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if value, ok := sju.mutation.IsSettlement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsSettlement,
		})
	}
	if sju.mutation.IsSettlementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsSettlement,
		})
	}
	if value, ok := sju.mutation.ActualStlTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldActualStlTime,
		})
	}
	if sju.mutation.ActualStlTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldActualStlTime,
		})
	}
	if value, ok := sju.mutation.TransNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTransNo,
		})
	}
	if sju.mutation.TransNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTransNo,
		})
	}
	if value, ok := sju.mutation.TransTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldTransTime,
		})
	}
	if sju.mutation.TransTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldTransTime,
		})
	}
	if value, ok := sju.mutation.AccountingNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldAccountingNo,
		})
	}
	if sju.mutation.AccountingNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldAccountingNo,
		})
	}
	if value, ok := sju.mutation.AccountingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldAccountingTime,
		})
	}
	if sju.mutation.AccountingTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldAccountingTime,
		})
	}
	if value, ok := sju.mutation.AccountedPositionQty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if value, ok := sju.mutation.AddedAccountedPositionQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if sju.mutation.AccountedPositionQtyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if value, ok := sju.mutation.CdDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if value, ok := sju.mutation.AddedCdDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if sju.mutation.CdDirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if value, ok := sju.mutation.ApplyFields(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldApplyFields,
		})
	}
	if sju.mutation.ApplyFieldsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldApplyFields,
		})
	}
	if value, ok := sju.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldCreatedAt,
		})
	}
	if sju.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldCreatedAt,
		})
	}
	if value, ok := sju.mutation.RefTransNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldRefTransNo,
		})
	}
	if sju.mutation.RefTransNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldRefTransNo,
		})
	}
	if value, ok := sju.mutation.IsDayBooking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsDayBooking,
		})
	}
	if sju.mutation.IsDayBookingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsDayBooking,
		})
	}
	if value, ok := sju.mutation.IsEffectFund(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsEffectFund,
		})
	}
	if sju.mutation.IsEffectFundCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsEffectFund,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityjournal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SecurityJournalUpdateOne is the builder for updating a single SecurityJournal entity.
type SecurityJournalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecurityJournalMutation
}

// SetSecurityAccountID sets the "security_account_id" field.
func (sjuo *SecurityJournalUpdateOne) SetSecurityAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetSecurityAccountID()
	sjuo.mutation.SetSecurityAccountID(i)
	return sjuo
}

// AddSecurityAccountID adds i to the "security_account_id" field.
func (sjuo *SecurityJournalUpdateOne) AddSecurityAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddSecurityAccountID(i)
	return sjuo
}

// SetAccountID sets the "account_id" field.
func (sjuo *SecurityJournalUpdateOne) SetAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetAccountID()
	sjuo.mutation.SetAccountID(i)
	return sjuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableAccountID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetAccountID(*i)
	}
	return sjuo
}

// AddAccountID adds i to the "account_id" field.
func (sjuo *SecurityJournalUpdateOne) AddAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddAccountID(i)
	return sjuo
}

// ClearAccountID clears the value of the "account_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearAccountID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearAccountID()
	return sjuo
}

// SetBizNo sets the "biz_no" field.
func (sjuo *SecurityJournalUpdateOne) SetBizNo(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetBizNo(s)
	return sjuo
}

// SetNillableBizNo sets the "biz_no" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableBizNo(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetBizNo(*s)
	}
	return sjuo
}

// ClearBizNo clears the value of the "biz_no" field.
func (sjuo *SecurityJournalUpdateOne) ClearBizNo() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearBizNo()
	return sjuo
}

// SetBizType sets the "biz_type" field.
func (sjuo *SecurityJournalUpdateOne) SetBizType(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetBizType(s)
	return sjuo
}

// SetNillableBizType sets the "biz_type" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableBizType(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetBizType(*s)
	}
	return sjuo
}

// ClearBizType clears the value of the "biz_type" field.
func (sjuo *SecurityJournalUpdateOne) ClearBizType() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearBizType()
	return sjuo
}

// SetOrgID sets the "org_id" field.
func (sjuo *SecurityJournalUpdateOne) SetOrgID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetOrgID()
	sjuo.mutation.SetOrgID(i)
	return sjuo
}

// AddOrgID adds i to the "org_id" field.
func (sjuo *SecurityJournalUpdateOne) AddOrgID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddOrgID(i)
	return sjuo
}

// SetTradeCode sets the "trade_code" field.
func (sjuo *SecurityJournalUpdateOne) SetTradeCode(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetTradeCode(s)
	return sjuo
}

// SetNillableTradeCode sets the "trade_code" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableTradeCode(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetTradeCode(*s)
	}
	return sjuo
}

// ClearTradeCode clears the value of the "trade_code" field.
func (sjuo *SecurityJournalUpdateOne) ClearTradeCode() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearTradeCode()
	return sjuo
}

// SetChangeType sets the "change_type" field.
func (sjuo *SecurityJournalUpdateOne) SetChangeType(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetChangeType(s)
	return sjuo
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableChangeType(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetChangeType(*s)
	}
	return sjuo
}

// ClearChangeType clears the value of the "change_type" field.
func (sjuo *SecurityJournalUpdateOne) ClearChangeType() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearChangeType()
	return sjuo
}

// SetRecordMethodID sets the "record_method_id" field.
func (sjuo *SecurityJournalUpdateOne) SetRecordMethodID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetRecordMethodID()
	sjuo.mutation.SetRecordMethodID(i)
	return sjuo
}

// SetNillableRecordMethodID sets the "record_method_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableRecordMethodID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetRecordMethodID(*i)
	}
	return sjuo
}

// AddRecordMethodID adds i to the "record_method_id" field.
func (sjuo *SecurityJournalUpdateOne) AddRecordMethodID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddRecordMethodID(i)
	return sjuo
}

// ClearRecordMethodID clears the value of the "record_method_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearRecordMethodID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearRecordMethodID()
	return sjuo
}

// SetProjectID sets the "project_id" field.
func (sjuo *SecurityJournalUpdateOne) SetProjectID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetProjectID()
	sjuo.mutation.SetProjectID(i)
	return sjuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableProjectID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetProjectID(*i)
	}
	return sjuo
}

// AddProjectID adds i to the "project_id" field.
func (sjuo *SecurityJournalUpdateOne) AddProjectID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddProjectID(i)
	return sjuo
}

// ClearProjectID clears the value of the "project_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearProjectID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearProjectID()
	return sjuo
}

// SetProductID sets the "product_id" field.
func (sjuo *SecurityJournalUpdateOne) SetProductID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetProductID()
	sjuo.mutation.SetProductID(i)
	return sjuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableProductID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetProductID(*i)
	}
	return sjuo
}

// AddProductID adds i to the "product_id" field.
func (sjuo *SecurityJournalUpdateOne) AddProductID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddProductID(i)
	return sjuo
}

// ClearProductID clears the value of the "product_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearProductID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearProductID()
	return sjuo
}

// SetMaterialID sets the "material_id" field.
func (sjuo *SecurityJournalUpdateOne) SetMaterialID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetMaterialID()
	sjuo.mutation.SetMaterialID(i)
	return sjuo
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableMaterialID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetMaterialID(*i)
	}
	return sjuo
}

// AddMaterialID adds i to the "material_id" field.
func (sjuo *SecurityJournalUpdateOne) AddMaterialID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddMaterialID(i)
	return sjuo
}

// ClearMaterialID clears the value of the "material_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearMaterialID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearMaterialID()
	return sjuo
}

// SetMaterialNo sets the "material_no" field.
func (sjuo *SecurityJournalUpdateOne) SetMaterialNo(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetMaterialNo(s)
	return sjuo
}

// SetNillableMaterialNo sets the "material_no" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableMaterialNo(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetMaterialNo(*s)
	}
	return sjuo
}

// ClearMaterialNo clears the value of the "material_no" field.
func (sjuo *SecurityJournalUpdateOne) ClearMaterialNo() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearMaterialNo()
	return sjuo
}

// SetMaterialName sets the "material_name" field.
func (sjuo *SecurityJournalUpdateOne) SetMaterialName(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetMaterialName(s)
	return sjuo
}

// SetNillableMaterialName sets the "material_name" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableMaterialName(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetMaterialName(*s)
	}
	return sjuo
}

// ClearMaterialName clears the value of the "material_name" field.
func (sjuo *SecurityJournalUpdateOne) ClearMaterialName() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearMaterialName()
	return sjuo
}

// SetMultiplier sets the "multiplier" field.
func (sjuo *SecurityJournalUpdateOne) SetMultiplier(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetMultiplier()
	sjuo.mutation.SetMultiplier(f)
	return sjuo
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableMultiplier(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetMultiplier(*f)
	}
	return sjuo
}

// AddMultiplier adds f to the "multiplier" field.
func (sjuo *SecurityJournalUpdateOne) AddMultiplier(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddMultiplier(f)
	return sjuo
}

// ClearMultiplier clears the value of the "multiplier" field.
func (sjuo *SecurityJournalUpdateOne) ClearMultiplier() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearMultiplier()
	return sjuo
}

// SetPositionType sets the "position_type" field.
func (sjuo *SecurityJournalUpdateOne) SetPositionType(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetPositionType()
	sjuo.mutation.SetPositionType(i)
	return sjuo
}

// SetNillablePositionType sets the "position_type" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillablePositionType(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetPositionType(*i)
	}
	return sjuo
}

// AddPositionType adds i to the "position_type" field.
func (sjuo *SecurityJournalUpdateOne) AddPositionType(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddPositionType(i)
	return sjuo
}

// ClearPositionType clears the value of the "position_type" field.
func (sjuo *SecurityJournalUpdateOne) ClearPositionType() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearPositionType()
	return sjuo
}

// SetCurrency sets the "currency" field.
func (sjuo *SecurityJournalUpdateOne) SetCurrency(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetCurrency(s)
	return sjuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCurrency(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetCurrency(*s)
	}
	return sjuo
}

// ClearCurrency clears the value of the "currency" field.
func (sjuo *SecurityJournalUpdateOne) ClearCurrency() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCurrency()
	return sjuo
}

// SetQty sets the "qty" field.
func (sjuo *SecurityJournalUpdateOne) SetQty(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetQty()
	sjuo.mutation.SetQty(f)
	return sjuo
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableQty(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetQty(*f)
	}
	return sjuo
}

// AddQty adds f to the "qty" field.
func (sjuo *SecurityJournalUpdateOne) AddQty(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddQty(f)
	return sjuo
}

// ClearQty clears the value of the "qty" field.
func (sjuo *SecurityJournalUpdateOne) ClearQty() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearQty()
	return sjuo
}

// SetPrice sets the "price" field.
func (sjuo *SecurityJournalUpdateOne) SetPrice(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetPrice()
	sjuo.mutation.SetPrice(f)
	return sjuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillablePrice(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetPrice(*f)
	}
	return sjuo
}

// AddPrice adds f to the "price" field.
func (sjuo *SecurityJournalUpdateOne) AddPrice(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddPrice(f)
	return sjuo
}

// ClearPrice clears the value of the "price" field.
func (sjuo *SecurityJournalUpdateOne) ClearPrice() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearPrice()
	return sjuo
}

// SetAmount sets the "amount" field.
func (sjuo *SecurityJournalUpdateOne) SetAmount(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetAmount()
	sjuo.mutation.SetAmount(f)
	return sjuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableAmount(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetAmount(*f)
	}
	return sjuo
}

// AddAmount adds f to the "amount" field.
func (sjuo *SecurityJournalUpdateOne) AddAmount(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddAmount(f)
	return sjuo
}

// ClearAmount clears the value of the "amount" field.
func (sjuo *SecurityJournalUpdateOne) ClearAmount() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearAmount()
	return sjuo
}

// SetCost sets the "cost" field.
func (sjuo *SecurityJournalUpdateOne) SetCost(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetCost()
	sjuo.mutation.SetCost(f)
	return sjuo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCost(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetCost(*f)
	}
	return sjuo
}

// AddCost adds f to the "cost" field.
func (sjuo *SecurityJournalUpdateOne) AddCost(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddCost(f)
	return sjuo
}

// ClearCost clears the value of the "cost" field.
func (sjuo *SecurityJournalUpdateOne) ClearCost() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCost()
	return sjuo
}

// SetTotal sets the "total" field.
func (sjuo *SecurityJournalUpdateOne) SetTotal(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetTotal()
	sjuo.mutation.SetTotal(f)
	return sjuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableTotal(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetTotal(*f)
	}
	return sjuo
}

// AddTotal adds f to the "total" field.
func (sjuo *SecurityJournalUpdateOne) AddTotal(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddTotal(f)
	return sjuo
}

// ClearTotal clears the value of the "total" field.
func (sjuo *SecurityJournalUpdateOne) ClearTotal() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearTotal()
	return sjuo
}

// SetUnit sets the "unit" field.
func (sjuo *SecurityJournalUpdateOne) SetUnit(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetUnit(s)
	return sjuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableUnit(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetUnit(*s)
	}
	return sjuo
}

// ClearUnit clears the value of the "unit" field.
func (sjuo *SecurityJournalUpdateOne) ClearUnit() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearUnit()
	return sjuo
}

// SetSpec sets the "spec" field.
func (sjuo *SecurityJournalUpdateOne) SetSpec(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetSpec(s)
	return sjuo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableSpec(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetSpec(*s)
	}
	return sjuo
}

// ClearSpec clears the value of the "spec" field.
func (sjuo *SecurityJournalUpdateOne) ClearSpec() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearSpec()
	return sjuo
}

// SetCommission sets the "commission" field.
func (sjuo *SecurityJournalUpdateOne) SetCommission(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetCommission()
	sjuo.mutation.SetCommission(f)
	return sjuo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCommission(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetCommission(*f)
	}
	return sjuo
}

// AddCommission adds f to the "commission" field.
func (sjuo *SecurityJournalUpdateOne) AddCommission(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddCommission(f)
	return sjuo
}

// ClearCommission clears the value of the "commission" field.
func (sjuo *SecurityJournalUpdateOne) ClearCommission() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCommission()
	return sjuo
}

// SetFee sets the "fee" field.
func (sjuo *SecurityJournalUpdateOne) SetFee(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetFee()
	sjuo.mutation.SetFee(f)
	return sjuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableFee(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetFee(*f)
	}
	return sjuo
}

// AddFee adds f to the "fee" field.
func (sjuo *SecurityJournalUpdateOne) AddFee(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddFee(f)
	return sjuo
}

// ClearFee clears the value of the "fee" field.
func (sjuo *SecurityJournalUpdateOne) ClearFee() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearFee()
	return sjuo
}

// SetFeeOther sets the "fee_other" field.
func (sjuo *SecurityJournalUpdateOne) SetFeeOther(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetFeeOther()
	sjuo.mutation.SetFeeOther(f)
	return sjuo
}

// SetNillableFeeOther sets the "fee_other" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableFeeOther(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetFeeOther(*f)
	}
	return sjuo
}

// AddFeeOther adds f to the "fee_other" field.
func (sjuo *SecurityJournalUpdateOne) AddFeeOther(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddFeeOther(f)
	return sjuo
}

// ClearFeeOther clears the value of the "fee_other" field.
func (sjuo *SecurityJournalUpdateOne) ClearFeeOther() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearFeeOther()
	return sjuo
}

// SetCount sets the "count" field.
func (sjuo *SecurityJournalUpdateOne) SetCount(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetCount()
	sjuo.mutation.SetCount(i)
	return sjuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCount(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetCount(*i)
	}
	return sjuo
}

// AddCount adds i to the "count" field.
func (sjuo *SecurityJournalUpdateOne) AddCount(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddCount(i)
	return sjuo
}

// ClearCount clears the value of the "count" field.
func (sjuo *SecurityJournalUpdateOne) ClearCount() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCount()
	return sjuo
}

// SetDirection sets the "direction" field.
func (sjuo *SecurityJournalUpdateOne) SetDirection(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetDirection()
	sjuo.mutation.SetDirection(i)
	return sjuo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableDirection(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetDirection(*i)
	}
	return sjuo
}

// AddDirection adds i to the "direction" field.
func (sjuo *SecurityJournalUpdateOne) AddDirection(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddDirection(i)
	return sjuo
}

// ClearDirection clears the value of the "direction" field.
func (sjuo *SecurityJournalUpdateOne) ClearDirection() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearDirection()
	return sjuo
}

// SetTamper sets the "tamper" field.
func (sjuo *SecurityJournalUpdateOne) SetTamper(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetTamper(s)
	return sjuo
}

// SetNillableTamper sets the "tamper" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableTamper(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetTamper(*s)
	}
	return sjuo
}

// ClearTamper clears the value of the "tamper" field.
func (sjuo *SecurityJournalUpdateOne) ClearTamper() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearTamper()
	return sjuo
}

// SetSummary sets the "summary" field.
func (sjuo *SecurityJournalUpdateOne) SetSummary(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetSummary(s)
	return sjuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableSummary(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetSummary(*s)
	}
	return sjuo
}

// ClearSummary clears the value of the "summary" field.
func (sjuo *SecurityJournalUpdateOne) ClearSummary() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearSummary()
	return sjuo
}

// SetPairSubjectCode sets the "pair_subject_code" field.
func (sjuo *SecurityJournalUpdateOne) SetPairSubjectCode(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetPairSubjectCode(s)
	return sjuo
}

// SetNillablePairSubjectCode sets the "pair_subject_code" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillablePairSubjectCode(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetPairSubjectCode(*s)
	}
	return sjuo
}

// ClearPairSubjectCode clears the value of the "pair_subject_code" field.
func (sjuo *SecurityJournalUpdateOne) ClearPairSubjectCode() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearPairSubjectCode()
	return sjuo
}

// SetPairSecurityAccountID sets the "pair_security_account_id" field.
func (sjuo *SecurityJournalUpdateOne) SetPairSecurityAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetPairSecurityAccountID()
	sjuo.mutation.SetPairSecurityAccountID(i)
	return sjuo
}

// SetNillablePairSecurityAccountID sets the "pair_security_account_id" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillablePairSecurityAccountID(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetPairSecurityAccountID(*i)
	}
	return sjuo
}

// AddPairSecurityAccountID adds i to the "pair_security_account_id" field.
func (sjuo *SecurityJournalUpdateOne) AddPairSecurityAccountID(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddPairSecurityAccountID(i)
	return sjuo
}

// ClearPairSecurityAccountID clears the value of the "pair_security_account_id" field.
func (sjuo *SecurityJournalUpdateOne) ClearPairSecurityAccountID() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearPairSecurityAccountID()
	return sjuo
}

// SetLastBalance sets the "last_balance" field.
func (sjuo *SecurityJournalUpdateOne) SetLastBalance(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetLastBalance()
	sjuo.mutation.SetLastBalance(f)
	return sjuo
}

// SetNillableLastBalance sets the "last_balance" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableLastBalance(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetLastBalance(*f)
	}
	return sjuo
}

// AddLastBalance adds f to the "last_balance" field.
func (sjuo *SecurityJournalUpdateOne) AddLastBalance(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddLastBalance(f)
	return sjuo
}

// ClearLastBalance clears the value of the "last_balance" field.
func (sjuo *SecurityJournalUpdateOne) ClearLastBalance() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearLastBalance()
	return sjuo
}

// SetStlTime sets the "stl_time" field.
func (sjuo *SecurityJournalUpdateOne) SetStlTime(t time.Time) *SecurityJournalUpdateOne {
	sjuo.mutation.SetStlTime(t)
	return sjuo
}

// SetNillableStlTime sets the "stl_time" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableStlTime(t *time.Time) *SecurityJournalUpdateOne {
	if t != nil {
		sjuo.SetStlTime(*t)
	}
	return sjuo
}

// ClearStlTime clears the value of the "stl_time" field.
func (sjuo *SecurityJournalUpdateOne) ClearStlTime() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearStlTime()
	return sjuo
}

// SetFxRate sets the "fx_rate" field.
func (sjuo *SecurityJournalUpdateOne) SetFxRate(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetFxRate()
	sjuo.mutation.SetFxRate(f)
	return sjuo
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableFxRate(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetFxRate(*f)
	}
	return sjuo
}

// AddFxRate adds f to the "fx_rate" field.
func (sjuo *SecurityJournalUpdateOne) AddFxRate(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddFxRate(f)
	return sjuo
}

// ClearFxRate clears the value of the "fx_rate" field.
func (sjuo *SecurityJournalUpdateOne) ClearFxRate() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearFxRate()
	return sjuo
}

// SetStlCurrency sets the "stl_currency" field.
func (sjuo *SecurityJournalUpdateOne) SetStlCurrency(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetStlCurrency(s)
	return sjuo
}

// SetNillableStlCurrency sets the "stl_currency" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableStlCurrency(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetStlCurrency(*s)
	}
	return sjuo
}

// ClearStlCurrency clears the value of the "stl_currency" field.
func (sjuo *SecurityJournalUpdateOne) ClearStlCurrency() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearStlCurrency()
	return sjuo
}

// SetStlAmount sets the "stl_amount" field.
func (sjuo *SecurityJournalUpdateOne) SetStlAmount(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetStlAmount()
	sjuo.mutation.SetStlAmount(f)
	return sjuo
}

// SetNillableStlAmount sets the "stl_amount" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableStlAmount(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetStlAmount(*f)
	}
	return sjuo
}

// AddStlAmount adds f to the "stl_amount" field.
func (sjuo *SecurityJournalUpdateOne) AddStlAmount(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddStlAmount(f)
	return sjuo
}

// ClearStlAmount clears the value of the "stl_amount" field.
func (sjuo *SecurityJournalUpdateOne) ClearStlAmount() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearStlAmount()
	return sjuo
}

// SetStlMarginLv sets the "stl_margin_lv" field.
func (sjuo *SecurityJournalUpdateOne) SetStlMarginLv(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetStlMarginLv()
	sjuo.mutation.SetStlMarginLv(f)
	return sjuo
}

// SetNillableStlMarginLv sets the "stl_margin_lv" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableStlMarginLv(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetStlMarginLv(*f)
	}
	return sjuo
}

// AddStlMarginLv adds f to the "stl_margin_lv" field.
func (sjuo *SecurityJournalUpdateOne) AddStlMarginLv(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddStlMarginLv(f)
	return sjuo
}

// ClearStlMarginLv clears the value of the "stl_margin_lv" field.
func (sjuo *SecurityJournalUpdateOne) ClearStlMarginLv() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearStlMarginLv()
	return sjuo
}

// SetIsSettlement sets the "is_settlement" field.
func (sjuo *SecurityJournalUpdateOne) SetIsSettlement(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetIsSettlement(s)
	return sjuo
}

// SetNillableIsSettlement sets the "is_settlement" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableIsSettlement(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetIsSettlement(*s)
	}
	return sjuo
}

// ClearIsSettlement clears the value of the "is_settlement" field.
func (sjuo *SecurityJournalUpdateOne) ClearIsSettlement() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearIsSettlement()
	return sjuo
}

// SetActualStlTime sets the "actual_stl_time" field.
func (sjuo *SecurityJournalUpdateOne) SetActualStlTime(t time.Time) *SecurityJournalUpdateOne {
	sjuo.mutation.SetActualStlTime(t)
	return sjuo
}

// SetNillableActualStlTime sets the "actual_stl_time" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableActualStlTime(t *time.Time) *SecurityJournalUpdateOne {
	if t != nil {
		sjuo.SetActualStlTime(*t)
	}
	return sjuo
}

// ClearActualStlTime clears the value of the "actual_stl_time" field.
func (sjuo *SecurityJournalUpdateOne) ClearActualStlTime() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearActualStlTime()
	return sjuo
}

// SetTransNo sets the "trans_no" field.
func (sjuo *SecurityJournalUpdateOne) SetTransNo(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetTransNo(s)
	return sjuo
}

// SetNillableTransNo sets the "trans_no" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableTransNo(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetTransNo(*s)
	}
	return sjuo
}

// ClearTransNo clears the value of the "trans_no" field.
func (sjuo *SecurityJournalUpdateOne) ClearTransNo() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearTransNo()
	return sjuo
}

// SetTransTime sets the "trans_time" field.
func (sjuo *SecurityJournalUpdateOne) SetTransTime(t time.Time) *SecurityJournalUpdateOne {
	sjuo.mutation.SetTransTime(t)
	return sjuo
}

// SetNillableTransTime sets the "trans_time" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableTransTime(t *time.Time) *SecurityJournalUpdateOne {
	if t != nil {
		sjuo.SetTransTime(*t)
	}
	return sjuo
}

// ClearTransTime clears the value of the "trans_time" field.
func (sjuo *SecurityJournalUpdateOne) ClearTransTime() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearTransTime()
	return sjuo
}

// SetAccountingNo sets the "accounting_no" field.
func (sjuo *SecurityJournalUpdateOne) SetAccountingNo(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetAccountingNo(s)
	return sjuo
}

// SetNillableAccountingNo sets the "accounting_no" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableAccountingNo(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetAccountingNo(*s)
	}
	return sjuo
}

// ClearAccountingNo clears the value of the "accounting_no" field.
func (sjuo *SecurityJournalUpdateOne) ClearAccountingNo() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearAccountingNo()
	return sjuo
}

// SetAccountingTime sets the "accounting_time" field.
func (sjuo *SecurityJournalUpdateOne) SetAccountingTime(t time.Time) *SecurityJournalUpdateOne {
	sjuo.mutation.SetAccountingTime(t)
	return sjuo
}

// SetNillableAccountingTime sets the "accounting_time" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableAccountingTime(t *time.Time) *SecurityJournalUpdateOne {
	if t != nil {
		sjuo.SetAccountingTime(*t)
	}
	return sjuo
}

// ClearAccountingTime clears the value of the "accounting_time" field.
func (sjuo *SecurityJournalUpdateOne) ClearAccountingTime() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearAccountingTime()
	return sjuo
}

// SetAccountedPositionQty sets the "accounted_position_qty" field.
func (sjuo *SecurityJournalUpdateOne) SetAccountedPositionQty(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetAccountedPositionQty()
	sjuo.mutation.SetAccountedPositionQty(f)
	return sjuo
}

// SetNillableAccountedPositionQty sets the "accounted_position_qty" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableAccountedPositionQty(f *float64) *SecurityJournalUpdateOne {
	if f != nil {
		sjuo.SetAccountedPositionQty(*f)
	}
	return sjuo
}

// AddAccountedPositionQty adds f to the "accounted_position_qty" field.
func (sjuo *SecurityJournalUpdateOne) AddAccountedPositionQty(f float64) *SecurityJournalUpdateOne {
	sjuo.mutation.AddAccountedPositionQty(f)
	return sjuo
}

// ClearAccountedPositionQty clears the value of the "accounted_position_qty" field.
func (sjuo *SecurityJournalUpdateOne) ClearAccountedPositionQty() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearAccountedPositionQty()
	return sjuo
}

// SetCdDirection sets the "cd_direction" field.
func (sjuo *SecurityJournalUpdateOne) SetCdDirection(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.ResetCdDirection()
	sjuo.mutation.SetCdDirection(i)
	return sjuo
}

// SetNillableCdDirection sets the "cd_direction" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCdDirection(i *int) *SecurityJournalUpdateOne {
	if i != nil {
		sjuo.SetCdDirection(*i)
	}
	return sjuo
}

// AddCdDirection adds i to the "cd_direction" field.
func (sjuo *SecurityJournalUpdateOne) AddCdDirection(i int) *SecurityJournalUpdateOne {
	sjuo.mutation.AddCdDirection(i)
	return sjuo
}

// ClearCdDirection clears the value of the "cd_direction" field.
func (sjuo *SecurityJournalUpdateOne) ClearCdDirection() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCdDirection()
	return sjuo
}

// SetApplyFields sets the "apply_fields" field.
func (sjuo *SecurityJournalUpdateOne) SetApplyFields(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetApplyFields(s)
	return sjuo
}

// SetNillableApplyFields sets the "apply_fields" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableApplyFields(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetApplyFields(*s)
	}
	return sjuo
}

// ClearApplyFields clears the value of the "apply_fields" field.
func (sjuo *SecurityJournalUpdateOne) ClearApplyFields() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearApplyFields()
	return sjuo
}

// SetCreatedAt sets the "created_at" field.
func (sjuo *SecurityJournalUpdateOne) SetCreatedAt(t time.Time) *SecurityJournalUpdateOne {
	sjuo.mutation.SetCreatedAt(t)
	return sjuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableCreatedAt(t *time.Time) *SecurityJournalUpdateOne {
	if t != nil {
		sjuo.SetCreatedAt(*t)
	}
	return sjuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (sjuo *SecurityJournalUpdateOne) ClearCreatedAt() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearCreatedAt()
	return sjuo
}

// SetRefTransNo sets the "ref_trans_no" field.
func (sjuo *SecurityJournalUpdateOne) SetRefTransNo(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetRefTransNo(s)
	return sjuo
}

// SetNillableRefTransNo sets the "ref_trans_no" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableRefTransNo(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetRefTransNo(*s)
	}
	return sjuo
}

// ClearRefTransNo clears the value of the "ref_trans_no" field.
func (sjuo *SecurityJournalUpdateOne) ClearRefTransNo() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearRefTransNo()
	return sjuo
}

// SetIsDayBooking sets the "is_day_booking" field.
func (sjuo *SecurityJournalUpdateOne) SetIsDayBooking(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetIsDayBooking(s)
	return sjuo
}

// SetNillableIsDayBooking sets the "is_day_booking" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableIsDayBooking(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetIsDayBooking(*s)
	}
	return sjuo
}

// ClearIsDayBooking clears the value of the "is_day_booking" field.
func (sjuo *SecurityJournalUpdateOne) ClearIsDayBooking() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearIsDayBooking()
	return sjuo
}

// SetIsEffectFund sets the "is_effect_fund" field.
func (sjuo *SecurityJournalUpdateOne) SetIsEffectFund(s string) *SecurityJournalUpdateOne {
	sjuo.mutation.SetIsEffectFund(s)
	return sjuo
}

// SetNillableIsEffectFund sets the "is_effect_fund" field if the given value is not nil.
func (sjuo *SecurityJournalUpdateOne) SetNillableIsEffectFund(s *string) *SecurityJournalUpdateOne {
	if s != nil {
		sjuo.SetIsEffectFund(*s)
	}
	return sjuo
}

// ClearIsEffectFund clears the value of the "is_effect_fund" field.
func (sjuo *SecurityJournalUpdateOne) ClearIsEffectFund() *SecurityJournalUpdateOne {
	sjuo.mutation.ClearIsEffectFund()
	return sjuo
}

// Mutation returns the SecurityJournalMutation object of the builder.
func (sjuo *SecurityJournalUpdateOne) Mutation() *SecurityJournalMutation {
	return sjuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *SecurityJournalUpdateOne) Select(field string, fields ...string) *SecurityJournalUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated SecurityJournal entity.
func (sjuo *SecurityJournalUpdateOne) Save(ctx context.Context) (*SecurityJournal, error) {
	var (
		err  error
		node *SecurityJournal
	)
	if len(sjuo.hooks) == 0 {
		if err = sjuo.check(); err != nil {
			return nil, err
		}
		node, err = sjuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityJournalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sjuo.check(); err != nil {
				return nil, err
			}
			sjuo.mutation = mutation
			node, err = sjuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sjuo.hooks) - 1; i >= 0; i-- {
			if sjuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sjuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sjuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SecurityJournal)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SecurityJournalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *SecurityJournalUpdateOne) SaveX(ctx context.Context) *SecurityJournal {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *SecurityJournalUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *SecurityJournalUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *SecurityJournalUpdateOne) check() error {
	if v, ok := sjuo.mutation.BizNo(); ok {
		if err := securityjournal.BizNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_no": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.BizType(); ok {
		if err := securityjournal.BizTypeValidator(v); err != nil {
			return &ValidationError{Name: "biz_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.biz_type": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.TradeCode(); ok {
		if err := securityjournal.TradeCodeValidator(v); err != nil {
			return &ValidationError{Name: "trade_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trade_code": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.ChangeType(); ok {
		if err := securityjournal.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.change_type": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.MaterialNo(); ok {
		if err := securityjournal.MaterialNoValidator(v); err != nil {
			return &ValidationError{Name: "material_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_no": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.MaterialName(); ok {
		if err := securityjournal.MaterialNameValidator(v); err != nil {
			return &ValidationError{Name: "material_name", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.material_name": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Currency(); ok {
		if err := securityjournal.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.currency": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Unit(); ok {
		if err := securityjournal.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.unit": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Spec(); ok {
		if err := securityjournal.SpecValidator(v); err != nil {
			return &ValidationError{Name: "spec", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.spec": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Tamper(); ok {
		if err := securityjournal.TamperValidator(v); err != nil {
			return &ValidationError{Name: "tamper", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.tamper": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Summary(); ok {
		if err := securityjournal.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.summary": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.PairSubjectCode(); ok {
		if err := securityjournal.PairSubjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "pair_subject_code", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.pair_subject_code": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.StlCurrency(); ok {
		if err := securityjournal.StlCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "stl_currency", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.stl_currency": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.IsSettlement(); ok {
		if err := securityjournal.IsSettlementValidator(v); err != nil {
			return &ValidationError{Name: "is_settlement", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_settlement": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.TransNo(); ok {
		if err := securityjournal.TransNoValidator(v); err != nil {
			return &ValidationError{Name: "trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.trans_no": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.AccountingNo(); ok {
		if err := securityjournal.AccountingNoValidator(v); err != nil {
			return &ValidationError{Name: "accounting_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.accounting_no": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.RefTransNo(); ok {
		if err := securityjournal.RefTransNoValidator(v); err != nil {
			return &ValidationError{Name: "ref_trans_no", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.ref_trans_no": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.IsDayBooking(); ok {
		if err := securityjournal.IsDayBookingValidator(v); err != nil {
			return &ValidationError{Name: "is_day_booking", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_day_booking": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.IsEffectFund(); ok {
		if err := securityjournal.IsEffectFundValidator(v); err != nil {
			return &ValidationError{Name: "is_effect_fund", err: fmt.Errorf(`ent: validator failed for field "SecurityJournal.is_effect_fund": %w`, err)}
		}
	}
	return nil
}

func (sjuo *SecurityJournalUpdateOne) sqlSave(ctx context.Context) (_node *SecurityJournal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securityjournal.Table,
			Columns: securityjournal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securityjournal.FieldID,
			},
		},
	}
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SecurityJournal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, securityjournal.FieldID)
		for _, f := range fields {
			if !securityjournal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != securityjournal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjuo.mutation.SecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldSecurityAccountID,
		})
	}
	if value, ok := sjuo.mutation.AddedSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldSecurityAccountID,
		})
	}
	if value, ok := sjuo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldAccountID,
		})
	}
	if value, ok := sjuo.mutation.AddedAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldAccountID,
		})
	}
	if sjuo.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldAccountID,
		})
	}
	if value, ok := sjuo.mutation.BizNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizNo,
		})
	}
	if sjuo.mutation.BizNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldBizNo,
		})
	}
	if value, ok := sjuo.mutation.BizType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldBizType,
		})
	}
	if sjuo.mutation.BizTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldBizType,
		})
	}
	if value, ok := sjuo.mutation.OrgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldOrgID,
		})
	}
	if value, ok := sjuo.mutation.AddedOrgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldOrgID,
		})
	}
	if value, ok := sjuo.mutation.TradeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTradeCode,
		})
	}
	if sjuo.mutation.TradeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTradeCode,
		})
	}
	if value, ok := sjuo.mutation.ChangeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldChangeType,
		})
	}
	if sjuo.mutation.ChangeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldChangeType,
		})
	}
	if value, ok := sjuo.mutation.RecordMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if value, ok := sjuo.mutation.AddedRecordMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if sjuo.mutation.RecordMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldRecordMethodID,
		})
	}
	if value, ok := sjuo.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProjectID,
		})
	}
	if value, ok := sjuo.mutation.AddedProjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProjectID,
		})
	}
	if sjuo.mutation.ProjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldProjectID,
		})
	}
	if value, ok := sjuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProductID,
		})
	}
	if value, ok := sjuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldProductID,
		})
	}
	if sjuo.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldProductID,
		})
	}
	if value, ok := sjuo.mutation.MaterialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if value, ok := sjuo.mutation.AddedMaterialID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if sjuo.mutation.MaterialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldMaterialID,
		})
	}
	if value, ok := sjuo.mutation.MaterialNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialNo,
		})
	}
	if sjuo.mutation.MaterialNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldMaterialNo,
		})
	}
	if value, ok := sjuo.mutation.MaterialName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldMaterialName,
		})
	}
	if sjuo.mutation.MaterialNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldMaterialName,
		})
	}
	if value, ok := sjuo.mutation.Multiplier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if value, ok := sjuo.mutation.AddedMultiplier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if sjuo.mutation.MultiplierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldMultiplier,
		})
	}
	if value, ok := sjuo.mutation.PositionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPositionType,
		})
	}
	if value, ok := sjuo.mutation.AddedPositionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPositionType,
		})
	}
	if sjuo.mutation.PositionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldPositionType,
		})
	}
	if value, ok := sjuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldCurrency,
		})
	}
	if sjuo.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldCurrency,
		})
	}
	if value, ok := sjuo.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldQty,
		})
	}
	if value, ok := sjuo.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldQty,
		})
	}
	if sjuo.mutation.QtyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldQty,
		})
	}
	if value, ok := sjuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldPrice,
		})
	}
	if value, ok := sjuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldPrice,
		})
	}
	if sjuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldPrice,
		})
	}
	if value, ok := sjuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAmount,
		})
	}
	if value, ok := sjuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAmount,
		})
	}
	if sjuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldAmount,
		})
	}
	if value, ok := sjuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCost,
		})
	}
	if value, ok := sjuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCost,
		})
	}
	if sjuo.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldCost,
		})
	}
	if value, ok := sjuo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldTotal,
		})
	}
	if value, ok := sjuo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldTotal,
		})
	}
	if sjuo.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldTotal,
		})
	}
	if value, ok := sjuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldUnit,
		})
	}
	if sjuo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldUnit,
		})
	}
	if value, ok := sjuo.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSpec,
		})
	}
	if sjuo.mutation.SpecCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldSpec,
		})
	}
	if value, ok := sjuo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCommission,
		})
	}
	if value, ok := sjuo.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldCommission,
		})
	}
	if sjuo.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldCommission,
		})
	}
	if value, ok := sjuo.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFee,
		})
	}
	if value, ok := sjuo.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFee,
		})
	}
	if sjuo.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFee,
		})
	}
	if value, ok := sjuo.mutation.FeeOther(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if value, ok := sjuo.mutation.AddedFeeOther(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if sjuo.mutation.FeeOtherCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFeeOther,
		})
	}
	if value, ok := sjuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCount,
		})
	}
	if value, ok := sjuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCount,
		})
	}
	if sjuo.mutation.CountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldCount,
		})
	}
	if value, ok := sjuo.mutation.Direction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldDirection,
		})
	}
	if value, ok := sjuo.mutation.AddedDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldDirection,
		})
	}
	if sjuo.mutation.DirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldDirection,
		})
	}
	if value, ok := sjuo.mutation.Tamper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTamper,
		})
	}
	if sjuo.mutation.TamperCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTamper,
		})
	}
	if value, ok := sjuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldSummary,
		})
	}
	if sjuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldSummary,
		})
	}
	if value, ok := sjuo.mutation.PairSubjectCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldPairSubjectCode,
		})
	}
	if sjuo.mutation.PairSubjectCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldPairSubjectCode,
		})
	}
	if value, ok := sjuo.mutation.PairSecurityAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if value, ok := sjuo.mutation.AddedPairSecurityAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if sjuo.mutation.PairSecurityAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldPairSecurityAccountID,
		})
	}
	if value, ok := sjuo.mutation.LastBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if value, ok := sjuo.mutation.AddedLastBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if sjuo.mutation.LastBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldLastBalance,
		})
	}
	if value, ok := sjuo.mutation.StlTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldStlTime,
		})
	}
	if sjuo.mutation.StlTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldStlTime,
		})
	}
	if value, ok := sjuo.mutation.FxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFxRate,
		})
	}
	if value, ok := sjuo.mutation.AddedFxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldFxRate,
		})
	}
	if sjuo.mutation.FxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldFxRate,
		})
	}
	if value, ok := sjuo.mutation.StlCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldStlCurrency,
		})
	}
	if sjuo.mutation.StlCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldStlCurrency,
		})
	}
	if value, ok := sjuo.mutation.StlAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if value, ok := sjuo.mutation.AddedStlAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if sjuo.mutation.StlAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldStlAmount,
		})
	}
	if value, ok := sjuo.mutation.StlMarginLv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if value, ok := sjuo.mutation.AddedStlMarginLv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if sjuo.mutation.StlMarginLvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldStlMarginLv,
		})
	}
	if value, ok := sjuo.mutation.IsSettlement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsSettlement,
		})
	}
	if sjuo.mutation.IsSettlementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsSettlement,
		})
	}
	if value, ok := sjuo.mutation.ActualStlTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldActualStlTime,
		})
	}
	if sjuo.mutation.ActualStlTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldActualStlTime,
		})
	}
	if value, ok := sjuo.mutation.TransNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldTransNo,
		})
	}
	if sjuo.mutation.TransNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldTransNo,
		})
	}
	if value, ok := sjuo.mutation.TransTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldTransTime,
		})
	}
	if sjuo.mutation.TransTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldTransTime,
		})
	}
	if value, ok := sjuo.mutation.AccountingNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldAccountingNo,
		})
	}
	if sjuo.mutation.AccountingNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldAccountingNo,
		})
	}
	if value, ok := sjuo.mutation.AccountingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldAccountingTime,
		})
	}
	if sjuo.mutation.AccountingTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldAccountingTime,
		})
	}
	if value, ok := sjuo.mutation.AccountedPositionQty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if value, ok := sjuo.mutation.AddedAccountedPositionQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if sjuo.mutation.AccountedPositionQtyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: securityjournal.FieldAccountedPositionQty,
		})
	}
	if value, ok := sjuo.mutation.CdDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if value, ok := sjuo.mutation.AddedCdDirection(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if sjuo.mutation.CdDirectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: securityjournal.FieldCdDirection,
		})
	}
	if value, ok := sjuo.mutation.ApplyFields(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldApplyFields,
		})
	}
	if sjuo.mutation.ApplyFieldsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldApplyFields,
		})
	}
	if value, ok := sjuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securityjournal.FieldCreatedAt,
		})
	}
	if sjuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: securityjournal.FieldCreatedAt,
		})
	}
	if value, ok := sjuo.mutation.RefTransNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldRefTransNo,
		})
	}
	if sjuo.mutation.RefTransNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldRefTransNo,
		})
	}
	if value, ok := sjuo.mutation.IsDayBooking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsDayBooking,
		})
	}
	if sjuo.mutation.IsDayBookingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsDayBooking,
		})
	}
	if value, ok := sjuo.mutation.IsEffectFund(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securityjournal.FieldIsEffectFund,
		})
	}
	if sjuo.mutation.IsEffectFundCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securityjournal.FieldIsEffectFund,
		})
	}
	_node = &SecurityJournal{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityjournal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
